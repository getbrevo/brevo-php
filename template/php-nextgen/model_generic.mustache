class {{classname}} {{#parentSchema}}extends {{{parent}}}{{/parentSchema}}{{^parentSchema}}extends AbstractModel{{/parentSchema}}
{
    public const DISCRIMINATOR = {{#discriminator}}'{{discriminatorName}}'{{/discriminator}}{{^discriminator}}null{{/discriminator}};

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '{{name}}';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        {{#vars}}'{{name}}' => '{{{dataType}}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        {{#vars}}'{{name}}' => {{#dataFormat}}'{{{.}}}'{{/dataFormat}}{{^dataFormat}}null{{/dataFormat}}{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        {{#vars}}'{{name}}' => {{#isNullable}}true{{/isNullable}}{{^isNullable}}false{{/isNullable}}{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

{{#parentSchema}}    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }
{{/parentSchema}}
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        {{#vars}}'{{name}}' => '{{baseName}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        {{#vars}}'{{name}}' => '{{setter}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        {{#vars}}'{{name}}' => '{{getter}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return {{#parentSchema}}parent::attributeMap() + {{/parentSchema}}self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return {{#parentSchema}}parent::setters() + {{/parentSchema}}self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return {{#parentSchema}}parent::getters() + {{/parentSchema}}self::$getters;
    }

    {{#vars}}
    {{#isEnum}}
    {{#allowableValues}}
    {{#enumVars}}
    public const {{enumName}}_{{{name}}} = {{{value}}};
    {{/enumVars}}
    {{/allowableValues}}
    {{/isEnum}}
    {{/vars}}

    {{#vars}}
    {{#isEnum}}
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function {{getter}}AllowableValues()
    {
        return [
            {{#allowableValues}}{{#enumVars}}self::{{enumName}}_{{{name}}},{{^-last}}
            {{/-last}}{{/enumVars}}{{/allowableValues}}
        ];
    }

    {{/isEnum}}
    {{/vars}}
    {{^parentSchema}}
    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];
    {{/parentSchema}}

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        {{#parentSchema}}
        parent::__construct($data);

        {{/parentSchema}}
        {{#vars}}
        $this->setIfExists('{{name}}', $data ?? [], {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}});
        {{/vars}}
        {{#discriminator}}

        // Initialize discriminator property with the model name.
        $this->container['{{discriminatorName}}'] = static::$openAPIModelName;
        {{/discriminator}}
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        {{#parentSchema}}
        $invalidProperties = parent::listInvalidProperties();
        {{/parentSchema}}
        {{^parentSchema}}
        $invalidProperties = [];
        {{/parentSchema}}

        {{#vars}}
        {{#required}}
        if ($this->container['{{name}}'] === null) {
            $invalidProperties[] = "'{{name}}' can't be null";
        }
        {{/required}}
        {{#isEnum}}
        {{^isContainer}}
        $allowedValues = $this->{{getter}}AllowableValues();
        if (!is_null($this->container['{{name}}']) && !in_array($this->container['{{name}}'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for '{{name}}', must be one of '%s'",
                $this->container['{{name}}'],
                implode("', '", $allowedValues)
            );
        }

        {{/isContainer}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(mb_strlen($this->container['{{name}}']) > {{maxLength}})) {
            $invalidProperties[] = "invalid value for '{{name}}', the character length must be smaller than or equal to {{{maxLength}}}.";
        }

        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(mb_strlen($this->container['{{name}}']) < {{minLength}})) {
            $invalidProperties[] = "invalid value for '{{name}}', the character length must be bigger than or equal to {{{minLength}}}.";
        }

        {{/minLength}}
        {{#maximum}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}($this->container['{{name}}'] >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            $invalidProperties[] = "invalid value for '{{name}}', must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.";
        }

        {{/maximum}}
        {{#minimum}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}($this->container['{{name}}'] <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            $invalidProperties[] = "invalid value for '{{name}}', must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.";
        }

        {{/minimum}}
        {{#pattern}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}!preg_match("{{{pattern}}}", $this->container['{{name}}'])) {
            $invalidProperties[] = "invalid value for '{{name}}', must be conform to the pattern {{{pattern}}}.";
        }

        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(count($this->container['{{name}}']) > {{maxItems}})) {
            $invalidProperties[] = "invalid value for '{{name}}', number of items must be less than or equal to {{{maxItems}}}.";
        }

        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}!is_null($this->container['{{name}}']) && {{/required}}(count($this->container['{{name}}']) < {{minItems}})) {
            $invalidProperties[] = "invalid value for '{{name}}', number of items must be greater than or equal to {{{minItems}}}.";
        }

        {{/minItems}}
        {{/hasValidation}}
        {{/vars}}
        return $invalidProperties;
    }
    {{#vars}}

    /**
     * Gets {{name}}
     *
     * @return {{{dataType}}}{{^required}}|null{{/required}}
    {{#deprecated}}
     * @deprecated
    {{/deprecated}}
     */
    public function {{getter}}(): {{vendorExtensions.x-php-prop-type}}
    {
        return $this->container['{{name}}'];
    }

    /**
     * Sets {{name}}
     *
     * @param {{{dataType}}}{{^required}}|null{{/required}} ${{name}}{{#description}} {{{.}}}{{/description}}{{^description}} {{{name}}}{{/description}}
     *
     * @return $this
    {{#deprecated}}
     * @deprecated
    {{/deprecated}}
     */
    public function {{setter}}({{vendorExtensions.x-php-prop-type}} ${{name}}): static
    {
        {{#isNullable}}
        if (is_null(${{name}})) {
            array_push($this->openAPINullablesSetToNull, '{{name}}');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('{{name}}', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        {{/isNullable}}
        {{^isNullable}}
        if (is_null(${{name}})) {
            throw new InvalidArgumentException('non-nullable {{name}} cannot be null');
        }
        {{/isNullable}}
        {{#isEnum}}
        $allowedValues = $this->{{getter}}AllowableValues();
        {{^isContainer}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}!in_array(${{{name}}}, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for '{{name}}', must be one of '%s'",
                    ${{{name}}},
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{#isContainer}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}array_diff(${{{name}}}, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for '{{name}}', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(mb_strlen(${{name}}) > {{maxLength}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }{{/maxLength}}
        {{#minLength}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(mb_strlen(${{name}}) < {{minLength}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(${{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(${{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(!preg_match("{{{pattern}}}", ObjectSerializer::toString(${{name}})))) {
            throw new InvalidArgumentException("invalid value for \${{name}} when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(count(${{name}}) > {{maxItems}})) {
            throw new InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }{{/maxItems}}
        {{#minItems}}
        if ({{#isNullable}}!is_null(${{name}}) && {{/isNullable}}(count(${{name}}) < {{minItems}})) {
            throw new InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}
        {{/hasValidation}}
        $this->container['{{name}}'] = ${{name}};

        return $this;
    }
    {{/vars}}
}
