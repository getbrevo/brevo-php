<?php
/**
 * ProgramApi
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Brevo\Client\ApiException;
use Brevo\Client\Configuration;
use Brevo\Client\HeaderSelector;
use Brevo\Client\ObjectSerializer;

/**
 * ProgramApi Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProgramApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewLP' => [
            'application/json',
        ],
        'deleteContactMembers' => [
            'application/json',
        ],
        'deleteLoyaltyProgram' => [
            'application/json',
        ],
        'deleteSubscriptionMember' => [
            'application/json',
        ],
        'getLPList' => [
            'application/json',
        ],
        'getLoyaltyProgramInfo' => [
            'application/json',
        ],
        'getParameterSubscriptionInfo' => [
            'application/json',
        ],
        'getSubscriptionMember' => [
            'application/json',
        ],
        'partiallyUpdateLoyaltyProgram' => [
            'application/json',
        ],
        'publishLoyaltyProgram' => [
            'application/json',
        ],
        'subscribeMemberToASubscription' => [
            'application/json',
        ],
        'subscribeToLoyaltyProgram' => [
            'application/json',
        ],
        'updateLoyaltyProgram' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createNewLP
     *
     * Create loyalty program
     *
     * @param  \Brevo\Client\Models\CreateLoyaltyProgramPayload|null $createLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewLP'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload
     */
    public function createNewLP(
        ?\Brevo\Client\Models\CreateLoyaltyProgramPayload $createLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['createNewLP'][0]
    ): \Brevo\Client\Models\LoyaltyProgram
    {
        list($response) = $this->createNewLPWithHttpInfo($createLoyaltyProgramPayload, $contentType);
        return $response;
    }

    /**
     * Operation createNewLPWithHttpInfo
     *
     * Create loyalty program
     *
     * @param  \Brevo\Client\Models\CreateLoyaltyProgramPayload|null $createLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewLP'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewLPWithHttpInfo(
        ?\Brevo\Client\Models\CreateLoyaltyProgramPayload $createLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['createNewLP'][0]
    ): array
    {
        $request = $this->createNewLPRequest($createLoyaltyProgramPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\LoyaltyProgram', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyProgram';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewLPAsync
     *
     * Create loyalty program
     *
     * @param  \Brevo\Client\Models\CreateLoyaltyProgramPayload|null $createLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewLP'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNewLPAsync(
        ?\Brevo\Client\Models\CreateLoyaltyProgramPayload $createLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['createNewLP'][0]
    ): PromiseInterface
    {
        return $this->createNewLPAsyncWithHttpInfo($createLoyaltyProgramPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewLPAsyncWithHttpInfo
     *
     * Create loyalty program
     *
     * @param  \Brevo\Client\Models\CreateLoyaltyProgramPayload|null $createLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewLP'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNewLPAsyncWithHttpInfo(
        $createLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['createNewLP'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyProgram';
        $request = $this->createNewLPRequest($createLoyaltyProgramPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewLP'
     *
     * @param  \Brevo\Client\Models\CreateLoyaltyProgramPayload|null $createLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewLP'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewLPRequest(
        $createLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['createNewLP'][0]
    ): Request
    {



        $resourcePath = '/loyalty/config/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createLoyaltyProgramPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createLoyaltyProgramPayload));
            } else {
                $httpBody = $createLoyaltyProgramPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContactMembers
     *
     * Delete subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId Contact Id (required)
     * @param  int $memberContactIds Member Contact Ids, comma-seperated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContactMembers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteContactMembers(
        string $loyaltyProgramId,
        int $contactId,
        int $memberContactIds,
        string $contentType = self::contentTypes['deleteContactMembers'][0]
    ): void
    {
        $this->deleteContactMembersWithHttpInfo($loyaltyProgramId, $contactId, $memberContactIds, $contentType);
    }

    /**
     * Operation deleteContactMembersWithHttpInfo
     *
     * Delete subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId Contact Id (required)
     * @param  int $memberContactIds Member Contact Ids, comma-seperated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContactMembers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactMembersWithHttpInfo(
        string $loyaltyProgramId,
        int $contactId,
        int $memberContactIds,
        string $contentType = self::contentTypes['deleteContactMembers'][0]
    ): array
    {
        $request = $this->deleteContactMembersRequest($loyaltyProgramId, $contactId, $memberContactIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContactMembersAsync
     *
     * Delete subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId Contact Id (required)
     * @param  int $memberContactIds Member Contact Ids, comma-seperated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContactMembers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteContactMembersAsync(
        string $loyaltyProgramId,
        int $contactId,
        int $memberContactIds,
        string $contentType = self::contentTypes['deleteContactMembers'][0]
    ): PromiseInterface
    {
        return $this->deleteContactMembersAsyncWithHttpInfo($loyaltyProgramId, $contactId, $memberContactIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContactMembersAsyncWithHttpInfo
     *
     * Delete subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId Contact Id (required)
     * @param  int $memberContactIds Member Contact Ids, comma-seperated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContactMembers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteContactMembersAsyncWithHttpInfo(
        $loyaltyProgramId,
        $contactId,
        $memberContactIds,
        string $contentType = self::contentTypes['deleteContactMembers'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteContactMembersRequest($loyaltyProgramId, $contactId, $memberContactIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContactMembers'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId Contact Id (required)
     * @param  int $memberContactIds Member Contact Ids, comma-seperated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContactMembers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteContactMembersRequest(
        $loyaltyProgramId,
        $contactId,
        $memberContactIds,
        string $contentType = self::contentTypes['deleteContactMembers'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling deleteContactMembers'
            );
        }

        // verify the required parameter 'contactId' is set
        if ($contactId === null || (is_array($contactId) && count($contactId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contactId when calling deleteContactMembers'
            );
        }

        // verify the required parameter 'memberContactIds' is set
        if ($memberContactIds === null || (is_array($memberContactIds) && count($memberContactIds) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $memberContactIds when calling deleteContactMembers'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/subscriptions-members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactId,
            'contactId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $memberContactIds,
            'memberContactIds', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLoyaltyProgram
     *
     * Delete Loyalty Program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteLoyaltyProgram(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): void
    {
        $this->deleteLoyaltyProgramWithHttpInfo($loyaltyProgramId, $contentType);
    }

    /**
     * Operation deleteLoyaltyProgramWithHttpInfo
     *
     * Delete Loyalty Program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLoyaltyProgramWithHttpInfo(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): array
    {
        $request = $this->deleteLoyaltyProgramRequest($loyaltyProgramId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLoyaltyProgramAsync
     *
     * Delete Loyalty Program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLoyaltyProgramAsync(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->deleteLoyaltyProgramAsyncWithHttpInfo($loyaltyProgramId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLoyaltyProgramAsyncWithHttpInfo
     *
     * Delete Loyalty Program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLoyaltyProgramAsyncWithHttpInfo(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteLoyaltyProgramRequest($loyaltyProgramId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLoyaltyProgram'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLoyaltyProgramRequest(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling deleteLoyaltyProgram'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptionMember
     *
     * Delete subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteSubscriptionMember(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['deleteSubscriptionMember'][0]
    ): void
    {
        $this->deleteSubscriptionMemberWithHttpInfo($loyaltyProgramId, $contactId, $contentType);
    }

    /**
     * Operation deleteSubscriptionMemberWithHttpInfo
     *
     * Delete subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionMemberWithHttpInfo(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['deleteSubscriptionMember'][0]
    ): array
    {
        $request = $this->deleteSubscriptionMemberRequest($loyaltyProgramId, $contactId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionMemberAsync
     *
     * Delete subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionMember'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSubscriptionMemberAsync(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['deleteSubscriptionMember'][0]
    ): PromiseInterface
    {
        return $this->deleteSubscriptionMemberAsyncWithHttpInfo($loyaltyProgramId, $contactId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionMemberAsyncWithHttpInfo
     *
     * Delete subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSubscriptionMemberAsyncWithHttpInfo(
        $loyaltyProgramId,
        $contactId,
        string $contentType = self::contentTypes['deleteSubscriptionMember'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteSubscriptionMemberRequest($loyaltyProgramId, $contactId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptionMember'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionMember'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSubscriptionMemberRequest(
        $loyaltyProgramId,
        $contactId,
        string $contentType = self::contentTypes['deleteSubscriptionMember'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling deleteSubscriptionMember'
            );
        }

        // verify the required parameter 'contactId' is set
        if ($contactId === null || (is_array($contactId) && count($contactId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contactId when calling deleteSubscriptionMember'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/contact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($contactId !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contactId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLPList
     *
     * Get loyalty program list
     *
     * @param  int|null $limit Number of documents per page (optional, default to 200)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $sortField Sort documents by field (optional, default to 'updatedAt')
     * @param  string|null $sort Sort the documents in the ascending or descending order (optional, default to 'desc')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLPList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyProgramPage|\Brevo\Client\Models\BadRequestPayload
     */
    public function getLPList(
        ?int $limit = 200,
        ?int $offset = 0,
        ?string $sortField = 'updatedAt',
        ?string $sort = 'desc',
        string $contentType = self::contentTypes['getLPList'][0]
    ): \Brevo\Client\Models\LoyaltyProgramPage
    {
        list($response) = $this->getLPListWithHttpInfo($limit, $offset, $sortField, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getLPListWithHttpInfo
     *
     * Get loyalty program list
     *
     * @param  int|null $limit Number of documents per page (optional, default to 200)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $sortField Sort documents by field (optional, default to 'updatedAt')
     * @param  string|null $sort Sort the documents in the ascending or descending order (optional, default to 'desc')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLPList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyProgramPage|\Brevo\Client\Models\BadRequestPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLPListWithHttpInfo(
        ?int $limit = 200,
        ?int $offset = 0,
        ?string $sortField = 'updatedAt',
        ?string $sort = 'desc',
        string $contentType = self::contentTypes['getLPList'][0]
    ): array
    {
        $request = $this->getLPListRequest($limit, $offset, $sortField, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\LoyaltyProgramPage', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyProgramPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyProgramPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyProgramPage';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyProgramPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLPListAsync
     *
     * Get loyalty program list
     *
     * @param  int|null $limit Number of documents per page (optional, default to 200)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $sortField Sort documents by field (optional, default to 'updatedAt')
     * @param  string|null $sort Sort the documents in the ascending or descending order (optional, default to 'desc')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLPList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLPListAsync(
        ?int $limit = 200,
        ?int $offset = 0,
        ?string $sortField = 'updatedAt',
        ?string $sort = 'desc',
        string $contentType = self::contentTypes['getLPList'][0]
    ): PromiseInterface
    {
        return $this->getLPListAsyncWithHttpInfo($limit, $offset, $sortField, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLPListAsyncWithHttpInfo
     *
     * Get loyalty program list
     *
     * @param  int|null $limit Number of documents per page (optional, default to 200)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $sortField Sort documents by field (optional, default to 'updatedAt')
     * @param  string|null $sort Sort the documents in the ascending or descending order (optional, default to 'desc')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLPList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLPListAsyncWithHttpInfo(
        $limit = 200,
        $offset = 0,
        $sortField = 'updatedAt',
        $sort = 'desc',
        string $contentType = self::contentTypes['getLPList'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyProgramPage';
        $request = $this->getLPListRequest($limit, $offset, $sortField, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLPList'
     *
     * @param  int|null $limit Number of documents per page (optional, default to 200)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $sortField Sort documents by field (optional, default to 'updatedAt')
     * @param  string|null $sort Sort the documents in the ascending or descending order (optional, default to 'desc')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLPList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLPListRequest(
        $limit = 200,
        $offset = 0,
        $sortField = 'updatedAt',
        $sort = 'desc',
        string $contentType = self::contentTypes['getLPList'][0]
    ): Request
    {






        $resourcePath = '/loyalty/config/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortField,
            'sortField', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoyaltyProgramInfo
     *
     * Get loyalty program Info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload
     */
    public function getLoyaltyProgramInfo(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['getLoyaltyProgramInfo'][0]
    ): \Brevo\Client\Models\LoyaltyProgram
    {
        list($response) = $this->getLoyaltyProgramInfoWithHttpInfo($loyaltyProgramId, $contentType);
        return $response;
    }

    /**
     * Operation getLoyaltyProgramInfoWithHttpInfo
     *
     * Get loyalty program Info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoyaltyProgramInfoWithHttpInfo(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['getLoyaltyProgramInfo'][0]
    ): array
    {
        $request = $this->getLoyaltyProgramInfoRequest($loyaltyProgramId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\LoyaltyProgram', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyProgram';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoyaltyProgramInfoAsync
     *
     * Get loyalty program Info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramInfo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyProgramInfoAsync(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['getLoyaltyProgramInfo'][0]
    ): PromiseInterface
    {
        return $this->getLoyaltyProgramInfoAsyncWithHttpInfo($loyaltyProgramId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoyaltyProgramInfoAsyncWithHttpInfo
     *
     * Get loyalty program Info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyProgramInfoAsyncWithHttpInfo(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['getLoyaltyProgramInfo'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyProgram';
        $request = $this->getLoyaltyProgramInfoRequest($loyaltyProgramId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoyaltyProgramInfo'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramInfo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoyaltyProgramInfoRequest(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['getLoyaltyProgramInfo'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getLoyaltyProgramInfo'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameterSubscriptionInfo
     *
     * Get Subscription Data
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId One of contact id or loyalty subscription id is required (required)
     * @param  string|null $loyaltySubscriptionId Loyalty Subscription Id (optional)
     * @param  string[]|null $params Add query params (balance, tier, reward, or member) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameterSubscriptionInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetSubscriptionInfoResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function getParameterSubscriptionInfo(
        string $loyaltyProgramId,
        int $contactId,
        ?string $loyaltySubscriptionId = null,
        ?array $params = null,
        string $contentType = self::contentTypes['getParameterSubscriptionInfo'][0]
    ): \Brevo\Client\Models\GetSubscriptionInfoResponse
    {
        list($response) = $this->getParameterSubscriptionInfoWithHttpInfo($loyaltyProgramId, $contactId, $loyaltySubscriptionId, $params, $contentType);
        return $response;
    }

    /**
     * Operation getParameterSubscriptionInfoWithHttpInfo
     *
     * Get Subscription Data
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId One of contact id or loyalty subscription id is required (required)
     * @param  string|null $loyaltySubscriptionId Loyalty Subscription Id (optional)
     * @param  string[]|null $params Add query params (balance, tier, reward, or member) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameterSubscriptionInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetSubscriptionInfoResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterSubscriptionInfoWithHttpInfo(
        string $loyaltyProgramId,
        int $contactId,
        ?string $loyaltySubscriptionId = null,
        ?array $params = null,
        string $contentType = self::contentTypes['getParameterSubscriptionInfo'][0]
    ): array
    {
        $request = $this->getParameterSubscriptionInfoRequest($loyaltyProgramId, $contactId, $loyaltySubscriptionId, $params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetSubscriptionInfoResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetSubscriptionInfoResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetSubscriptionInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetSubscriptionInfoResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetSubscriptionInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterSubscriptionInfoAsync
     *
     * Get Subscription Data
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId One of contact id or loyalty subscription id is required (required)
     * @param  string|null $loyaltySubscriptionId Loyalty Subscription Id (optional)
     * @param  string[]|null $params Add query params (balance, tier, reward, or member) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameterSubscriptionInfo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getParameterSubscriptionInfoAsync(
        string $loyaltyProgramId,
        int $contactId,
        ?string $loyaltySubscriptionId = null,
        ?array $params = null,
        string $contentType = self::contentTypes['getParameterSubscriptionInfo'][0]
    ): PromiseInterface
    {
        return $this->getParameterSubscriptionInfoAsyncWithHttpInfo($loyaltyProgramId, $contactId, $loyaltySubscriptionId, $params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterSubscriptionInfoAsyncWithHttpInfo
     *
     * Get Subscription Data
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId One of contact id or loyalty subscription id is required (required)
     * @param  string|null $loyaltySubscriptionId Loyalty Subscription Id (optional)
     * @param  string[]|null $params Add query params (balance, tier, reward, or member) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameterSubscriptionInfo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getParameterSubscriptionInfoAsyncWithHttpInfo(
        $loyaltyProgramId,
        $contactId,
        $loyaltySubscriptionId = null,
        $params = null,
        string $contentType = self::contentTypes['getParameterSubscriptionInfo'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetSubscriptionInfoResponse';
        $request = $this->getParameterSubscriptionInfoRequest($loyaltyProgramId, $contactId, $loyaltySubscriptionId, $params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameterSubscriptionInfo'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int $contactId One of contact id or loyalty subscription id is required (required)
     * @param  string|null $loyaltySubscriptionId Loyalty Subscription Id (optional)
     * @param  string[]|null $params Add query params (balance, tier, reward, or member) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParameterSubscriptionInfo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getParameterSubscriptionInfoRequest(
        $loyaltyProgramId,
        $contactId,
        $loyaltySubscriptionId = null,
        $params = null,
        string $contentType = self::contentTypes['getParameterSubscriptionInfo'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getParameterSubscriptionInfo'
            );
        }

        // verify the required parameter 'contactId' is set
        if ($contactId === null || (is_array($contactId) && count($contactId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contactId when calling getParameterSubscriptionInfo'
            );
        }




        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/account-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contactId,
            'contactId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loyaltySubscriptionId,
            'loyaltySubscriptionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionMember
     *
     * Get subscription info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetSubscriptionMemberResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function getSubscriptionMember(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['getSubscriptionMember'][0]
    ): \Brevo\Client\Models\GetSubscriptionMemberResponse
    {
        list($response) = $this->getSubscriptionMemberWithHttpInfo($loyaltyProgramId, $contactId, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriptionMemberWithHttpInfo
     *
     * Get subscription info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetSubscriptionMemberResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionMemberWithHttpInfo(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['getSubscriptionMember'][0]
    ): array
    {
        $request = $this->getSubscriptionMemberRequest($loyaltyProgramId, $contactId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetSubscriptionMemberResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetSubscriptionMemberResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetSubscriptionMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetSubscriptionMemberResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetSubscriptionMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionMemberAsync
     *
     * Get subscription info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionMember'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionMemberAsync(
        string $loyaltyProgramId,
        string $contactId,
        string $contentType = self::contentTypes['getSubscriptionMember'][0]
    ): PromiseInterface
    {
        return $this->getSubscriptionMemberAsyncWithHttpInfo($loyaltyProgramId, $contactId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionMemberAsyncWithHttpInfo
     *
     * Get subscription info
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionMember'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubscriptionMemberAsyncWithHttpInfo(
        $loyaltyProgramId,
        $contactId,
        string $contentType = self::contentTypes['getSubscriptionMember'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetSubscriptionMemberResponse';
        $request = $this->getSubscriptionMemberRequest($loyaltyProgramId, $contactId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionMember'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionMember'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriptionMemberRequest(
        $loyaltyProgramId,
        $contactId,
        string $contentType = self::contentTypes['getSubscriptionMember'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getSubscriptionMember'
            );
        }

        // verify the required parameter 'contactId' is set
        if ($contactId === null || (is_array($contactId) && count($contactId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contactId when calling getSubscriptionMember'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/contact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($contactId !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contactId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateLoyaltyProgram
     *
     * Partially update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\PatchLoyaltyProgramPayload|null $patchLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partiallyUpdateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload
     */
    public function partiallyUpdateLoyaltyProgram(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\PatchLoyaltyProgramPayload $patchLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['partiallyUpdateLoyaltyProgram'][0]
    ): \Brevo\Client\Models\LoyaltyProgram
    {
        list($response) = $this->partiallyUpdateLoyaltyProgramWithHttpInfo($loyaltyProgramId, $patchLoyaltyProgramPayload, $contentType);
        return $response;
    }

    /**
     * Operation partiallyUpdateLoyaltyProgramWithHttpInfo
     *
     * Partially update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\PatchLoyaltyProgramPayload|null $patchLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partiallyUpdateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function partiallyUpdateLoyaltyProgramWithHttpInfo(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\PatchLoyaltyProgramPayload $patchLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['partiallyUpdateLoyaltyProgram'][0]
    ): array
    {
        $request = $this->partiallyUpdateLoyaltyProgramRequest($loyaltyProgramId, $patchLoyaltyProgramPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\LoyaltyProgram', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyProgram';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateLoyaltyProgramAsync
     *
     * Partially update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\PatchLoyaltyProgramPayload|null $patchLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partiallyUpdateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function partiallyUpdateLoyaltyProgramAsync(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\PatchLoyaltyProgramPayload $patchLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['partiallyUpdateLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->partiallyUpdateLoyaltyProgramAsyncWithHttpInfo($loyaltyProgramId, $patchLoyaltyProgramPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateLoyaltyProgramAsyncWithHttpInfo
     *
     * Partially update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\PatchLoyaltyProgramPayload|null $patchLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partiallyUpdateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function partiallyUpdateLoyaltyProgramAsyncWithHttpInfo(
        $loyaltyProgramId,
        $patchLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['partiallyUpdateLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyProgram';
        $request = $this->partiallyUpdateLoyaltyProgramRequest($loyaltyProgramId, $patchLoyaltyProgramPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateLoyaltyProgram'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\PatchLoyaltyProgramPayload|null $patchLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partiallyUpdateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function partiallyUpdateLoyaltyProgramRequest(
        $loyaltyProgramId,
        $patchLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['partiallyUpdateLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling partiallyUpdateLoyaltyProgram'
            );
        }



        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patchLoyaltyProgramPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patchLoyaltyProgramPayload));
            } else {
                $httpBody = $patchLoyaltyProgramPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishLoyaltyProgram
     *
     * Publish loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function publishLoyaltyProgram(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['publishLoyaltyProgram'][0]
    ): void
    {
        $this->publishLoyaltyProgramWithHttpInfo($loyaltyProgramId, $contentType);
    }

    /**
     * Operation publishLoyaltyProgramWithHttpInfo
     *
     * Publish loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishLoyaltyProgramWithHttpInfo(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['publishLoyaltyProgram'][0]
    ): array
    {
        $request = $this->publishLoyaltyProgramRequest($loyaltyProgramId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publishLoyaltyProgramAsync
     *
     * Publish loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function publishLoyaltyProgramAsync(
        string $loyaltyProgramId,
        string $contentType = self::contentTypes['publishLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->publishLoyaltyProgramAsyncWithHttpInfo($loyaltyProgramId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishLoyaltyProgramAsyncWithHttpInfo
     *
     * Publish loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function publishLoyaltyProgramAsyncWithHttpInfo(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['publishLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->publishLoyaltyProgramRequest($loyaltyProgramId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishLoyaltyProgram'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function publishLoyaltyProgramRequest(
        $loyaltyProgramId,
        string $contentType = self::contentTypes['publishLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling publishLoyaltyProgram'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscribeMemberToASubscription
     *
     * Create subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionMemberPayload|null $createSubscriptionMemberPayload Subscription Member information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeMemberToASubscription'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CreateSubscriptionMemberResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function subscribeMemberToASubscription(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\CreateSubscriptionMemberPayload $createSubscriptionMemberPayload = null,
        string $contentType = self::contentTypes['subscribeMemberToASubscription'][0]
    ): \Brevo\Client\Models\CreateSubscriptionMemberResponse
    {
        list($response) = $this->subscribeMemberToASubscriptionWithHttpInfo($loyaltyProgramId, $createSubscriptionMemberPayload, $contentType);
        return $response;
    }

    /**
     * Operation subscribeMemberToASubscriptionWithHttpInfo
     *
     * Create subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionMemberPayload|null $createSubscriptionMemberPayload Subscription Member information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeMemberToASubscription'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CreateSubscriptionMemberResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeMemberToASubscriptionWithHttpInfo(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\CreateSubscriptionMemberPayload $createSubscriptionMemberPayload = null,
        string $contentType = self::contentTypes['subscribeMemberToASubscription'][0]
    ): array
    {
        $request = $this->subscribeMemberToASubscriptionRequest($loyaltyProgramId, $createSubscriptionMemberPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\CreateSubscriptionMemberResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CreateSubscriptionMemberResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CreateSubscriptionMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CreateSubscriptionMemberResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CreateSubscriptionMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscribeMemberToASubscriptionAsync
     *
     * Create subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionMemberPayload|null $createSubscriptionMemberPayload Subscription Member information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeMemberToASubscription'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function subscribeMemberToASubscriptionAsync(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\CreateSubscriptionMemberPayload $createSubscriptionMemberPayload = null,
        string $contentType = self::contentTypes['subscribeMemberToASubscription'][0]
    ): PromiseInterface
    {
        return $this->subscribeMemberToASubscriptionAsyncWithHttpInfo($loyaltyProgramId, $createSubscriptionMemberPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscribeMemberToASubscriptionAsyncWithHttpInfo
     *
     * Create subscription member
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionMemberPayload|null $createSubscriptionMemberPayload Subscription Member information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeMemberToASubscription'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function subscribeMemberToASubscriptionAsyncWithHttpInfo(
        $loyaltyProgramId,
        $createSubscriptionMemberPayload = null,
        string $contentType = self::contentTypes['subscribeMemberToASubscription'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CreateSubscriptionMemberResponse';
        $request = $this->subscribeMemberToASubscriptionRequest($loyaltyProgramId, $createSubscriptionMemberPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscribeMemberToASubscription'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionMemberPayload|null $createSubscriptionMemberPayload Subscription Member information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeMemberToASubscription'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subscribeMemberToASubscriptionRequest(
        $loyaltyProgramId,
        $createSubscriptionMemberPayload = null,
        string $contentType = self::contentTypes['subscribeMemberToASubscription'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling subscribeMemberToASubscription'
            );
        }



        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/subscriptions-members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createSubscriptionMemberPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createSubscriptionMemberPayload));
            } else {
                $httpBody = $createSubscriptionMemberPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscribeToLoyaltyProgram
     *
     * Create subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program ID (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload Subscription information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeToLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CreateSubscriptionResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function subscribeToLoyaltyProgram(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload,
        string $contentType = self::contentTypes['subscribeToLoyaltyProgram'][0]
    ): \Brevo\Client\Models\CreateSubscriptionResponse
    {
        list($response) = $this->subscribeToLoyaltyProgramWithHttpInfo($loyaltyProgramId, $createSubscriptionPayload, $contentType);
        return $response;
    }

    /**
     * Operation subscribeToLoyaltyProgramWithHttpInfo
     *
     * Create subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program ID (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload Subscription information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeToLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CreateSubscriptionResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeToLoyaltyProgramWithHttpInfo(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload,
        string $contentType = self::contentTypes['subscribeToLoyaltyProgram'][0]
    ): array
    {
        $request = $this->subscribeToLoyaltyProgramRequest($loyaltyProgramId, $createSubscriptionPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\CreateSubscriptionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CreateSubscriptionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CreateSubscriptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CreateSubscriptionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CreateSubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscribeToLoyaltyProgramAsync
     *
     * Create subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program ID (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload Subscription information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeToLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function subscribeToLoyaltyProgramAsync(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload,
        string $contentType = self::contentTypes['subscribeToLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->subscribeToLoyaltyProgramAsyncWithHttpInfo($loyaltyProgramId, $createSubscriptionPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscribeToLoyaltyProgramAsyncWithHttpInfo
     *
     * Create subscription
     *
     * @param  string $loyaltyProgramId Loyalty Program ID (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload Subscription information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeToLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function subscribeToLoyaltyProgramAsyncWithHttpInfo(
        $loyaltyProgramId,
        $createSubscriptionPayload,
        string $contentType = self::contentTypes['subscribeToLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CreateSubscriptionResponse';
        $request = $this->subscribeToLoyaltyProgramRequest($loyaltyProgramId, $createSubscriptionPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscribeToLoyaltyProgram'
     *
     * @param  string $loyaltyProgramId Loyalty Program ID (required)
     * @param  \Brevo\Client\Models\CreateSubscriptionPayload $createSubscriptionPayload Subscription information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeToLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subscribeToLoyaltyProgramRequest(
        $loyaltyProgramId,
        $createSubscriptionPayload,
        string $contentType = self::contentTypes['subscribeToLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling subscribeToLoyaltyProgram'
            );
        }

        // verify the required parameter 'createSubscriptionPayload' is set
        if ($createSubscriptionPayload === null || (is_array($createSubscriptionPayload) && count($createSubscriptionPayload) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $createSubscriptionPayload when calling subscribeToLoyaltyProgram'
            );
        }


        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createSubscriptionPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createSubscriptionPayload));
            } else {
                $httpBody = $createSubscriptionPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLoyaltyProgram
     *
     * Update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\UpdateLoyaltyProgramPayload|null $updateLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload
     */
    public function updateLoyaltyProgram(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\UpdateLoyaltyProgramPayload $updateLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['updateLoyaltyProgram'][0]
    ): \Brevo\Client\Models\LoyaltyProgram
    {
        list($response) = $this->updateLoyaltyProgramWithHttpInfo($loyaltyProgramId, $updateLoyaltyProgramPayload, $contentType);
        return $response;
    }

    /**
     * Operation updateLoyaltyProgramWithHttpInfo
     *
     * Update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\UpdateLoyaltyProgramPayload|null $updateLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyProgram|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLoyaltyProgramWithHttpInfo(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\UpdateLoyaltyProgramPayload $updateLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['updateLoyaltyProgram'][0]
    ): array
    {
        $request = $this->updateLoyaltyProgramRequest($loyaltyProgramId, $updateLoyaltyProgramPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\LoyaltyProgram', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyProgram';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLoyaltyProgramAsync
     *
     * Update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\UpdateLoyaltyProgramPayload|null $updateLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyProgramAsync(
        string $loyaltyProgramId,
        ?\Brevo\Client\Models\UpdateLoyaltyProgramPayload $updateLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['updateLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->updateLoyaltyProgramAsyncWithHttpInfo($loyaltyProgramId, $updateLoyaltyProgramPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLoyaltyProgramAsyncWithHttpInfo
     *
     * Update loyalty program
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\UpdateLoyaltyProgramPayload|null $updateLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyProgramAsyncWithHttpInfo(
        $loyaltyProgramId,
        $updateLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['updateLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyProgram';
        $request = $this->updateLoyaltyProgramRequest($loyaltyProgramId, $updateLoyaltyProgramPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLoyaltyProgram'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\UpdateLoyaltyProgramPayload|null $updateLoyaltyProgramPayload Loyalty Program information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLoyaltyProgramRequest(
        $loyaltyProgramId,
        $updateLoyaltyProgramPayload = null,
        string $contentType = self::contentTypes['updateLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling updateLoyaltyProgram'
            );
        }



        $resourcePath = '/loyalty/config/programs/{loyaltyProgramId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateLoyaltyProgramPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateLoyaltyProgramPayload));
            } else {
                $httpBody = $updateLoyaltyProgramPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
