<?php
/**
 * MasterAccountApi
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Brevo\Client\ApiException;
use Brevo\Client\Configuration;
use Brevo\Client\HeaderSelector;
use Brevo\Client\ObjectSerializer;

/**
 * MasterAccountApi Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MasterAccountApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'corporateGroupIdDelete' => [
            'application/json',
        ],
        'corporateGroupIdGet' => [
            'application/json',
        ],
        'corporateGroupIdPut' => [
            'application/json',
        ],
        'corporateGroupPost' => [
            'application/json',
        ],
        'corporateGroupUnlinkGroupIdSubAccountsPut' => [
            'application/json',
        ],
        'corporateIpGet' => [
            'application/json',
        ],
        'corporateMasterAccountGet' => [
            'application/json',
        ],
        'corporateSsoTokenPost' => [
            'application/json',
        ],
        'corporateSubAccountGet' => [
            'application/json',
        ],
        'corporateSubAccountIdApplicationsTogglePut' => [
            'application/json',
        ],
        'corporateSubAccountIdDelete' => [
            'application/json',
        ],
        'corporateSubAccountIdGet' => [
            'application/json',
        ],
        'corporateSubAccountIdPlanPut' => [
            'application/json',
        ],
        'corporateSubAccountIpAssociatePost' => [
            'application/json',
        ],
        'corporateSubAccountIpDissociatePut' => [
            'application/json',
        ],
        'corporateSubAccountKeyPost' => [
            'application/json',
        ],
        'corporateSubAccountPost' => [
            'application/json',
        ],
        'corporateSubAccountSsoTokenPost' => [
            'application/json',
        ],
        'corporateUserEmailPermissionsPut' => [
            'application/json',
        ],
        'corporateUserInvitationActionEmailPut' => [
            'application/json',
        ],
        'corporateUserRevokeEmailDelete' => [
            'application/json',
        ],
        'getAccountActivity_0' => [
            'application/json',
        ],
        'getCorporateInvitedUsersList' => [
            'application/json',
        ],
        'getCorporateUserPermission' => [
            'application/json',
        ],
        'getSubAccountGroups' => [
            'application/json',
        ],
        'inviteAdminUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation corporateGroupIdDelete
     *
     * Delete a group
     *
     * @param  string $id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateGroupIdDelete(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdDelete'][0]
    ): void
    {
        $this->corporateGroupIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation corporateGroupIdDeleteWithHttpInfo
     *
     * Delete a group
     *
     * @param  string $id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateGroupIdDeleteWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdDelete'][0]
    ): array
    {
        $request = $this->corporateGroupIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateGroupIdDeleteAsync
     *
     * Delete a group
     *
     * @param  string $id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdDeleteAsync(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdDelete'][0]
    ): PromiseInterface
    {
        return $this->corporateGroupIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateGroupIdDeleteAsyncWithHttpInfo
     *
     * Delete a group
     *
     * @param  string $id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdDeleteAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['corporateGroupIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateGroupIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateGroupIdDelete'
     *
     * @param  string $id Id of the group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateGroupIdDeleteRequest(
        $id,
        string $contentType = self::contentTypes['corporateGroupIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateGroupIdDelete'
            );
        }


        $resourcePath = '/corporate/group/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateGroupIdGet
     *
     * GET a group details
     *
     * @param  string $id Id of the group of sub-organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CorporateGroupDetailsResponse
     */
    public function corporateGroupIdGet(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdGet'][0]
    ): \Brevo\Client\Models\CorporateGroupDetailsResponse
    {
        list($response) = $this->corporateGroupIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation corporateGroupIdGetWithHttpInfo
     *
     * GET a group details
     *
     * @param  string $id Id of the group of sub-organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CorporateGroupDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateGroupIdGetWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdGet'][0]
    ): array
    {
        $request = $this->corporateGroupIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\CorporateGroupDetailsResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CorporateGroupDetailsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CorporateGroupDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CorporateGroupDetailsResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CorporateGroupDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateGroupIdGetAsync
     *
     * GET a group details
     *
     * @param  string $id Id of the group of sub-organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdGetAsync(
        string $id,
        string $contentType = self::contentTypes['corporateGroupIdGet'][0]
    ): PromiseInterface
    {
        return $this->corporateGroupIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateGroupIdGetAsyncWithHttpInfo
     *
     * GET a group details
     *
     * @param  string $id Id of the group of sub-organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdGetAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['corporateGroupIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CorporateGroupDetailsResponse';
        $request = $this->corporateGroupIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateGroupIdGet'
     *
     * @param  string $id Id of the group of sub-organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateGroupIdGetRequest(
        $id,
        string $contentType = self::contentTypes['corporateGroupIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateGroupIdGet'
            );
        }


        $resourcePath = '/corporate/group/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateGroupIdPut
     *
     * Update a group of sub-accounts
     *
     * @param  string $id Id of the group (required)
     * @param  \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest Group details to be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateGroupIdPut(
        string $id,
        \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest,
        string $contentType = self::contentTypes['corporateGroupIdPut'][0]
    ): void
    {
        $this->corporateGroupIdPutWithHttpInfo($id, $corporateGroupIdPutRequest, $contentType);
    }

    /**
     * Operation corporateGroupIdPutWithHttpInfo
     *
     * Update a group of sub-accounts
     *
     * @param  string $id Id of the group (required)
     * @param  \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest Group details to be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateGroupIdPutWithHttpInfo(
        string $id,
        \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest,
        string $contentType = self::contentTypes['corporateGroupIdPut'][0]
    ): array
    {
        $request = $this->corporateGroupIdPutRequest($id, $corporateGroupIdPutRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateGroupIdPutAsync
     *
     * Update a group of sub-accounts
     *
     * @param  string $id Id of the group (required)
     * @param  \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest Group details to be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdPutAsync(
        string $id,
        \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest,
        string $contentType = self::contentTypes['corporateGroupIdPut'][0]
    ): PromiseInterface
    {
        return $this->corporateGroupIdPutAsyncWithHttpInfo($id, $corporateGroupIdPutRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateGroupIdPutAsyncWithHttpInfo
     *
     * Update a group of sub-accounts
     *
     * @param  string $id Id of the group (required)
     * @param  \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest Group details to be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupIdPutAsyncWithHttpInfo(
        $id,
        $corporateGroupIdPutRequest,
        string $contentType = self::contentTypes['corporateGroupIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateGroupIdPutRequest($id, $corporateGroupIdPutRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateGroupIdPut'
     *
     * @param  string $id Id of the group (required)
     * @param  \Brevo\Client\Models\CorporateGroupIdPutRequest $corporateGroupIdPutRequest Group details to be updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateGroupIdPutRequest(
        $id,
        $corporateGroupIdPutRequest,
        string $contentType = self::contentTypes['corporateGroupIdPut'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateGroupIdPut'
            );
        }

        // verify the required parameter 'corporateGroupIdPutRequest' is set
        if ($corporateGroupIdPutRequest === null || (is_array($corporateGroupIdPutRequest) && count($corporateGroupIdPutRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $corporateGroupIdPutRequest when calling corporateGroupIdPut'
            );
        }


        $resourcePath = '/corporate/group/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateGroupIdPutRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateGroupIdPutRequest));
            } else {
                $httpBody = $corporateGroupIdPutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateGroupPost
     *
     * Create a group of sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateGroupPostRequest|null $corporateGroupPostRequest corporateGroupPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CorporateGroupPost201Response|\Brevo\Client\Models\ErrorModel
     */
    public function corporateGroupPost(
        ?\Brevo\Client\Models\CorporateGroupPostRequest $corporateGroupPostRequest = null,
        string $contentType = self::contentTypes['corporateGroupPost'][0]
    ): \Brevo\Client\Models\CorporateGroupPost201Response
    {
        list($response) = $this->corporateGroupPostWithHttpInfo($corporateGroupPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation corporateGroupPostWithHttpInfo
     *
     * Create a group of sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateGroupPostRequest|null $corporateGroupPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CorporateGroupPost201Response|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateGroupPostWithHttpInfo(
        ?\Brevo\Client\Models\CorporateGroupPostRequest $corporateGroupPostRequest = null,
        string $contentType = self::contentTypes['corporateGroupPost'][0]
    ): array
    {
        $request = $this->corporateGroupPostRequest($corporateGroupPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\CorporateGroupPost201Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CorporateGroupPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CorporateGroupPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CorporateGroupPost201Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CorporateGroupPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateGroupPostAsync
     *
     * Create a group of sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateGroupPostRequest|null $corporateGroupPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupPostAsync(
        ?\Brevo\Client\Models\CorporateGroupPostRequest $corporateGroupPostRequest = null,
        string $contentType = self::contentTypes['corporateGroupPost'][0]
    ): PromiseInterface
    {
        return $this->corporateGroupPostAsyncWithHttpInfo($corporateGroupPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateGroupPostAsyncWithHttpInfo
     *
     * Create a group of sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateGroupPostRequest|null $corporateGroupPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupPostAsyncWithHttpInfo(
        $corporateGroupPostRequest = null,
        string $contentType = self::contentTypes['corporateGroupPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CorporateGroupPost201Response';
        $request = $this->corporateGroupPostRequest($corporateGroupPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateGroupPost'
     *
     * @param  \Brevo\Client\Models\CorporateGroupPostRequest|null $corporateGroupPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateGroupPostRequest(
        $corporateGroupPostRequest = null,
        string $contentType = self::contentTypes['corporateGroupPost'][0]
    ): Request
    {



        $resourcePath = '/corporate/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateGroupPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateGroupPostRequest));
            } else {
                $httpBody = $corporateGroupPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateGroupUnlinkGroupIdSubAccountsPut
     *
     * Delete sub-account from group
     *
     * @param  string $groupId Group id (required)
     * @param  \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest List of sub-account ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateGroupUnlinkGroupIdSubAccountsPut(
        string $groupId,
        \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest,
        string $contentType = self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'][0]
    ): void
    {
        $this->corporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo($groupId, $corporateGroupUnlinkGroupIdSubAccountsPutRequest, $contentType);
    }

    /**
     * Operation corporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo
     *
     * Delete sub-account from group
     *
     * @param  string $groupId Group id (required)
     * @param  \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest List of sub-account ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo(
        string $groupId,
        \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest,
        string $contentType = self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'][0]
    ): array
    {
        $request = $this->corporateGroupUnlinkGroupIdSubAccountsPutRequest($groupId, $corporateGroupUnlinkGroupIdSubAccountsPutRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateGroupUnlinkGroupIdSubAccountsPutAsync
     *
     * Delete sub-account from group
     *
     * @param  string $groupId Group id (required)
     * @param  \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest List of sub-account ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupUnlinkGroupIdSubAccountsPutAsync(
        string $groupId,
        \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest,
        string $contentType = self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'][0]
    ): PromiseInterface
    {
        return $this->corporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo($groupId, $corporateGroupUnlinkGroupIdSubAccountsPutRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo
     *
     * Delete sub-account from group
     *
     * @param  string $groupId Group id (required)
     * @param  \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest List of sub-account ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo(
        $groupId,
        $corporateGroupUnlinkGroupIdSubAccountsPutRequest,
        string $contentType = self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateGroupUnlinkGroupIdSubAccountsPutRequest($groupId, $corporateGroupUnlinkGroupIdSubAccountsPutRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateGroupUnlinkGroupIdSubAccountsPut'
     *
     * @param  string $groupId Group id (required)
     * @param  \Brevo\Client\Models\CorporateGroupUnlinkGroupIdSubAccountsPutRequest $corporateGroupUnlinkGroupIdSubAccountsPutRequest List of sub-account ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateGroupUnlinkGroupIdSubAccountsPutRequest(
        $groupId,
        $corporateGroupUnlinkGroupIdSubAccountsPutRequest,
        string $contentType = self::contentTypes['corporateGroupUnlinkGroupIdSubAccountsPut'][0]
    ): Request
    {

        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $groupId when calling corporateGroupUnlinkGroupIdSubAccountsPut'
            );
        }

        // verify the required parameter 'corporateGroupUnlinkGroupIdSubAccountsPutRequest' is set
        if ($corporateGroupUnlinkGroupIdSubAccountsPutRequest === null || (is_array($corporateGroupUnlinkGroupIdSubAccountsPutRequest) && count($corporateGroupUnlinkGroupIdSubAccountsPutRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $corporateGroupUnlinkGroupIdSubAccountsPutRequest when calling corporateGroupUnlinkGroupIdSubAccountsPut'
            );
        }


        $resourcePath = '/corporate/group/unlink/{groupId}/subAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateGroupUnlinkGroupIdSubAccountsPutRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateGroupUnlinkGroupIdSubAccountsPutRequest));
            } else {
                $httpBody = $corporateGroupUnlinkGroupIdSubAccountsPutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateIpGet
     *
     * List of all IPs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateIpGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CorporateIpGet200ResponseInner[]
     */
    public function corporateIpGet(
        string $contentType = self::contentTypes['corporateIpGet'][0]
    ): array
    {
        list($response) = $this->corporateIpGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation corporateIpGetWithHttpInfo
     *
     * List of all IPs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateIpGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CorporateIpGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateIpGetWithHttpInfo(
        string $contentType = self::contentTypes['corporateIpGet'][0]
    ): array
    {
        $request = $this->corporateIpGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\CorporateIpGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CorporateIpGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CorporateIpGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CorporateIpGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CorporateIpGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateIpGetAsync
     *
     * List of all IPs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateIpGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateIpGetAsync(
        string $contentType = self::contentTypes['corporateIpGet'][0]
    ): PromiseInterface
    {
        return $this->corporateIpGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateIpGetAsyncWithHttpInfo
     *
     * List of all IPs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateIpGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateIpGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['corporateIpGet'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CorporateIpGet200ResponseInner[]';
        $request = $this->corporateIpGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateIpGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateIpGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateIpGetRequest(
        string $contentType = self::contentTypes['corporateIpGet'][0]
    ): Request
    {


        $resourcePath = '/corporate/ip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateMasterAccountGet
     *
     * Get the details of requested master account
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateMasterAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\MasterDetailsResponse|\Brevo\Client\Models\ErrorModel
     */
    public function corporateMasterAccountGet(
        string $contentType = self::contentTypes['corporateMasterAccountGet'][0]
    ): \Brevo\Client\Models\MasterDetailsResponse
    {
        list($response) = $this->corporateMasterAccountGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation corporateMasterAccountGetWithHttpInfo
     *
     * Get the details of requested master account
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateMasterAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\MasterDetailsResponse|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateMasterAccountGetWithHttpInfo(
        string $contentType = self::contentTypes['corporateMasterAccountGet'][0]
    ): array
    {
        $request = $this->corporateMasterAccountGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\MasterDetailsResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\MasterDetailsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\MasterDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\MasterDetailsResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\MasterDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateMasterAccountGetAsync
     *
     * Get the details of requested master account
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateMasterAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateMasterAccountGetAsync(
        string $contentType = self::contentTypes['corporateMasterAccountGet'][0]
    ): PromiseInterface
    {
        return $this->corporateMasterAccountGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateMasterAccountGetAsyncWithHttpInfo
     *
     * Get the details of requested master account
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateMasterAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateMasterAccountGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['corporateMasterAccountGet'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\MasterDetailsResponse';
        $request = $this->corporateMasterAccountGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateMasterAccountGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateMasterAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateMasterAccountGetRequest(
        string $contentType = self::contentTypes['corporateMasterAccountGet'][0]
    ): Request
    {


        $resourcePath = '/corporate/masterAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSsoTokenPost
     *
     * Generate SSO token to access admin account
     *
     * @param  \Brevo\Client\Models\CorporateSsoTokenPostRequest|null $corporateSsoTokenPostRequest corporateSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetSsoToken|\Brevo\Client\Models\ErrorModel|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSsoTokenPost(
        ?\Brevo\Client\Models\CorporateSsoTokenPostRequest $corporateSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSsoTokenPost'][0]
    ): \Brevo\Client\Models\GetSsoToken
    {
        list($response) = $this->corporateSsoTokenPostWithHttpInfo($corporateSsoTokenPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation corporateSsoTokenPostWithHttpInfo
     *
     * Generate SSO token to access admin account
     *
     * @param  \Brevo\Client\Models\CorporateSsoTokenPostRequest|null $corporateSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetSsoToken|\Brevo\Client\Models\ErrorModel|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSsoTokenPostWithHttpInfo(
        ?\Brevo\Client\Models\CorporateSsoTokenPostRequest $corporateSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSsoTokenPost'][0]
    ): array
    {
        $request = $this->corporateSsoTokenPostRequest($corporateSsoTokenPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetSsoToken', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetSsoToken' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetSsoToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetSsoToken';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetSsoToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSsoTokenPostAsync
     *
     * Generate SSO token to access admin account
     *
     * @param  \Brevo\Client\Models\CorporateSsoTokenPostRequest|null $corporateSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSsoTokenPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSsoTokenPostAsync(
        ?\Brevo\Client\Models\CorporateSsoTokenPostRequest $corporateSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSsoTokenPost'][0]
    ): PromiseInterface
    {
        return $this->corporateSsoTokenPostAsyncWithHttpInfo($corporateSsoTokenPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSsoTokenPostAsyncWithHttpInfo
     *
     * Generate SSO token to access admin account
     *
     * @param  \Brevo\Client\Models\CorporateSsoTokenPostRequest|null $corporateSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSsoTokenPostAsyncWithHttpInfo(
        $corporateSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSsoTokenPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetSsoToken';
        $request = $this->corporateSsoTokenPostRequest($corporateSsoTokenPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSsoTokenPost'
     *
     * @param  \Brevo\Client\Models\CorporateSsoTokenPostRequest|null $corporateSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSsoTokenPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSsoTokenPostRequest(
        $corporateSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSsoTokenPost'][0]
    ): Request
    {



        $resourcePath = '/corporate/ssoToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateSsoTokenPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateSsoTokenPostRequest));
            } else {
                $httpBody = $corporateSsoTokenPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountGet
     *
     * Get the list of all the sub-accounts of the master account.
     *
     * @param  int $offset Index of the first sub-account in the page (required)
     * @param  int $limit Number of sub-accounts to be displayed on each page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\SubAccountsResponse|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountGet(
        int $offset,
        int $limit,
        string $contentType = self::contentTypes['corporateSubAccountGet'][0]
    ): \Brevo\Client\Models\SubAccountsResponse
    {
        list($response) = $this->corporateSubAccountGetWithHttpInfo($offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountGetWithHttpInfo
     *
     * Get the list of all the sub-accounts of the master account.
     *
     * @param  int $offset Index of the first sub-account in the page (required)
     * @param  int $limit Number of sub-accounts to be displayed on each page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\SubAccountsResponse|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountGetWithHttpInfo(
        int $offset,
        int $limit,
        string $contentType = self::contentTypes['corporateSubAccountGet'][0]
    ): array
    {
        $request = $this->corporateSubAccountGetRequest($offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\SubAccountsResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\SubAccountsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\SubAccountsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\SubAccountsResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\SubAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountGetAsync
     *
     * Get the list of all the sub-accounts of the master account.
     *
     * @param  int $offset Index of the first sub-account in the page (required)
     * @param  int $limit Number of sub-accounts to be displayed on each page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountGetAsync(
        int $offset,
        int $limit,
        string $contentType = self::contentTypes['corporateSubAccountGet'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountGetAsyncWithHttpInfo($offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountGetAsyncWithHttpInfo
     *
     * Get the list of all the sub-accounts of the master account.
     *
     * @param  int $offset Index of the first sub-account in the page (required)
     * @param  int $limit Number of sub-accounts to be displayed on each page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountGetAsyncWithHttpInfo(
        $offset,
        $limit,
        string $contentType = self::contentTypes['corporateSubAccountGet'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\SubAccountsResponse';
        $request = $this->corporateSubAccountGetRequest($offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountGet'
     *
     * @param  int $offset Index of the first sub-account in the page (required)
     * @param  int $limit Number of sub-accounts to be displayed on each page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountGetRequest(
        $offset,
        $limit,
        string $contentType = self::contentTypes['corporateSubAccountGet'][0]
    ): Request
    {

        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $offset when calling corporateSubAccountGet'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $limit when calling corporateSubAccountGet'
            );
        }


        $resourcePath = '/corporate/subAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIdApplicationsTogglePut
     *
     * Enable/disable sub-account application(s)
     *
     * @param  int $id Id of the sub-account organization (mandatory) (required)
     * @param  \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest List of applications to activate or deactivate on a sub-account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdApplicationsTogglePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateSubAccountIdApplicationsTogglePut(
        int $id,
        \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdApplicationsTogglePut'][0]
    ): void
    {
        $this->corporateSubAccountIdApplicationsTogglePutWithHttpInfo($id, $subAccountAppsToggleRequest, $contentType);
    }

    /**
     * Operation corporateSubAccountIdApplicationsTogglePutWithHttpInfo
     *
     * Enable/disable sub-account application(s)
     *
     * @param  int $id Id of the sub-account organization (mandatory) (required)
     * @param  \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest List of applications to activate or deactivate on a sub-account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdApplicationsTogglePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIdApplicationsTogglePutWithHttpInfo(
        int $id,
        \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdApplicationsTogglePut'][0]
    ): array
    {
        $request = $this->corporateSubAccountIdApplicationsTogglePutRequest($id, $subAccountAppsToggleRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIdApplicationsTogglePutAsync
     *
     * Enable/disable sub-account application(s)
     *
     * @param  int $id Id of the sub-account organization (mandatory) (required)
     * @param  \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest List of applications to activate or deactivate on a sub-account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdApplicationsTogglePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdApplicationsTogglePutAsync(
        int $id,
        \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdApplicationsTogglePut'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo($id, $subAccountAppsToggleRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo
     *
     * Enable/disable sub-account application(s)
     *
     * @param  int $id Id of the sub-account organization (mandatory) (required)
     * @param  \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest List of applications to activate or deactivate on a sub-account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdApplicationsTogglePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo(
        $id,
        $subAccountAppsToggleRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdApplicationsTogglePut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateSubAccountIdApplicationsTogglePutRequest($id, $subAccountAppsToggleRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIdApplicationsTogglePut'
     *
     * @param  int $id Id of the sub-account organization (mandatory) (required)
     * @param  \Brevo\Client\Models\SubAccountAppsToggleRequest $subAccountAppsToggleRequest List of applications to activate or deactivate on a sub-account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdApplicationsTogglePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIdApplicationsTogglePutRequest(
        $id,
        $subAccountAppsToggleRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdApplicationsTogglePut'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateSubAccountIdApplicationsTogglePut'
            );
        }

        // verify the required parameter 'subAccountAppsToggleRequest' is set
        if ($subAccountAppsToggleRequest === null || (is_array($subAccountAppsToggleRequest) && count($subAccountAppsToggleRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $subAccountAppsToggleRequest when calling corporateSubAccountIdApplicationsTogglePut'
            );
        }


        $resourcePath = '/corporate/subAccount/{id}/applications/toggle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subAccountAppsToggleRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subAccountAppsToggleRequest));
            } else {
                $httpBody = $subAccountAppsToggleRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIdDelete
     *
     * Delete a sub-account
     *
     * @param  int $id Id of the sub-account organization to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateSubAccountIdDelete(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdDelete'][0]
    ): void
    {
        $this->corporateSubAccountIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation corporateSubAccountIdDeleteWithHttpInfo
     *
     * Delete a sub-account
     *
     * @param  int $id Id of the sub-account organization to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIdDeleteWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdDelete'][0]
    ): array
    {
        $request = $this->corporateSubAccountIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIdDeleteAsync
     *
     * Delete a sub-account
     *
     * @param  int $id Id of the sub-account organization to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdDeleteAsync(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdDelete'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIdDeleteAsyncWithHttpInfo
     *
     * Delete a sub-account
     *
     * @param  int $id Id of the sub-account organization to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdDeleteAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['corporateSubAccountIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateSubAccountIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIdDelete'
     *
     * @param  int $id Id of the sub-account organization to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIdDeleteRequest(
        $id,
        string $contentType = self::contentTypes['corporateSubAccountIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateSubAccountIdDelete'
            );
        }


        $resourcePath = '/corporate/subAccount/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIdGet
     *
     * Get sub-account details
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\SubAccountDetailsResponse|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountIdGet(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdGet'][0]
    ): \Brevo\Client\Models\SubAccountDetailsResponse
    {
        list($response) = $this->corporateSubAccountIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountIdGetWithHttpInfo
     *
     * Get sub-account details
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\SubAccountDetailsResponse|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIdGetWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdGet'][0]
    ): array
    {
        $request = $this->corporateSubAccountIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\SubAccountDetailsResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\SubAccountDetailsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\SubAccountDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\SubAccountDetailsResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\SubAccountDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIdGetAsync
     *
     * Get sub-account details
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdGetAsync(
        int $id,
        string $contentType = self::contentTypes['corporateSubAccountIdGet'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIdGetAsyncWithHttpInfo
     *
     * Get sub-account details
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdGetAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['corporateSubAccountIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\SubAccountDetailsResponse';
        $request = $this->corporateSubAccountIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIdGet'
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIdGetRequest(
        $id,
        string $contentType = self::contentTypes['corporateSubAccountIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateSubAccountIdGet'
            );
        }


        $resourcePath = '/corporate/subAccount/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIdPlanPut
     *
     * Update sub-account plan
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest Values to update a sub-account plan (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdPlanPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateSubAccountIdPlanPut(
        int $id,
        \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdPlanPut'][0]
    ): void
    {
        $this->corporateSubAccountIdPlanPutWithHttpInfo($id, $subAccountUpdatePlanRequest, $contentType);
    }

    /**
     * Operation corporateSubAccountIdPlanPutWithHttpInfo
     *
     * Update sub-account plan
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest Values to update a sub-account plan (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdPlanPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIdPlanPutWithHttpInfo(
        int $id,
        \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdPlanPut'][0]
    ): array
    {
        $request = $this->corporateSubAccountIdPlanPutRequest($id, $subAccountUpdatePlanRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIdPlanPutAsync
     *
     * Update sub-account plan
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest Values to update a sub-account plan (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdPlanPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdPlanPutAsync(
        int $id,
        \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdPlanPut'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIdPlanPutAsyncWithHttpInfo($id, $subAccountUpdatePlanRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIdPlanPutAsyncWithHttpInfo
     *
     * Update sub-account plan
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest Values to update a sub-account plan (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdPlanPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIdPlanPutAsyncWithHttpInfo(
        $id,
        $subAccountUpdatePlanRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdPlanPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateSubAccountIdPlanPutRequest($id, $subAccountUpdatePlanRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIdPlanPut'
     *
     * @param  int $id Id of the sub-account organization (required)
     * @param  \Brevo\Client\Models\SubAccountUpdatePlanRequest $subAccountUpdatePlanRequest Values to update a sub-account plan (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIdPlanPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIdPlanPutRequest(
        $id,
        $subAccountUpdatePlanRequest,
        string $contentType = self::contentTypes['corporateSubAccountIdPlanPut'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling corporateSubAccountIdPlanPut'
            );
        }

        // verify the required parameter 'subAccountUpdatePlanRequest' is set
        if ($subAccountUpdatePlanRequest === null || (is_array($subAccountUpdatePlanRequest) && count($subAccountUpdatePlanRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $subAccountUpdatePlanRequest when calling corporateSubAccountIdPlanPut'
            );
        }


        $resourcePath = '/corporate/subAccount/{id}/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subAccountUpdatePlanRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subAccountUpdatePlanRequest));
            } else {
                $httpBody = $subAccountUpdatePlanRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIpAssociatePost
     *
     * Associate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest|null $corporateSubAccountIpAssociatePostRequest corporateSubAccountIpAssociatePostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpAssociatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return object|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountIpAssociatePost(
        ?\Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest $corporateSubAccountIpAssociatePostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpAssociatePost'][0]
    ): object
    {
        list($response) = $this->corporateSubAccountIpAssociatePostWithHttpInfo($corporateSubAccountIpAssociatePostRequest, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountIpAssociatePostWithHttpInfo
     *
     * Associate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest|null $corporateSubAccountIpAssociatePostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpAssociatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of object|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIpAssociatePostWithHttpInfo(
        ?\Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest $corporateSubAccountIpAssociatePostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpAssociatePost'][0]
    ): array
    {
        $request = $this->corporateSubAccountIpAssociatePostRequest($corporateSubAccountIpAssociatePostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('object', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIpAssociatePostAsync
     *
     * Associate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest|null $corporateSubAccountIpAssociatePostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpAssociatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIpAssociatePostAsync(
        ?\Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest $corporateSubAccountIpAssociatePostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpAssociatePost'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIpAssociatePostAsyncWithHttpInfo($corporateSubAccountIpAssociatePostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIpAssociatePostAsyncWithHttpInfo
     *
     * Associate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest|null $corporateSubAccountIpAssociatePostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpAssociatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIpAssociatePostAsyncWithHttpInfo(
        $corporateSubAccountIpAssociatePostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpAssociatePost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->corporateSubAccountIpAssociatePostRequest($corporateSubAccountIpAssociatePostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIpAssociatePost'
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpAssociatePostRequest|null $corporateSubAccountIpAssociatePostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpAssociatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIpAssociatePostRequest(
        $corporateSubAccountIpAssociatePostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpAssociatePost'][0]
    ): Request
    {



        $resourcePath = '/corporate/subAccount/ip/associate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateSubAccountIpAssociatePostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateSubAccountIpAssociatePostRequest));
            } else {
                $httpBody = $corporateSubAccountIpAssociatePostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountIpDissociatePut
     *
     * Dissociate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest|null $corporateSubAccountIpDissociatePutRequest corporateSubAccountIpDissociatePutRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpDissociatePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateSubAccountIpDissociatePut(
        ?\Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest $corporateSubAccountIpDissociatePutRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpDissociatePut'][0]
    ): void
    {
        $this->corporateSubAccountIpDissociatePutWithHttpInfo($corporateSubAccountIpDissociatePutRequest, $contentType);
    }

    /**
     * Operation corporateSubAccountIpDissociatePutWithHttpInfo
     *
     * Dissociate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest|null $corporateSubAccountIpDissociatePutRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpDissociatePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountIpDissociatePutWithHttpInfo(
        ?\Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest $corporateSubAccountIpDissociatePutRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpDissociatePut'][0]
    ): array
    {
        $request = $this->corporateSubAccountIpDissociatePutRequest($corporateSubAccountIpDissociatePutRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountIpDissociatePutAsync
     *
     * Dissociate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest|null $corporateSubAccountIpDissociatePutRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpDissociatePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIpDissociatePutAsync(
        ?\Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest $corporateSubAccountIpDissociatePutRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpDissociatePut'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountIpDissociatePutAsyncWithHttpInfo($corporateSubAccountIpDissociatePutRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountIpDissociatePutAsyncWithHttpInfo
     *
     * Dissociate an IP to sub-accounts
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest|null $corporateSubAccountIpDissociatePutRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpDissociatePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountIpDissociatePutAsyncWithHttpInfo(
        $corporateSubAccountIpDissociatePutRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpDissociatePut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateSubAccountIpDissociatePutRequest($corporateSubAccountIpDissociatePutRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountIpDissociatePut'
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountIpDissociatePutRequest|null $corporateSubAccountIpDissociatePutRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountIpDissociatePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountIpDissociatePutRequest(
        $corporateSubAccountIpDissociatePutRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountIpDissociatePut'][0]
    ): Request
    {



        $resourcePath = '/corporate/subAccount/ip/dissociate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateSubAccountIpDissociatePutRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateSubAccountIpDissociatePutRequest));
            } else {
                $httpBody = $corporateSubAccountIpDissociatePutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountKeyPost
     *
     * Create an API key for a sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountKeyPostRequest|null $corporateSubAccountKeyPostRequest corporateSubAccountKeyPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CreateApiKeyResponse|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountKeyPost(
        ?\Brevo\Client\Models\CorporateSubAccountKeyPostRequest $corporateSubAccountKeyPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountKeyPost'][0]
    ): \Brevo\Client\Models\CreateApiKeyResponse
    {
        list($response) = $this->corporateSubAccountKeyPostWithHttpInfo($corporateSubAccountKeyPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountKeyPostWithHttpInfo
     *
     * Create an API key for a sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountKeyPostRequest|null $corporateSubAccountKeyPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CreateApiKeyResponse|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountKeyPostWithHttpInfo(
        ?\Brevo\Client\Models\CorporateSubAccountKeyPostRequest $corporateSubAccountKeyPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountKeyPost'][0]
    ): array
    {
        $request = $this->corporateSubAccountKeyPostRequest($corporateSubAccountKeyPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\CreateApiKeyResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CreateApiKeyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CreateApiKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CreateApiKeyResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CreateApiKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountKeyPostAsync
     *
     * Create an API key for a sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountKeyPostRequest|null $corporateSubAccountKeyPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountKeyPostAsync(
        ?\Brevo\Client\Models\CorporateSubAccountKeyPostRequest $corporateSubAccountKeyPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountKeyPost'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountKeyPostAsyncWithHttpInfo($corporateSubAccountKeyPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountKeyPostAsyncWithHttpInfo
     *
     * Create an API key for a sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountKeyPostRequest|null $corporateSubAccountKeyPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountKeyPostAsyncWithHttpInfo(
        $corporateSubAccountKeyPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountKeyPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CreateApiKeyResponse';
        $request = $this->corporateSubAccountKeyPostRequest($corporateSubAccountKeyPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountKeyPost'
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountKeyPostRequest|null $corporateSubAccountKeyPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountKeyPostRequest(
        $corporateSubAccountKeyPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountKeyPost'][0]
    ): Request
    {



        $resourcePath = '/corporate/subAccount/key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateSubAccountKeyPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateSubAccountKeyPostRequest));
            } else {
                $httpBody = $corporateSubAccountKeyPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountPost
     *
     * Create a new sub-account under a master account.
     *
     * @param  \Brevo\Client\Models\CreateSubAccount $createSubAccount Request body with sub-account organization name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CreateSubAccountResponse|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountPost(
        \Brevo\Client\Models\CreateSubAccount $createSubAccount,
        string $contentType = self::contentTypes['corporateSubAccountPost'][0]
    ): \Brevo\Client\Models\CreateSubAccountResponse
    {
        list($response) = $this->corporateSubAccountPostWithHttpInfo($createSubAccount, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountPostWithHttpInfo
     *
     * Create a new sub-account under a master account.
     *
     * @param  \Brevo\Client\Models\CreateSubAccount $createSubAccount Request body with sub-account organization name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CreateSubAccountResponse|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountPostWithHttpInfo(
        \Brevo\Client\Models\CreateSubAccount $createSubAccount,
        string $contentType = self::contentTypes['corporateSubAccountPost'][0]
    ): array
    {
        $request = $this->corporateSubAccountPostRequest($createSubAccount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\CreateSubAccountResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CreateSubAccountResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CreateSubAccountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CreateSubAccountResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CreateSubAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountPostAsync
     *
     * Create a new sub-account under a master account.
     *
     * @param  \Brevo\Client\Models\CreateSubAccount $createSubAccount Request body with sub-account organization name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountPostAsync(
        \Brevo\Client\Models\CreateSubAccount $createSubAccount,
        string $contentType = self::contentTypes['corporateSubAccountPost'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountPostAsyncWithHttpInfo($createSubAccount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountPostAsyncWithHttpInfo
     *
     * Create a new sub-account under a master account.
     *
     * @param  \Brevo\Client\Models\CreateSubAccount $createSubAccount Request body with sub-account organization name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountPostAsyncWithHttpInfo(
        $createSubAccount,
        string $contentType = self::contentTypes['corporateSubAccountPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CreateSubAccountResponse';
        $request = $this->corporateSubAccountPostRequest($createSubAccount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountPost'
     *
     * @param  \Brevo\Client\Models\CreateSubAccount $createSubAccount Request body with sub-account organization name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountPostRequest(
        $createSubAccount,
        string $contentType = self::contentTypes['corporateSubAccountPost'][0]
    ): Request
    {

        // verify the required parameter 'createSubAccount' is set
        if ($createSubAccount === null || (is_array($createSubAccount) && count($createSubAccount) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $createSubAccount when calling corporateSubAccountPost'
            );
        }


        $resourcePath = '/corporate/subAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createSubAccount)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createSubAccount));
            } else {
                $httpBody = $createSubAccount;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateSubAccountSsoTokenPost
     *
     * Generate SSO token to access sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest|null $corporateSubAccountSsoTokenPostRequest corporateSubAccountSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetSsoToken|\Brevo\Client\Models\ErrorModel|\Brevo\Client\Models\ErrorModel
     */
    public function corporateSubAccountSsoTokenPost(
        ?\Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest $corporateSubAccountSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountSsoTokenPost'][0]
    ): \Brevo\Client\Models\GetSsoToken
    {
        list($response) = $this->corporateSubAccountSsoTokenPostWithHttpInfo($corporateSubAccountSsoTokenPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation corporateSubAccountSsoTokenPostWithHttpInfo
     *
     * Generate SSO token to access sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest|null $corporateSubAccountSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetSsoToken|\Brevo\Client\Models\ErrorModel|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateSubAccountSsoTokenPostWithHttpInfo(
        ?\Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest $corporateSubAccountSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountSsoTokenPost'][0]
    ): array
    {
        $request = $this->corporateSubAccountSsoTokenPostRequest($corporateSubAccountSsoTokenPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetSsoToken', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetSsoToken' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetSsoToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetSsoToken';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetSsoToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateSubAccountSsoTokenPostAsync
     *
     * Generate SSO token to access sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest|null $corporateSubAccountSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountSsoTokenPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountSsoTokenPostAsync(
        ?\Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest $corporateSubAccountSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountSsoTokenPost'][0]
    ): PromiseInterface
    {
        return $this->corporateSubAccountSsoTokenPostAsyncWithHttpInfo($corporateSubAccountSsoTokenPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateSubAccountSsoTokenPostAsyncWithHttpInfo
     *
     * Generate SSO token to access sub-account
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest|null $corporateSubAccountSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountSsoTokenPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateSubAccountSsoTokenPostAsyncWithHttpInfo(
        $corporateSubAccountSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountSsoTokenPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetSsoToken';
        $request = $this->corporateSubAccountSsoTokenPostRequest($corporateSubAccountSsoTokenPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateSubAccountSsoTokenPost'
     *
     * @param  \Brevo\Client\Models\CorporateSubAccountSsoTokenPostRequest|null $corporateSubAccountSsoTokenPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateSubAccountSsoTokenPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateSubAccountSsoTokenPostRequest(
        $corporateSubAccountSsoTokenPostRequest = null,
        string $contentType = self::contentTypes['corporateSubAccountSsoTokenPost'][0]
    ): Request
    {



        $resourcePath = '/corporate/subAccount/ssoToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateSubAccountSsoTokenPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateSubAccountSsoTokenPostRequest));
            } else {
                $httpBody = $corporateSubAccountSsoTokenPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateUserEmailPermissionsPut
     *
     * Change admin user permissions
     *
     * @param  string $email Email address of Admin user (required)
     * @param  \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest Values to update an admin user permissions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserEmailPermissionsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateUserEmailPermissionsPut(
        string $email,
        \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest,
        string $contentType = self::contentTypes['corporateUserEmailPermissionsPut'][0]
    ): void
    {
        $this->corporateUserEmailPermissionsPutWithHttpInfo($email, $corporateUserEmailPermissionsPutRequest, $contentType);
    }

    /**
     * Operation corporateUserEmailPermissionsPutWithHttpInfo
     *
     * Change admin user permissions
     *
     * @param  string $email Email address of Admin user (required)
     * @param  \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest Values to update an admin user permissions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserEmailPermissionsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateUserEmailPermissionsPutWithHttpInfo(
        string $email,
        \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest,
        string $contentType = self::contentTypes['corporateUserEmailPermissionsPut'][0]
    ): array
    {
        $request = $this->corporateUserEmailPermissionsPutRequest($email, $corporateUserEmailPermissionsPutRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateUserEmailPermissionsPutAsync
     *
     * Change admin user permissions
     *
     * @param  string $email Email address of Admin user (required)
     * @param  \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest Values to update an admin user permissions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserEmailPermissionsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserEmailPermissionsPutAsync(
        string $email,
        \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest,
        string $contentType = self::contentTypes['corporateUserEmailPermissionsPut'][0]
    ): PromiseInterface
    {
        return $this->corporateUserEmailPermissionsPutAsyncWithHttpInfo($email, $corporateUserEmailPermissionsPutRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateUserEmailPermissionsPutAsyncWithHttpInfo
     *
     * Change admin user permissions
     *
     * @param  string $email Email address of Admin user (required)
     * @param  \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest Values to update an admin user permissions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserEmailPermissionsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserEmailPermissionsPutAsyncWithHttpInfo(
        $email,
        $corporateUserEmailPermissionsPutRequest,
        string $contentType = self::contentTypes['corporateUserEmailPermissionsPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateUserEmailPermissionsPutRequest($email, $corporateUserEmailPermissionsPutRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateUserEmailPermissionsPut'
     *
     * @param  string $email Email address of Admin user (required)
     * @param  \Brevo\Client\Models\CorporateUserEmailPermissionsPutRequest $corporateUserEmailPermissionsPutRequest Values to update an admin user permissions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserEmailPermissionsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateUserEmailPermissionsPutRequest(
        $email,
        $corporateUserEmailPermissionsPutRequest,
        string $contentType = self::contentTypes['corporateUserEmailPermissionsPut'][0]
    ): Request
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $email when calling corporateUserEmailPermissionsPut'
            );
        }

        // verify the required parameter 'corporateUserEmailPermissionsPutRequest' is set
        if ($corporateUserEmailPermissionsPutRequest === null || (is_array($corporateUserEmailPermissionsPutRequest) && count($corporateUserEmailPermissionsPutRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $corporateUserEmailPermissionsPutRequest when calling corporateUserEmailPermissionsPut'
            );
        }


        $resourcePath = '/corporate/user/{email}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporateUserEmailPermissionsPutRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporateUserEmailPermissionsPutRequest));
            } else {
                $httpBody = $corporateUserEmailPermissionsPutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateUserInvitationActionEmailPut
     *
     * Resend / cancel admin user invitation
     *
     * @param  string $action Action to be performed (cancel / resend) (required)
     * @param  string $email Email address of the recipient (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserInvitationActionEmailPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response|\Brevo\Client\Models\ErrorModel
     */
    public function corporateUserInvitationActionEmailPut(
        string $action,
        string $email,
        string $contentType = self::contentTypes['corporateUserInvitationActionEmailPut'][0]
    ): \Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response
    {
        list($response) = $this->corporateUserInvitationActionEmailPutWithHttpInfo($action, $email, $contentType);
        return $response;
    }

    /**
     * Operation corporateUserInvitationActionEmailPutWithHttpInfo
     *
     * Resend / cancel admin user invitation
     *
     * @param  string $action Action to be performed (cancel / resend) (required)
     * @param  string $email Email address of the recipient (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserInvitationActionEmailPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateUserInvitationActionEmailPutWithHttpInfo(
        string $action,
        string $email,
        string $contentType = self::contentTypes['corporateUserInvitationActionEmailPut'][0]
    ): array
    {
        $request = $this->corporateUserInvitationActionEmailPutRequest($action, $email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateUserInvitationActionEmailPutAsync
     *
     * Resend / cancel admin user invitation
     *
     * @param  string $action Action to be performed (cancel / resend) (required)
     * @param  string $email Email address of the recipient (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserInvitationActionEmailPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserInvitationActionEmailPutAsync(
        string $action,
        string $email,
        string $contentType = self::contentTypes['corporateUserInvitationActionEmailPut'][0]
    ): PromiseInterface
    {
        return $this->corporateUserInvitationActionEmailPutAsyncWithHttpInfo($action, $email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateUserInvitationActionEmailPutAsyncWithHttpInfo
     *
     * Resend / cancel admin user invitation
     *
     * @param  string $action Action to be performed (cancel / resend) (required)
     * @param  string $email Email address of the recipient (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserInvitationActionEmailPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserInvitationActionEmailPutAsyncWithHttpInfo(
        $action,
        $email,
        string $contentType = self::contentTypes['corporateUserInvitationActionEmailPut'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CorporateUserInvitationActionEmailPut200Response';
        $request = $this->corporateUserInvitationActionEmailPutRequest($action, $email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateUserInvitationActionEmailPut'
     *
     * @param  string $action Action to be performed (cancel / resend) (required)
     * @param  string $email Email address of the recipient (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserInvitationActionEmailPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateUserInvitationActionEmailPutRequest(
        $action,
        $email,
        string $contentType = self::contentTypes['corporateUserInvitationActionEmailPut'][0]
    ): Request
    {

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $action when calling corporateUserInvitationActionEmailPut'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $email when calling corporateUserInvitationActionEmailPut'
            );
        }


        $resourcePath = '/corporate/user/invitation/{action}/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }
        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation corporateUserRevokeEmailDelete
     *
     * Revoke an admin user
     *
     * @param  string $email Email of the invited user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserRevokeEmailDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function corporateUserRevokeEmailDelete(
        string $email,
        string $contentType = self::contentTypes['corporateUserRevokeEmailDelete'][0]
    ): void
    {
        $this->corporateUserRevokeEmailDeleteWithHttpInfo($email, $contentType);
    }

    /**
     * Operation corporateUserRevokeEmailDeleteWithHttpInfo
     *
     * Revoke an admin user
     *
     * @param  string $email Email of the invited user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserRevokeEmailDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function corporateUserRevokeEmailDeleteWithHttpInfo(
        string $email,
        string $contentType = self::contentTypes['corporateUserRevokeEmailDelete'][0]
    ): array
    {
        $request = $this->corporateUserRevokeEmailDeleteRequest($email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation corporateUserRevokeEmailDeleteAsync
     *
     * Revoke an admin user
     *
     * @param  string $email Email of the invited user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserRevokeEmailDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserRevokeEmailDeleteAsync(
        string $email,
        string $contentType = self::contentTypes['corporateUserRevokeEmailDelete'][0]
    ): PromiseInterface
    {
        return $this->corporateUserRevokeEmailDeleteAsyncWithHttpInfo($email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation corporateUserRevokeEmailDeleteAsyncWithHttpInfo
     *
     * Revoke an admin user
     *
     * @param  string $email Email of the invited user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserRevokeEmailDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function corporateUserRevokeEmailDeleteAsyncWithHttpInfo(
        $email,
        string $contentType = self::contentTypes['corporateUserRevokeEmailDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->corporateUserRevokeEmailDeleteRequest($email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'corporateUserRevokeEmailDelete'
     *
     * @param  string $email Email of the invited user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['corporateUserRevokeEmailDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function corporateUserRevokeEmailDeleteRequest(
        $email,
        string $contentType = self::contentTypes['corporateUserRevokeEmailDelete'][0]
    ): Request
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $email when calling corporateUserRevokeEmailDelete'
            );
        }


        $resourcePath = '/corporate/user/revoke/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountActivity_0
     *
     * Get user activity logs
     *
     * @param  string|null $startDate Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)
     * @param  string|null $endDate Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)
     * @param  int|null $limit Number of documents per page (optional, default to 10)
     * @param  int|null $offset Index of the first document in the page. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountActivity_0'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetAccountActivity|\Brevo\Client\Models\ErrorModel
     */
    public function getAccountActivity_0(
        ?string $startDate = null,
        ?string $endDate = null,
        ?int $limit = 10,
        ?int $offset = 0,
        string $contentType = self::contentTypes['getAccountActivity_0'][0]
    ): \Brevo\Client\Models\GetAccountActivity
    {
        list($response) = $this->getAccountActivity_0WithHttpInfo($startDate, $endDate, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAccountActivity_0WithHttpInfo
     *
     * Get user activity logs
     *
     * @param  string|null $startDate Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)
     * @param  string|null $endDate Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)
     * @param  int|null $limit Number of documents per page (optional, default to 10)
     * @param  int|null $offset Index of the first document in the page. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountActivity_0'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetAccountActivity|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountActivity_0WithHttpInfo(
        ?string $startDate = null,
        ?string $endDate = null,
        ?int $limit = 10,
        ?int $offset = 0,
        string $contentType = self::contentTypes['getAccountActivity_0'][0]
    ): array
    {
        $request = $this->getAccountActivity_0Request($startDate, $endDate, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetAccountActivity', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetAccountActivity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetAccountActivity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetAccountActivity';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetAccountActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountActivity_0Async
     *
     * Get user activity logs
     *
     * @param  string|null $startDate Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)
     * @param  string|null $endDate Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)
     * @param  int|null $limit Number of documents per page (optional, default to 10)
     * @param  int|null $offset Index of the first document in the page. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountActivity_0'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAccountActivity_0Async(
        ?string $startDate = null,
        ?string $endDate = null,
        ?int $limit = 10,
        ?int $offset = 0,
        string $contentType = self::contentTypes['getAccountActivity_0'][0]
    ): PromiseInterface
    {
        return $this->getAccountActivity_0AsyncWithHttpInfo($startDate, $endDate, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountActivity_0AsyncWithHttpInfo
     *
     * Get user activity logs
     *
     * @param  string|null $startDate Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)
     * @param  string|null $endDate Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)
     * @param  int|null $limit Number of documents per page (optional, default to 10)
     * @param  int|null $offset Index of the first document in the page. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountActivity_0'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAccountActivity_0AsyncWithHttpInfo(
        $startDate = null,
        $endDate = null,
        $limit = 10,
        $offset = 0,
        string $contentType = self::contentTypes['getAccountActivity_0'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetAccountActivity';
        $request = $this->getAccountActivity_0Request($startDate, $endDate, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountActivity_0'
     *
     * @param  string|null $startDate Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)
     * @param  string|null $endDate Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)
     * @param  int|null $limit Number of documents per page (optional, default to 10)
     * @param  int|null $offset Index of the first document in the page. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountActivity_0'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountActivity_0Request(
        $startDate = null,
        $endDate = null,
        $limit = 10,
        $offset = 0,
        string $contentType = self::contentTypes['getAccountActivity_0'][0]
    ): Request
    {



        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling MasterAccountApi.getAccountActivity_0, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling MasterAccountApi.getAccountActivity_0, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/organization/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporateInvitedUsersList
     *
     * Get the list of all admin users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateInvitedUsersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetCorporateInvitedUsersList
     */
    public function getCorporateInvitedUsersList(
        string $contentType = self::contentTypes['getCorporateInvitedUsersList'][0]
    ): \Brevo\Client\Models\GetCorporateInvitedUsersList
    {
        list($response) = $this->getCorporateInvitedUsersListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getCorporateInvitedUsersListWithHttpInfo
     *
     * Get the list of all admin users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateInvitedUsersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetCorporateInvitedUsersList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporateInvitedUsersListWithHttpInfo(
        string $contentType = self::contentTypes['getCorporateInvitedUsersList'][0]
    ): array
    {
        $request = $this->getCorporateInvitedUsersListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetCorporateInvitedUsersList', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetCorporateInvitedUsersList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetCorporateInvitedUsersList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetCorporateInvitedUsersList';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetCorporateInvitedUsersList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCorporateInvitedUsersListAsync
     *
     * Get the list of all admin users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateInvitedUsersList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporateInvitedUsersListAsync(
        string $contentType = self::contentTypes['getCorporateInvitedUsersList'][0]
    ): PromiseInterface
    {
        return $this->getCorporateInvitedUsersListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporateInvitedUsersListAsyncWithHttpInfo
     *
     * Get the list of all admin users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateInvitedUsersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporateInvitedUsersListAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getCorporateInvitedUsersList'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetCorporateInvitedUsersList';
        $request = $this->getCorporateInvitedUsersListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporateInvitedUsersList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateInvitedUsersList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporateInvitedUsersListRequest(
        string $contentType = self::contentTypes['getCorporateInvitedUsersList'][0]
    ): Request
    {


        $resourcePath = '/corporate/invited/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporateUserPermission
     *
     * Check admin user permissions
     *
     * @param  string $email Email of the invited user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateUserPermission'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetCorporateUserPermission|\Brevo\Client\Models\ErrorModel
     */
    public function getCorporateUserPermission(
        string $email,
        string $contentType = self::contentTypes['getCorporateUserPermission'][0]
    ): \Brevo\Client\Models\GetCorporateUserPermission
    {
        list($response) = $this->getCorporateUserPermissionWithHttpInfo($email, $contentType);
        return $response;
    }

    /**
     * Operation getCorporateUserPermissionWithHttpInfo
     *
     * Check admin user permissions
     *
     * @param  string $email Email of the invited user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateUserPermission'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetCorporateUserPermission|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporateUserPermissionWithHttpInfo(
        string $email,
        string $contentType = self::contentTypes['getCorporateUserPermission'][0]
    ): array
    {
        $request = $this->getCorporateUserPermissionRequest($email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetCorporateUserPermission', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetCorporateUserPermission' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetCorporateUserPermission', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetCorporateUserPermission';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetCorporateUserPermission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCorporateUserPermissionAsync
     *
     * Check admin user permissions
     *
     * @param  string $email Email of the invited user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateUserPermission'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporateUserPermissionAsync(
        string $email,
        string $contentType = self::contentTypes['getCorporateUserPermission'][0]
    ): PromiseInterface
    {
        return $this->getCorporateUserPermissionAsyncWithHttpInfo($email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporateUserPermissionAsyncWithHttpInfo
     *
     * Check admin user permissions
     *
     * @param  string $email Email of the invited user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateUserPermission'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporateUserPermissionAsyncWithHttpInfo(
        $email,
        string $contentType = self::contentTypes['getCorporateUserPermission'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetCorporateUserPermission';
        $request = $this->getCorporateUserPermissionRequest($email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporateUserPermission'
     *
     * @param  string $email Email of the invited user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporateUserPermission'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporateUserPermissionRequest(
        $email,
        string $contentType = self::contentTypes['getCorporateUserPermission'][0]
    ): Request
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $email when calling getCorporateUserPermission'
            );
        }


        $resourcePath = '/corporate/user/{email}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubAccountGroups
     *
     * Get the list of groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubAccountGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]
     */
    public function getSubAccountGroups(
        string $contentType = self::contentTypes['getSubAccountGroups'][0]
    ): array
    {
        list($response) = $this->getSubAccountGroupsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSubAccountGroupsWithHttpInfo
     *
     * Get the list of groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubAccountGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\GetSubAccountGroups200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubAccountGroupsWithHttpInfo(
        string $contentType = self::contentTypes['getSubAccountGroups'][0]
    ): array
    {
        $request = $this->getSubAccountGroupsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubAccountGroupsAsync
     *
     * Get the list of groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubAccountGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubAccountGroupsAsync(
        string $contentType = self::contentTypes['getSubAccountGroups'][0]
    ): PromiseInterface
    {
        return $this->getSubAccountGroupsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubAccountGroupsAsyncWithHttpInfo
     *
     * Get the list of groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubAccountGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSubAccountGroupsAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getSubAccountGroups'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\GetSubAccountGroups200ResponseInner[]';
        $request = $this->getSubAccountGroupsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubAccountGroups'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubAccountGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubAccountGroupsRequest(
        string $contentType = self::contentTypes['getSubAccountGroups'][0]
    ): Request
    {


        $resourcePath = '/corporate/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inviteAdminUser
     *
     * Send invitation to an admin user
     *
     * @param  \Brevo\Client\Models\InviteAdminUser $inviteAdminUser Payload to send an invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteAdminUser'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\CorporateGroupPost201Response|\Brevo\Client\Models\ErrorModel
     */
    public function inviteAdminUser(
        \Brevo\Client\Models\InviteAdminUser $inviteAdminUser,
        string $contentType = self::contentTypes['inviteAdminUser'][0]
    ): \Brevo\Client\Models\CorporateGroupPost201Response
    {
        list($response) = $this->inviteAdminUserWithHttpInfo($inviteAdminUser, $contentType);
        return $response;
    }

    /**
     * Operation inviteAdminUserWithHttpInfo
     *
     * Send invitation to an admin user
     *
     * @param  \Brevo\Client\Models\InviteAdminUser $inviteAdminUser Payload to send an invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteAdminUser'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\CorporateGroupPost201Response|\Brevo\Client\Models\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteAdminUserWithHttpInfo(
        \Brevo\Client\Models\InviteAdminUser $inviteAdminUser,
        string $contentType = self::contentTypes['inviteAdminUser'][0]
    ): array
    {
        $request = $this->inviteAdminUserRequest($inviteAdminUser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\CorporateGroupPost201Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\CorporateGroupPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\CorporateGroupPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\ErrorModel', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\CorporateGroupPost201Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\CorporateGroupPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inviteAdminUserAsync
     *
     * Send invitation to an admin user
     *
     * @param  \Brevo\Client\Models\InviteAdminUser $inviteAdminUser Payload to send an invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteAdminUser'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function inviteAdminUserAsync(
        \Brevo\Client\Models\InviteAdminUser $inviteAdminUser,
        string $contentType = self::contentTypes['inviteAdminUser'][0]
    ): PromiseInterface
    {
        return $this->inviteAdminUserAsyncWithHttpInfo($inviteAdminUser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inviteAdminUserAsyncWithHttpInfo
     *
     * Send invitation to an admin user
     *
     * @param  \Brevo\Client\Models\InviteAdminUser $inviteAdminUser Payload to send an invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteAdminUser'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function inviteAdminUserAsyncWithHttpInfo(
        $inviteAdminUser,
        string $contentType = self::contentTypes['inviteAdminUser'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\CorporateGroupPost201Response';
        $request = $this->inviteAdminUserRequest($inviteAdminUser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inviteAdminUser'
     *
     * @param  \Brevo\Client\Models\InviteAdminUser $inviteAdminUser Payload to send an invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteAdminUser'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inviteAdminUserRequest(
        $inviteAdminUser,
        string $contentType = self::contentTypes['inviteAdminUser'][0]
    ): Request
    {

        // verify the required parameter 'inviteAdminUser' is set
        if ($inviteAdminUser === null || (is_array($inviteAdminUser) && count($inviteAdminUser) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inviteAdminUser when calling inviteAdminUser'
            );
        }


        $resourcePath = '/corporate/user/invitation/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inviteAdminUser)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inviteAdminUser));
            } else {
                $httpBody = $inviteAdminUser;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
