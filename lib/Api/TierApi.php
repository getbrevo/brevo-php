<?php
/**
 * TierApi
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Brevo\Client\ApiException;
use Brevo\Client\Configuration;
use Brevo\Client\HeaderSelector;
use Brevo\Client\ObjectSerializer;

/**
 * TierApi Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TierApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createTierForTierGroup' => [
            'application/json',
        ],
        'createTierGroup' => [
            'application/json',
        ],
        'deleteTierGroup' => [
            'application/json',
        ],
        'getListOfTierGroups' => [
            'application/json',
        ],
        'getLoyaltyProgramTier' => [
            'application/json',
        ],
        'getTierGroup' => [
            'application/json',
        ],
        'loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost' => [
            'application/json',
        ],
        'loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete' => [
            'application/json',
        ],
        'loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut' => [
            'application/json',
        ],
        'updateTierGroup' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createTierForTierGroup
     *
     * Create new tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierForTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\Tier|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError
     */
    public function createTierForTierGroup(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['createTierForTierGroup'][0]
    ): \Brevo\Client\Models\Tier
    {
        list($response) = $this->createTierForTierGroupWithHttpInfo($loyaltyProgramId, $tierGroupId, $tierRequest, $contentType);
        return $response;
    }

    /**
     * Operation createTierForTierGroupWithHttpInfo
     *
     * Create new tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierForTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\Tier|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTierForTierGroupWithHttpInfo(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['createTierForTierGroup'][0]
    ): array
    {
        $request = $this->createTierForTierGroupRequest($loyaltyProgramId, $tierGroupId, $tierRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\Tier', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\Tier' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\Tier', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\Tier';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\Tier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTierForTierGroupAsync
     *
     * Create new tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierForTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTierForTierGroupAsync(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['createTierForTierGroup'][0]
    ): PromiseInterface
    {
        return $this->createTierForTierGroupAsyncWithHttpInfo($loyaltyProgramId, $tierGroupId, $tierRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTierForTierGroupAsyncWithHttpInfo
     *
     * Create new tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierForTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTierForTierGroupAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierGroupId,
        $tierRequest,
        string $contentType = self::contentTypes['createTierForTierGroup'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\Tier';
        $request = $this->createTierForTierGroupRequest($loyaltyProgramId, $tierGroupId, $tierRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTierForTierGroup'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierForTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTierForTierGroupRequest(
        $loyaltyProgramId,
        $tierGroupId,
        $tierRequest,
        string $contentType = self::contentTypes['createTierForTierGroup'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling createTierForTierGroup'
            );
        }

        // verify the required parameter 'tierGroupId' is set
        if ($tierGroupId === null || (is_array($tierGroupId) && count($tierGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierGroupId when calling createTierForTierGroup'
            );
        }

        // verify the required parameter 'tierRequest' is set
        if ($tierRequest === null || (is_array($tierRequest) && count($tierRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierRequest when calling createTierForTierGroup'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups/{tierGroupId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierGroupId' . '}',
                ObjectSerializer::toPathValue($tierGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tierRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tierRequest));
            } else {
                $httpBody = $tierRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTierGroup
     *
     * Create tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest Subscription Member information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ErrorResponse|\Brevo\Client\Models\ValidationError
     */
    public function createTierGroup(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest,
        string $contentType = self::contentTypes['createTierGroup'][0]
    ): \Brevo\Client\Models\TierGroup
    {
        list($response) = $this->createTierGroupWithHttpInfo($loyaltyProgramId, $createTierGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createTierGroupWithHttpInfo
     *
     * Create tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest Subscription Member information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ErrorResponse|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTierGroupWithHttpInfo(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest,
        string $contentType = self::contentTypes['createTierGroup'][0]
    ): array
    {
        $request = $this->createTierGroupRequest($loyaltyProgramId, $createTierGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\Brevo\Client\Models\TierGroup', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\TierGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\TierGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\ErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\TierGroup';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\TierGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTierGroupAsync
     *
     * Create tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest Subscription Member information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTierGroupAsync(
        string $loyaltyProgramId,
        \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest,
        string $contentType = self::contentTypes['createTierGroup'][0]
    ): PromiseInterface
    {
        return $this->createTierGroupAsyncWithHttpInfo($loyaltyProgramId, $createTierGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTierGroupAsyncWithHttpInfo
     *
     * Create tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest Subscription Member information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTierGroupAsyncWithHttpInfo(
        $loyaltyProgramId,
        $createTierGroupRequest,
        string $contentType = self::contentTypes['createTierGroup'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\TierGroup';
        $request = $this->createTierGroupRequest($loyaltyProgramId, $createTierGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTierGroup'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\CreateTierGroupRequest $createTierGroupRequest Subscription Member information (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTierGroupRequest(
        $loyaltyProgramId,
        $createTierGroupRequest,
        string $contentType = self::contentTypes['createTierGroup'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling createTierGroup'
            );
        }

        // verify the required parameter 'createTierGroupRequest' is set
        if ($createTierGroupRequest === null || (is_array($createTierGroupRequest) && count($createTierGroupRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $createTierGroupRequest when calling createTierGroup'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createTierGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createTierGroupRequest));
            } else {
                $httpBody = $createTierGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTierGroup
     *
     * Delete tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteTierGroup(
        string $loyaltyProgramId,
        string $tierGroupId,
        string $contentType = self::contentTypes['deleteTierGroup'][0]
    ): void
    {
        $this->deleteTierGroupWithHttpInfo($loyaltyProgramId, $tierGroupId, $contentType);
    }

    /**
     * Operation deleteTierGroupWithHttpInfo
     *
     * Delete tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTierGroupWithHttpInfo(
        string $loyaltyProgramId,
        string $tierGroupId,
        string $contentType = self::contentTypes['deleteTierGroup'][0]
    ): array
    {
        $request = $this->deleteTierGroupRequest($loyaltyProgramId, $tierGroupId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTierGroupAsync
     *
     * Delete tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteTierGroupAsync(
        string $loyaltyProgramId,
        string $tierGroupId,
        string $contentType = self::contentTypes['deleteTierGroup'][0]
    ): PromiseInterface
    {
        return $this->deleteTierGroupAsyncWithHttpInfo($loyaltyProgramId, $tierGroupId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTierGroupAsyncWithHttpInfo
     *
     * Delete tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteTierGroupAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierGroupId,
        string $contentType = self::contentTypes['deleteTierGroup'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteTierGroupRequest($loyaltyProgramId, $tierGroupId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTierGroup'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTierGroupRequest(
        $loyaltyProgramId,
        $tierGroupId,
        string $contentType = self::contentTypes['deleteTierGroup'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling deleteTierGroup'
            );
        }

        // verify the required parameter 'tierGroupId' is set
        if ($tierGroupId === null || (is_array($tierGroupId) && count($tierGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierGroupId when calling deleteTierGroup'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups/{tierGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierGroupId' . '}',
                ObjectSerializer::toPathValue($tierGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListOfTierGroups
     *
     * Get tier group page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfTierGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\TierGroupPage|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\ValidationError
     */
    public function getListOfTierGroups(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getListOfTierGroups'][0]
    ): \Brevo\Client\Models\TierGroupPage
    {
        list($response) = $this->getListOfTierGroupsWithHttpInfo($loyaltyProgramId, $version, $contentType);
        return $response;
    }

    /**
     * Operation getListOfTierGroupsWithHttpInfo
     *
     * Get tier group page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfTierGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\TierGroupPage|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListOfTierGroupsWithHttpInfo(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getListOfTierGroups'][0]
    ): array
    {
        $request = $this->getListOfTierGroupsRequest($loyaltyProgramId, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\TierGroupPage', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\TierGroupPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\TierGroupPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\UnauthorizedResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\UnauthorizedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\UnauthorizedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\TierGroupPage';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\TierGroupPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListOfTierGroupsAsync
     *
     * Get tier group page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfTierGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getListOfTierGroupsAsync(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getListOfTierGroups'][0]
    ): PromiseInterface
    {
        return $this->getListOfTierGroupsAsyncWithHttpInfo($loyaltyProgramId, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListOfTierGroupsAsyncWithHttpInfo
     *
     * Get tier group page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfTierGroups'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getListOfTierGroupsAsyncWithHttpInfo(
        $loyaltyProgramId,
        $version = 'draft',
        string $contentType = self::contentTypes['getListOfTierGroups'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\TierGroupPage';
        $request = $this->getListOfTierGroupsRequest($loyaltyProgramId, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListOfTierGroups'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListOfTierGroups'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListOfTierGroupsRequest(
        $loyaltyProgramId,
        $version = 'draft',
        string $contentType = self::contentTypes['getListOfTierGroups'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getListOfTierGroups'
            );
        }



        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoyaltyProgramTier
     *
     * Get tier page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\LoyaltyTierPage|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError
     */
    public function getLoyaltyProgramTier(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getLoyaltyProgramTier'][0]
    ): \Brevo\Client\Models\LoyaltyTierPage
    {
        list($response) = $this->getLoyaltyProgramTierWithHttpInfo($loyaltyProgramId, $version, $contentType);
        return $response;
    }

    /**
     * Operation getLoyaltyProgramTierWithHttpInfo
     *
     * Get tier page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\LoyaltyTierPage|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoyaltyProgramTierWithHttpInfo(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getLoyaltyProgramTier'][0]
    ): array
    {
        $request = $this->getLoyaltyProgramTierRequest($loyaltyProgramId, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\LoyaltyTierPage', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\LoyaltyTierPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\LoyaltyTierPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\LoyaltyTierPage';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\LoyaltyTierPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoyaltyProgramTierAsync
     *
     * Get tier page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyProgramTierAsync(
        string $loyaltyProgramId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getLoyaltyProgramTier'][0]
    ): PromiseInterface
    {
        return $this->getLoyaltyProgramTierAsyncWithHttpInfo($loyaltyProgramId, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoyaltyProgramTierAsyncWithHttpInfo
     *
     * Get tier page
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyProgramTierAsyncWithHttpInfo(
        $loyaltyProgramId,
        $version = 'draft',
        string $contentType = self::contentTypes['getLoyaltyProgramTier'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\LoyaltyTierPage';
        $request = $this->getLoyaltyProgramTierRequest($loyaltyProgramId, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoyaltyProgramTier'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string|null $version Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyProgramTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoyaltyProgramTierRequest(
        $loyaltyProgramId,
        $version = 'draft',
        string $contentType = self::contentTypes['getLoyaltyProgramTier'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getLoyaltyProgramTier'
            );
        }



        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTierGroup
     *
     * Get tier group by Id
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string|null $version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\ValidationError
     */
    public function getTierGroup(
        string $loyaltyProgramId,
        string $tierGroupId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getTierGroup'][0]
    ): \Brevo\Client\Models\TierGroup
    {
        list($response) = $this->getTierGroupWithHttpInfo($loyaltyProgramId, $tierGroupId, $version, $contentType);
        return $response;
    }

    /**
     * Operation getTierGroupWithHttpInfo
     *
     * Get tier group by Id
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string|null $version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTierGroupWithHttpInfo(
        string $loyaltyProgramId,
        string $tierGroupId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getTierGroup'][0]
    ): array
    {
        $request = $this->getTierGroupRequest($loyaltyProgramId, $tierGroupId, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\TierGroup', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\TierGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\TierGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\UnauthorizedResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\UnauthorizedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\UnauthorizedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\TierGroup';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\TierGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTierGroupAsync
     *
     * Get tier group by Id
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string|null $version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTierGroupAsync(
        string $loyaltyProgramId,
        string $tierGroupId,
        ?string $version = 'draft',
        string $contentType = self::contentTypes['getTierGroup'][0]
    ): PromiseInterface
    {
        return $this->getTierGroupAsyncWithHttpInfo($loyaltyProgramId, $tierGroupId, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTierGroupAsyncWithHttpInfo
     *
     * Get tier group by Id
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string|null $version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTierGroupAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierGroupId,
        $version = 'draft',
        string $contentType = self::contentTypes['getTierGroup'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\TierGroup';
        $request = $this->getTierGroupRequest($loyaltyProgramId, $tierGroupId, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTierGroup'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  string|null $version Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTierGroupRequest(
        $loyaltyProgramId,
        $tierGroupId,
        $version = 'draft',
        string $contentType = self::contentTypes['getTierGroup'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getTierGroup'
            );
        }

        // verify the required parameter 'tierGroupId' is set
        if ($tierGroupId === null || (is_array($tierGroupId) && count($tierGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierGroupId when calling getTierGroup'
            );
        }



        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups/{tierGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierGroupId' . '}',
                ObjectSerializer::toPathValue($tierGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost
     *
     * Add subscription to a tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\TierForContact|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UpdateTierGroup404Response|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError
     */
    public function loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost(
        string $loyaltyProgramId,
        string $contactId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'][0]
    ): \Brevo\Client\Models\TierForContact
    {
        list($response) = $this->loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostWithHttpInfo($loyaltyProgramId, $contactId, $tierId, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostWithHttpInfo
     *
     * Add subscription to a tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\TierForContact|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UpdateTierGroup404Response|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostWithHttpInfo(
        string $loyaltyProgramId,
        string $contactId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'][0]
    ): array
    {
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostRequest($loyaltyProgramId, $contactId, $tierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\TierForContact', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\TierForContact' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\TierForContact', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\UpdateTierGroup404Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\UpdateTierGroup404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\UpdateTierGroup404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\TierForContact';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\TierForContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UpdateTierGroup404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostAsync
     *
     * Add subscription to a tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostAsync(
        string $loyaltyProgramId,
        string $contactId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'][0]
    ): PromiseInterface
    {
        return $this->loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostAsyncWithHttpInfo($loyaltyProgramId, $contactId, $tierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostAsyncWithHttpInfo
     *
     * Add subscription to a tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostAsyncWithHttpInfo(
        $loyaltyProgramId,
        $contactId,
        $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\TierForContact';
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostRequest($loyaltyProgramId, $contactId, $tierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $contactId Contact Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPostRequest(
        $loyaltyProgramId,
        $contactId,
        $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'
            );
        }

        // verify the required parameter 'contactId' is set
        if ($contactId === null || (is_array($contactId) && count($contactId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contactId when calling loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'
            );
        }

        // verify the required parameter 'tierId' is set
        if ($tierId === null || (is_array($tierId) && count($tierId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierId when calling loyaltyTierProgramsLoyaltyProgramIdContactsContactIdTiersTierIdPost'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/contacts/{contactId}/tiers/{tierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($contactId !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contactId),
                $resourcePath
            );
        }
        // path params
        if ($tierId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierId' . '}',
                ObjectSerializer::toPathValue($tierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete
     *
     * Delete tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete(
        string $loyaltyProgramId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'][0]
    ): void
    {
        $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteWithHttpInfo($loyaltyProgramId, $tierId, $contentType);
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteWithHttpInfo
     *
     * Delete tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteWithHttpInfo(
        string $loyaltyProgramId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'][0]
    ): array
    {
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteRequest($loyaltyProgramId, $tierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteAsync
     *
     * Delete tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteAsync(
        string $loyaltyProgramId,
        string $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'][0]
    ): PromiseInterface
    {
        return $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteAsyncWithHttpInfo($loyaltyProgramId, $tierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteAsyncWithHttpInfo
     *
     * Delete tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteRequest($loyaltyProgramId, $tierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDeleteRequest(
        $loyaltyProgramId,
        $tierId,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'
            );
        }

        // verify the required parameter 'tierId' is set
        if ($tierId === null || (is_array($tierId) && count($tierId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierId when calling loyaltyTierProgramsLoyaltyProgramIdTiersTierIdDelete'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tiers/{tierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierId' . '}',
                ObjectSerializer::toPathValue($tierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut
     *
     * Update tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\Tier|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut(
        string $loyaltyProgramId,
        string $tierId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'][0]
    ): \Brevo\Client\Models\Tier
    {
        list($response) = $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutWithHttpInfo($loyaltyProgramId, $tierId, $tierRequest, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutWithHttpInfo
     *
     * Update tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\Tier|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutWithHttpInfo(
        string $loyaltyProgramId,
        string $tierId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'][0]
    ): array
    {
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutRequest($loyaltyProgramId, $tierId, $tierRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\Tier', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\Tier' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\Tier', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\Tier';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\Tier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutAsync
     *
     * Update tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutAsync(
        string $loyaltyProgramId,
        string $tierId,
        \Brevo\Client\Models\TierRequest $tierRequest,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'][0]
    ): PromiseInterface
    {
        return $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutAsyncWithHttpInfo($loyaltyProgramId, $tierId, $tierRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutAsyncWithHttpInfo
     *
     * Update tier
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierId,
        $tierRequest,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\Tier';
        $request = $this->loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutRequest($loyaltyProgramId, $tierId, $tierRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierId Tier Id (required)
     * @param  \Brevo\Client\Models\TierRequest $tierRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPutRequest(
        $loyaltyProgramId,
        $tierId,
        $tierRequest,
        string $contentType = self::contentTypes['loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'
            );
        }

        // verify the required parameter 'tierId' is set
        if ($tierId === null || (is_array($tierId) && count($tierId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierId when calling loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'
            );
        }

        // verify the required parameter 'tierRequest' is set
        if ($tierRequest === null || (is_array($tierRequest) && count($tierRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierRequest when calling loyaltyTierProgramsLoyaltyProgramIdTiersTierIdPut'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tiers/{tierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierId' . '}',
                ObjectSerializer::toPathValue($tierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tierRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tierRequest));
            } else {
                $httpBody = $tierRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTierGroup
     *
     * Update tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest updateTierGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\UpdateTierGroup404Response|\Brevo\Client\Models\ErrorResponse|\Brevo\Client\Models\ValidationError
     */
    public function updateTierGroup(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest,
        string $contentType = self::contentTypes['updateTierGroup'][0]
    ): \Brevo\Client\Models\TierGroup
    {
        list($response) = $this->updateTierGroupWithHttpInfo($loyaltyProgramId, $tierGroupId, $updateTierGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateTierGroupWithHttpInfo
     *
     * Update tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\TierGroup|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\UnauthorizedResponse|\Brevo\Client\Models\UpdateTierGroup404Response|\Brevo\Client\Models\ErrorResponse|\Brevo\Client\Models\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTierGroupWithHttpInfo(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest,
        string $contentType = self::contentTypes['updateTierGroup'][0]
    ): array
    {
        $request = $this->updateTierGroupRequest($loyaltyProgramId, $tierGroupId, $updateTierGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\TierGroup', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\TierGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\TierGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\UnauthorizedResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\UnauthorizedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\UnauthorizedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\UpdateTierGroup404Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\UpdateTierGroup404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\UpdateTierGroup404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\Brevo\Client\Models\ErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ValidationError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\TierGroup';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\TierGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UnauthorizedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\UpdateTierGroup404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTierGroupAsync
     *
     * Update tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTierGroupAsync(
        string $loyaltyProgramId,
        string $tierGroupId,
        \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest,
        string $contentType = self::contentTypes['updateTierGroup'][0]
    ): PromiseInterface
    {
        return $this->updateTierGroupAsyncWithHttpInfo($loyaltyProgramId, $tierGroupId, $updateTierGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTierGroupAsyncWithHttpInfo
     *
     * Update tier group
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTierGroup'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTierGroupAsyncWithHttpInfo(
        $loyaltyProgramId,
        $tierGroupId,
        $updateTierGroupRequest,
        string $contentType = self::contentTypes['updateTierGroup'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\TierGroup';
        $request = $this->updateTierGroupRequest($loyaltyProgramId, $tierGroupId, $updateTierGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTierGroup'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $tierGroupId Tier group Id (required)
     * @param  \Brevo\Client\Models\UpdateTierGroupRequest $updateTierGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTierGroup'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTierGroupRequest(
        $loyaltyProgramId,
        $tierGroupId,
        $updateTierGroupRequest,
        string $contentType = self::contentTypes['updateTierGroup'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling updateTierGroup'
            );
        }

        // verify the required parameter 'tierGroupId' is set
        if ($tierGroupId === null || (is_array($tierGroupId) && count($tierGroupId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tierGroupId when calling updateTierGroup'
            );
        }

        // verify the required parameter 'updateTierGroupRequest' is set
        if ($updateTierGroupRequest === null || (is_array($updateTierGroupRequest) && count($updateTierGroupRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $updateTierGroupRequest when calling updateTierGroup'
            );
        }


        $resourcePath = '/loyalty/tier/programs/{loyaltyProgramId}/tier-groups/{tierGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }
        // path params
        if ($tierGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'tierGroupId' . '}',
                ObjectSerializer::toPathValue($tierGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateTierGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateTierGroupRequest));
            } else {
                $httpBody = $updateTierGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
