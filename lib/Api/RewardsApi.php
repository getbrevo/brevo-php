<?php
/**
 * RewardsApi
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Brevo\Client\ApiException;
use Brevo\Client\Configuration;
use Brevo\Client\HeaderSelector;
use Brevo\Client\ObjectSerializer;

/**
 * RewardsApi Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RewardsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'attributeReward' => [
            'application/json',
        ],
        'getOffersList' => [
            'application/json',
        ],
        'redeemReward' => [
            'application/json',
        ],
        'revokeReward' => [
            'application/json',
        ],
        'validateReward' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation attributeReward
     *
     * Attribute reward to a contact
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload Attribute reward information (One of contactId and loyaltySubscriptionId must be provided.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attributeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\RewardAttributionResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function attributeReward(
        string $loyaltyProgramId,
        \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload,
        string $contentType = self::contentTypes['attributeReward'][0]
    ): \Brevo\Client\Models\RewardAttributionResponse
    {
        list($response) = $this->attributeRewardWithHttpInfo($loyaltyProgramId, $attributeRewardPayload, $contentType);
        return $response;
    }

    /**
     * Operation attributeRewardWithHttpInfo
     *
     * Attribute reward to a contact
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload Attribute reward information (One of contactId and loyaltySubscriptionId must be provided.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attributeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\RewardAttributionResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeRewardWithHttpInfo(
        string $loyaltyProgramId,
        \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload,
        string $contentType = self::contentTypes['attributeReward'][0]
    ): array
    {
        $request = $this->attributeRewardRequest($loyaltyProgramId, $attributeRewardPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\RewardAttributionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\RewardAttributionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\RewardAttributionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if (in_array('\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 424:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\RewardAttributionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\RewardAttributionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\AttributedRewardFailedConditionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeRewardAsync
     *
     * Attribute reward to a contact
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload Attribute reward information (One of contactId and loyaltySubscriptionId must be provided.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attributeReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function attributeRewardAsync(
        string $loyaltyProgramId,
        \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload,
        string $contentType = self::contentTypes['attributeReward'][0]
    ): PromiseInterface
    {
        return $this->attributeRewardAsyncWithHttpInfo($loyaltyProgramId, $attributeRewardPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeRewardAsyncWithHttpInfo
     *
     * Attribute reward to a contact
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload Attribute reward information (One of contactId and loyaltySubscriptionId must be provided.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attributeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function attributeRewardAsyncWithHttpInfo(
        $loyaltyProgramId,
        $attributeRewardPayload,
        string $contentType = self::contentTypes['attributeReward'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\RewardAttributionResponse';
        $request = $this->attributeRewardRequest($loyaltyProgramId, $attributeRewardPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeReward'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\AttributeRewardPayload $attributeRewardPayload Attribute reward information (One of contactId and loyaltySubscriptionId must be provided.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attributeReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeRewardRequest(
        $loyaltyProgramId,
        $attributeRewardPayload,
        string $contentType = self::contentTypes['attributeReward'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling attributeReward'
            );
        }

        // verify the required parameter 'attributeRewardPayload' is set
        if ($attributeRewardPayload === null || (is_array($attributeRewardPayload) && count($attributeRewardPayload) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attributeRewardPayload when calling attributeReward'
            );
        }


        $resourcePath = '/loyalty/offer/programs/{loyaltyProgramId}/rewards/attribute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($attributeRewardPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($attributeRewardPayload));
            } else {
                $httpBody = $attributeRewardPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOffersList
     *
     * Get Reward list
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int|null $limit Number of documents per page (optional, default to 100)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $rewardState State of the reward (optional, default to 'all')
     * @param  string|null $rewardVersion Select &#39;active&#39; to retrieve list of all rewards which are live for clients. Select draft to retrieve list of all non deleted rewards. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\OffersListResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function getOffersList(
        string $loyaltyProgramId,
        ?int $limit = 100,
        ?int $offset = 0,
        ?string $rewardState = 'all',
        ?string $rewardVersion = 'draft',
        string $contentType = self::contentTypes['getOffersList'][0]
    ): \Brevo\Client\Models\OffersListResponse
    {
        list($response) = $this->getOffersListWithHttpInfo($loyaltyProgramId, $limit, $offset, $rewardState, $rewardVersion, $contentType);
        return $response;
    }

    /**
     * Operation getOffersListWithHttpInfo
     *
     * Get Reward list
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int|null $limit Number of documents per page (optional, default to 100)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $rewardState State of the reward (optional, default to 'all')
     * @param  string|null $rewardVersion Select &#39;active&#39; to retrieve list of all rewards which are live for clients. Select draft to retrieve list of all non deleted rewards. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\OffersListResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOffersListWithHttpInfo(
        string $loyaltyProgramId,
        ?int $limit = 100,
        ?int $offset = 0,
        ?string $rewardState = 'all',
        ?string $rewardVersion = 'draft',
        string $contentType = self::contentTypes['getOffersList'][0]
    ): array
    {
        $request = $this->getOffersListRequest($loyaltyProgramId, $limit, $offset, $rewardState, $rewardVersion, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\OffersListResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\OffersListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\OffersListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\OffersListResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\OffersListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOffersListAsync
     *
     * Get Reward list
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int|null $limit Number of documents per page (optional, default to 100)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $rewardState State of the reward (optional, default to 'all')
     * @param  string|null $rewardVersion Select &#39;active&#39; to retrieve list of all rewards which are live for clients. Select draft to retrieve list of all non deleted rewards. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOffersListAsync(
        string $loyaltyProgramId,
        ?int $limit = 100,
        ?int $offset = 0,
        ?string $rewardState = 'all',
        ?string $rewardVersion = 'draft',
        string $contentType = self::contentTypes['getOffersList'][0]
    ): PromiseInterface
    {
        return $this->getOffersListAsyncWithHttpInfo($loyaltyProgramId, $limit, $offset, $rewardState, $rewardVersion, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOffersListAsyncWithHttpInfo
     *
     * Get Reward list
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int|null $limit Number of documents per page (optional, default to 100)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $rewardState State of the reward (optional, default to 'all')
     * @param  string|null $rewardVersion Select &#39;active&#39; to retrieve list of all rewards which are live for clients. Select draft to retrieve list of all non deleted rewards. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersList'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOffersListAsyncWithHttpInfo(
        $loyaltyProgramId,
        $limit = 100,
        $offset = 0,
        $rewardState = 'all',
        $rewardVersion = 'draft',
        string $contentType = self::contentTypes['getOffersList'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\OffersListResponse';
        $request = $this->getOffersListRequest($loyaltyProgramId, $limit, $offset, $rewardState, $rewardVersion, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOffersList'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  int|null $limit Number of documents per page (optional, default to 100)
     * @param  int|null $offset Index of the first document in the page (optional, default to 0)
     * @param  string|null $rewardState State of the reward (optional, default to 'all')
     * @param  string|null $rewardVersion Select &#39;active&#39; to retrieve list of all rewards which are live for clients. Select draft to retrieve list of all non deleted rewards. (optional, default to 'draft')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersList'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOffersListRequest(
        $loyaltyProgramId,
        $limit = 100,
        $offset = 0,
        $rewardState = 'all',
        $rewardVersion = 'draft',
        string $contentType = self::contentTypes['getOffersList'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling getOffersList'
            );
        }






        $resourcePath = '/loyalty/offer/programs/{loyaltyProgramId}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rewardState,
            'rewardState', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rewardVersion,
            'rewardVersion', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemReward
     *
     * Redeem reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload Redeemed reward information (Either contactId or loyaltySubscriptionId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\RewardRedeemResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\SubscriptionNotFoundErrorResponse|\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function redeemReward(
        string $loyaltyProgramId,
        \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): \Brevo\Client\Models\RewardRedeemResponse
    {
        list($response) = $this->redeemRewardWithHttpInfo($loyaltyProgramId, $redeemRewardPayload, $contentType);
        return $response;
    }

    /**
     * Operation redeemRewardWithHttpInfo
     *
     * Redeem reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload Redeemed reward information (Either contactId or loyaltySubscriptionId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\RewardRedeemResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\SubscriptionNotFoundErrorResponse|\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemRewardWithHttpInfo(
        string $loyaltyProgramId,
        \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): array
    {
        $request = $this->redeemRewardRequest($loyaltyProgramId, $redeemRewardPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\RewardRedeemResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\RewardRedeemResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\RewardRedeemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\SubscriptionNotFoundErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\SubscriptionNotFoundErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\SubscriptionNotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 412:
                    if (in_array('\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\RewardRedeemResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\RewardRedeemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\SubscriptionNotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\RedeemedRewardFailedConditionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redeemRewardAsync
     *
     * Redeem reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload Redeemed reward information (Either contactId or loyaltySubscriptionId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemRewardAsync(
        string $loyaltyProgramId,
        \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): PromiseInterface
    {
        return $this->redeemRewardAsyncWithHttpInfo($loyaltyProgramId, $redeemRewardPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemRewardAsyncWithHttpInfo
     *
     * Redeem reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload Redeemed reward information (Either contactId or loyaltySubscriptionId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemRewardAsyncWithHttpInfo(
        $loyaltyProgramId,
        $redeemRewardPayload,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\RewardRedeemResponse';
        $request = $this->redeemRewardRequest($loyaltyProgramId, $redeemRewardPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemReward'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\RedeemRewardPayload $redeemRewardPayload Redeemed reward information (Either contactId or loyaltySubscriptionId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemRewardRequest(
        $loyaltyProgramId,
        $redeemRewardPayload,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling redeemReward'
            );
        }

        // verify the required parameter 'redeemRewardPayload' is set
        if ($redeemRewardPayload === null || (is_array($redeemRewardPayload) && count($redeemRewardPayload) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $redeemRewardPayload when calling redeemReward'
            );
        }


        $resourcePath = '/loyalty/offer/programs/{loyaltyProgramId}/rewards/redeem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($redeemRewardPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($redeemRewardPayload));
            } else {
                $httpBody = $redeemRewardPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeReward
     *
     * Revoke reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $attributedRewardId Attributed Reward Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function revokeReward(
        string $loyaltyProgramId,
        string $attributedRewardId,
        string $contentType = self::contentTypes['revokeReward'][0]
    ): void
    {
        $this->revokeRewardWithHttpInfo($loyaltyProgramId, $attributedRewardId, $contentType);
    }

    /**
     * Operation revokeRewardWithHttpInfo
     *
     * Revoke reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $attributedRewardId Attributed Reward Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeRewardWithHttpInfo(
        string $loyaltyProgramId,
        string $attributedRewardId,
        string $contentType = self::contentTypes['revokeReward'][0]
    ): array
    {
        $request = $this->revokeRewardRequest($loyaltyProgramId, $attributedRewardId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeRewardAsync
     *
     * Revoke reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $attributedRewardId Attributed Reward Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function revokeRewardAsync(
        string $loyaltyProgramId,
        string $attributedRewardId,
        string $contentType = self::contentTypes['revokeReward'][0]
    ): PromiseInterface
    {
        return $this->revokeRewardAsyncWithHttpInfo($loyaltyProgramId, $attributedRewardId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeRewardAsyncWithHttpInfo
     *
     * Revoke reward
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $attributedRewardId Attributed Reward Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function revokeRewardAsyncWithHttpInfo(
        $loyaltyProgramId,
        $attributedRewardId,
        string $contentType = self::contentTypes['revokeReward'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->revokeRewardRequest($loyaltyProgramId, $attributedRewardId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeReward'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  string $attributedRewardId Attributed Reward Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeRewardRequest(
        $loyaltyProgramId,
        $attributedRewardId,
        string $contentType = self::contentTypes['revokeReward'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling revokeReward'
            );
        }

        // verify the required parameter 'attributedRewardId' is set
        if ($attributedRewardId === null || (is_array($attributedRewardId) && count($attributedRewardId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $attributedRewardId when calling revokeReward'
            );
        }


        $resourcePath = '/loyalty/offer/programs/{loyaltyProgramId}/rewards/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $attributedRewardId,
            'attributedRewardId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateReward
     *
     * Validates a voucher
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload Validate reward information (One of contactId and loyaltySubscriptionId must be present, or one of code and attributedRewardId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Brevo\Client\Models\ValidatedRewardResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\SubscriptionNotFoundErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse
     */
    public function validateReward(
        string $loyaltyProgramId,
        \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload,
        string $contentType = self::contentTypes['validateReward'][0]
    ): \Brevo\Client\Models\ValidatedRewardResponse
    {
        list($response) = $this->validateRewardWithHttpInfo($loyaltyProgramId, $validateRewardPayload, $contentType);
        return $response;
    }

    /**
     * Operation validateRewardWithHttpInfo
     *
     * Validates a voucher
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload Validate reward information (One of contactId and loyaltySubscriptionId must be present, or one of code and attributedRewardId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Brevo\Client\Models\ValidatedRewardResponse|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\BadRequestPayload|\Brevo\Client\Models\SubscriptionNotFoundErrorResponse|\Brevo\Client\Models\ContactIdInvalidResponse|\Brevo\Client\Models\ContactIdInvalidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateRewardWithHttpInfo(
        string $loyaltyProgramId,
        \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload,
        string $contentType = self::contentTypes['validateReward'][0]
    ): array
    {
        $request = $this->validateRewardRequest($loyaltyProgramId, $validateRewardPayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Brevo\Client\Models\ValidatedRewardResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ValidatedRewardResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ValidatedRewardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if (in_array('\Brevo\Client\Models\BadRequestPayload', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\BadRequestPayload' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\BadRequestPayload', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\Brevo\Client\Models\SubscriptionNotFoundErrorResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\SubscriptionNotFoundErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\SubscriptionNotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 424:
                    if (in_array('\Brevo\Client\Models\ContactIdInvalidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Brevo\Client\Models\ContactIdInvalidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Brevo\Client\Models\ContactIdInvalidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Brevo\Client\Models\ValidatedRewardResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ValidatedRewardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\BadRequestPayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\SubscriptionNotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Brevo\Client\Models\ContactIdInvalidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateRewardAsync
     *
     * Validates a voucher
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload Validate reward information (One of contactId and loyaltySubscriptionId must be present, or one of code and attributedRewardId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function validateRewardAsync(
        string $loyaltyProgramId,
        \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload,
        string $contentType = self::contentTypes['validateReward'][0]
    ): PromiseInterface
    {
        return $this->validateRewardAsyncWithHttpInfo($loyaltyProgramId, $validateRewardPayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateRewardAsyncWithHttpInfo
     *
     * Validates a voucher
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload Validate reward information (One of contactId and loyaltySubscriptionId must be present, or one of code and attributedRewardId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function validateRewardAsyncWithHttpInfo(
        $loyaltyProgramId,
        $validateRewardPayload,
        string $contentType = self::contentTypes['validateReward'][0]
    ): PromiseInterface
    {
        $returnType = '\Brevo\Client\Models\ValidatedRewardResponse';
        $request = $this->validateRewardRequest($loyaltyProgramId, $validateRewardPayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateReward'
     *
     * @param  string $loyaltyProgramId Loyalty Program Id (required)
     * @param  \Brevo\Client\Models\ValidateRewardPayload $validateRewardPayload Validate reward information (One of contactId and loyaltySubscriptionId must be present, or one of code and attributedRewardId must be present.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateRewardRequest(
        $loyaltyProgramId,
        $validateRewardPayload,
        string $contentType = self::contentTypes['validateReward'][0]
    ): Request
    {

        // verify the required parameter 'loyaltyProgramId' is set
        if ($loyaltyProgramId === null || (is_array($loyaltyProgramId) && count($loyaltyProgramId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyaltyProgramId when calling validateReward'
            );
        }

        // verify the required parameter 'validateRewardPayload' is set
        if ($validateRewardPayload === null || (is_array($validateRewardPayload) && count($validateRewardPayload) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $validateRewardPayload when calling validateReward'
            );
        }


        $resourcePath = '/loyalty/offer/programs/{loyaltyProgramId}/rewards/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($loyaltyProgramId !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyProgramId' . '}',
                ObjectSerializer::toPathValue($loyaltyProgramId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($validateRewardPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($validateRewardPayload));
            } else {
                $httpBody = $validateRewardPayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('partner-key');
        if ($apiKey !== null) {
            $headers['partner-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
