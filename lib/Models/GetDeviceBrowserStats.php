<?php
/**
 * GetDeviceBrowserStats
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetDeviceBrowserStats Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetDeviceBrowserStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getDeviceBrowserStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'clickers' => 'int',
        'uniqueClicks' => 'int',
        'viewed' => 'int',
        'uniqueViews' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'clickers' => 'int64',
        'uniqueClicks' => 'int64',
        'viewed' => 'int64',
        'uniqueViews' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'clickers' => false,
        'uniqueClicks' => false,
        'viewed' => false,
        'uniqueViews' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'clickers' => 'clickers',
        'uniqueClicks' => 'uniqueClicks',
        'viewed' => 'viewed',
        'uniqueViews' => 'uniqueViews'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'clickers' => 'setClickers',
        'uniqueClicks' => 'setUniqueClicks',
        'viewed' => 'setViewed',
        'uniqueViews' => 'setUniqueViews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'clickers' => 'getClickers',
        'uniqueClicks' => 'getUniqueClicks',
        'viewed' => 'getViewed',
        'uniqueViews' => 'getUniqueViews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('clickers', $data ?? [], null);
        $this->setIfExists('uniqueClicks', $data ?? [], null);
        $this->setIfExists('viewed', $data ?? [], null);
        $this->setIfExists('uniqueViews', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['clickers'] === null) {
            $invalidProperties[] = "'clickers' can't be null";
        }
        if ($this->container['uniqueClicks'] === null) {
            $invalidProperties[] = "'uniqueClicks' can't be null";
        }
        if ($this->container['viewed'] === null) {
            $invalidProperties[] = "'viewed' can't be null";
        }
        if ($this->container['uniqueViews'] === null) {
            $invalidProperties[] = "'uniqueViews' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets clickers
     *
     * @return int
     */
    public function getClickers(): int
    {
        return $this->container['clickers'];
    }

    /**
     * Sets clickers
     *
     * @param int $clickers Number of total clicks for the campaign using the particular browser
     *
     * @return $this
     */
    public function setClickers(int $clickers): static
    {
        if (is_null($clickers)) {
            throw new InvalidArgumentException('non-nullable clickers cannot be null');
        }
        $this->container['clickers'] = $clickers;

        return $this;
    }

    /**
     * Gets uniqueClicks
     *
     * @return int
     */
    public function getUniqueClicks(): int
    {
        return $this->container['uniqueClicks'];
    }

    /**
     * Sets uniqueClicks
     *
     * @param int $uniqueClicks Number of unique clicks for the campaign using the particular browser
     *
     * @return $this
     */
    public function setUniqueClicks(int $uniqueClicks): static
    {
        if (is_null($uniqueClicks)) {
            throw new InvalidArgumentException('non-nullable uniqueClicks cannot be null');
        }
        $this->container['uniqueClicks'] = $uniqueClicks;

        return $this;
    }

    /**
     * Gets viewed
     *
     * @return int
     */
    public function getViewed(): int
    {
        return $this->container['viewed'];
    }

    /**
     * Sets viewed
     *
     * @param int $viewed Number of openings for the campaign using the particular browser
     *
     * @return $this
     */
    public function setViewed(int $viewed): static
    {
        if (is_null($viewed)) {
            throw new InvalidArgumentException('non-nullable viewed cannot be null');
        }
        $this->container['viewed'] = $viewed;

        return $this;
    }

    /**
     * Gets uniqueViews
     *
     * @return int
     */
    public function getUniqueViews(): int
    {
        return $this->container['uniqueViews'];
    }

    /**
     * Sets uniqueViews
     *
     * @param int $uniqueViews Number of unique openings for the campaign using the particular browser
     *
     * @return $this
     */
    public function setUniqueViews(int $uniqueViews): static
    {
        if (is_null($uniqueViews)) {
            throw new InvalidArgumentException('non-nullable uniqueViews cannot be null');
        }
        $this->container['uniqueViews'] = $uniqueViews;

        return $this;
    }
}


