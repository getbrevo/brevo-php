<?php
/**
 * NoteData
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * NoteData Class Doc Comment
 *
 * @description Note data to be saved
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class NoteData extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'NoteData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'text' => 'string',
        'contactIds' => 'int[]',
        'dealIds' => 'string[]',
        'companyIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'text' => null,
        'contactIds' => null,
        'dealIds' => null,
        'companyIds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'text' => false,
        'contactIds' => false,
        'dealIds' => false,
        'companyIds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'text' => 'text',
        'contactIds' => 'contactIds',
        'dealIds' => 'dealIds',
        'companyIds' => 'companyIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'text' => 'setText',
        'contactIds' => 'setContactIds',
        'dealIds' => 'setDealIds',
        'companyIds' => 'setCompanyIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'text' => 'getText',
        'contactIds' => 'getContactIds',
        'dealIds' => 'getDealIds',
        'companyIds' => 'getCompanyIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('contactIds', $data ?? [], null);
        $this->setIfExists('dealIds', $data ?? [], null);
        $this->setIfExists('companyIds', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ((mb_strlen($this->container['text']) > 3000)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be smaller than or equal to 3000.";
        }

        if ((mb_strlen($this->container['text']) < 1)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText(): string
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Text content of a note
     *
     * @return $this
     */
    public function setText(string $text): static
    {
        if (is_null($text)) {
            throw new InvalidArgumentException('non-nullable text cannot be null');
        }
        if ((mb_strlen($text) > 3000)) {
            throw new InvalidArgumentException('invalid length for $text when calling NoteData., must be smaller than or equal to 3000.');
        }
        if ((mb_strlen($text) < 1)) {
            throw new InvalidArgumentException('invalid length for $text when calling NoteData., must be bigger than or equal to 1.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets contactIds
     *
     * @return int[]|null
     */
    public function getContactIds(): ?array
    {
        return $this->container['contactIds'];
    }

    /**
     * Sets contactIds
     *
     * @param int[]|null $contactIds Contact Ids linked to a note
     *
     * @return $this
     */
    public function setContactIds(?array $contactIds): static
    {
        if (is_null($contactIds)) {
            throw new InvalidArgumentException('non-nullable contactIds cannot be null');
        }
        $this->container['contactIds'] = $contactIds;

        return $this;
    }

    /**
     * Gets dealIds
     *
     * @return string[]|null
     */
    public function getDealIds(): ?array
    {
        return $this->container['dealIds'];
    }

    /**
     * Sets dealIds
     *
     * @param string[]|null $dealIds Deal Ids linked to a note
     *
     * @return $this
     */
    public function setDealIds(?array $dealIds): static
    {
        if (is_null($dealIds)) {
            throw new InvalidArgumentException('non-nullable dealIds cannot be null');
        }
        $this->container['dealIds'] = $dealIds;

        return $this;
    }

    /**
     * Gets companyIds
     *
     * @return string[]|null
     */
    public function getCompanyIds(): ?array
    {
        return $this->container['companyIds'];
    }

    /**
     * Sets companyIds
     *
     * @param string[]|null $companyIds Company Ids linked to a note
     *
     * @return $this
     */
    public function setCompanyIds(?array $companyIds): static
    {
        if (is_null($companyIds)) {
            throw new InvalidArgumentException('non-nullable companyIds cannot be null');
        }
        $this->container['companyIds'] = $companyIds;

        return $this;
    }
}


