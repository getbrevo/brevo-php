<?php
/**
 * Task
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @description Task Details
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Task extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taskTypeId' => 'string',
        'name' => 'string',
        'id' => 'string',
        'contactsIds' => 'int[]',
        'dealsIds' => 'string[]',
        'companiesIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taskTypeId' => null,
        'name' => null,
        'id' => null,
        'contactsIds' => null,
        'dealsIds' => null,
        'companiesIds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taskTypeId' => false,
        'name' => false,
        'id' => false,
        'contactsIds' => false,
        'dealsIds' => false,
        'companiesIds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taskTypeId' => 'taskTypeId',
        'name' => 'name',
        'id' => 'id',
        'contactsIds' => 'contactsIds',
        'dealsIds' => 'dealsIds',
        'companiesIds' => 'companiesIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taskTypeId' => 'setTaskTypeId',
        'name' => 'setName',
        'id' => 'setId',
        'contactsIds' => 'setContactsIds',
        'dealsIds' => 'setDealsIds',
        'companiesIds' => 'setCompaniesIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taskTypeId' => 'getTaskTypeId',
        'name' => 'getName',
        'id' => 'getId',
        'contactsIds' => 'getContactsIds',
        'dealsIds' => 'getDealsIds',
        'companiesIds' => 'getCompaniesIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('taskTypeId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('contactsIds', $data ?? [], null);
        $this->setIfExists('dealsIds', $data ?? [], null);
        $this->setIfExists('companiesIds', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['taskTypeId'] === null) {
            $invalidProperties[] = "'taskTypeId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets taskTypeId
     *
     * @return string
     */
    public function getTaskTypeId(): string
    {
        return $this->container['taskTypeId'];
    }

    /**
     * Sets taskTypeId
     *
     * @param string $taskTypeId Id for type of task e.g Call / Email / Meeting etc.
     *
     * @return $this
     */
    public function setTaskTypeId(string $taskTypeId): static
    {
        if (is_null($taskTypeId)) {
            throw new InvalidArgumentException('non-nullable taskTypeId cannot be null');
        }
        $this->container['taskTypeId'] = $taskTypeId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of task
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique task id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contactsIds
     *
     * @return int[]|null
     */
    public function getContactsIds(): ?array
    {
        return $this->container['contactsIds'];
    }

    /**
     * Sets contactsIds
     *
     * @param int[]|null $contactsIds Contact ids for contacts linked to this task
     *
     * @return $this
     */
    public function setContactsIds(?array $contactsIds): static
    {
        if (is_null($contactsIds)) {
            throw new InvalidArgumentException('non-nullable contactsIds cannot be null');
        }
        $this->container['contactsIds'] = $contactsIds;

        return $this;
    }

    /**
     * Gets dealsIds
     *
     * @return string[]|null
     */
    public function getDealsIds(): ?array
    {
        return $this->container['dealsIds'];
    }

    /**
     * Sets dealsIds
     *
     * @param string[]|null $dealsIds Deal ids for deals a task is linked to
     *
     * @return $this
     */
    public function setDealsIds(?array $dealsIds): static
    {
        if (is_null($dealsIds)) {
            throw new InvalidArgumentException('non-nullable dealsIds cannot be null');
        }
        $this->container['dealsIds'] = $dealsIds;

        return $this;
    }

    /**
     * Gets companiesIds
     *
     * @return string[]|null
     */
    public function getCompaniesIds(): ?array
    {
        return $this->container['companiesIds'];
    }

    /**
     * Sets companiesIds
     *
     * @param string[]|null $companiesIds Companies ids for companies a task is linked to
     *
     * @return $this
     */
    public function setCompaniesIds(?array $companiesIds): static
    {
        if (is_null($companiesIds)) {
            throw new InvalidArgumentException('non-nullable companiesIds cannot be null');
        }
        $this->container['companiesIds'] = $companiesIds;

        return $this;
    }
}


