<?php
/**
 * SendSmtpEmailMessageVersionsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * SendSmtpEmailMessageVersionsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SendSmtpEmailMessageVersionsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'sendSmtpEmail_messageVersions_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'to' => '\Brevo\Client\Models\SendSmtpEmailToInner[]',
        'params' => 'array<string,mixed>',
        'bcc' => '\Brevo\Client\Models\SendSmtpEmailBccInner[]',
        'cc' => '\Brevo\Client\Models\SendSmtpEmailCcInner[]',
        'replyTo' => '\Brevo\Client\Models\SendSmtpEmailReplyTo',
        'subject' => 'string',
        'htmlContent' => 'string',
        'textContent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'to' => null,
        'params' => null,
        'bcc' => null,
        'cc' => null,
        'replyTo' => null,
        'subject' => null,
        'htmlContent' => null,
        'textContent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'to' => false,
        'params' => false,
        'bcc' => false,
        'cc' => false,
        'replyTo' => false,
        'subject' => false,
        'htmlContent' => false,
        'textContent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'to' => 'to',
        'params' => 'params',
        'bcc' => 'bcc',
        'cc' => 'cc',
        'replyTo' => 'replyTo',
        'subject' => 'subject',
        'htmlContent' => 'htmlContent',
        'textContent' => 'textContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'to' => 'setTo',
        'params' => 'setParams',
        'bcc' => 'setBcc',
        'cc' => 'setCc',
        'replyTo' => 'setReplyTo',
        'subject' => 'setSubject',
        'htmlContent' => 'setHtmlContent',
        'textContent' => 'setTextContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'to' => 'getTo',
        'params' => 'getParams',
        'bcc' => 'getBcc',
        'cc' => 'getCc',
        'replyTo' => 'getReplyTo',
        'subject' => 'getSubject',
        'htmlContent' => 'getHtmlContent',
        'textContent' => 'getTextContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
        $this->setIfExists('bcc', $data ?? [], null);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('replyTo', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('htmlContent', $data ?? [], null);
        $this->setIfExists('textContent', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets to
     *
     * @return \Brevo\Client\Models\SendSmtpEmailToInner[]
     */
    public function getTo(): array
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \Brevo\Client\Models\SendSmtpEmailToInner[] $to List of email addresses and names (_optional_) of the recipients. For example, **[{\"name\":\"Jimmy\", \"email\":\"jimmy98@example.com\"}, {\"name\":\"Joe\", \"email\":\"joe@example.com\"}]**
     *
     * @return $this
     */
    public function setTo(array $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets params
     *
     * @return array<string,mixed>|null
     */
    public function getParams(): ?array
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param array<string,mixed>|null $params Pass the set of attributes to customize the template. For example, **{\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}**. It's **considered only if template is in New Template Language format**.
     *
     * @return $this
     */
    public function setParams(?array $params): static
    {
        if (is_null($params)) {
            throw new InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets bcc
     *
     * @return \Brevo\Client\Models\SendSmtpEmailBccInner[]|null
     */
    public function getBcc(): ?array
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     *
     * @param \Brevo\Client\Models\SendSmtpEmailBccInner[]|null $bcc List of email addresses and names (_optional_) of the recipients in bcc
     *
     * @return $this
     */
    public function setBcc(?array $bcc): static
    {
        if (is_null($bcc)) {
            throw new InvalidArgumentException('non-nullable bcc cannot be null');
        }
        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return \Brevo\Client\Models\SendSmtpEmailCcInner[]|null
     */
    public function getCc(): ?array
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param \Brevo\Client\Models\SendSmtpEmailCcInner[]|null $cc List of email addresses and names (_optional_) of the recipients in cc
     *
     * @return $this
     */
    public function setCc(?array $cc): static
    {
        if (is_null($cc)) {
            throw new InvalidArgumentException('non-nullable cc cannot be null');
        }
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets replyTo
     *
     * @return \Brevo\Client\Models\SendSmtpEmailReplyTo|null
     */
    public function getReplyTo(): ?\Brevo\Client\Models\SendSmtpEmailReplyTo
    {
        return $this->container['replyTo'];
    }

    /**
     * Sets replyTo
     *
     * @param \Brevo\Client\Models\SendSmtpEmailReplyTo|null $replyTo replyTo
     *
     * @return $this
     */
    public function setReplyTo(?\Brevo\Client\Models\SendSmtpEmailReplyTo $replyTo): static
    {
        if (is_null($replyTo)) {
            throw new InvalidArgumentException('non-nullable replyTo cannot be null');
        }
        $this->container['replyTo'] = $replyTo;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject(): ?string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Custom subject specific to message version
     *
     * @return $this
     */
    public function setSubject(?string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets htmlContent
     *
     * @return string|null
     */
    public function getHtmlContent(): ?string
    {
        return $this->container['htmlContent'];
    }

    /**
     * Sets htmlContent
     *
     * @param string|null $htmlContent HTML body of the message. **Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed**
     *
     * @return $this
     */
    public function setHtmlContent(?string $htmlContent): static
    {
        if (is_null($htmlContent)) {
            throw new InvalidArgumentException('non-nullable htmlContent cannot be null');
        }
        $this->container['htmlContent'] = $htmlContent;

        return $this;
    }

    /**
     * Gets textContent
     *
     * @return string|null
     */
    public function getTextContent(): ?string
    {
        return $this->container['textContent'];
    }

    /**
     * Sets textContent
     *
     * @param string|null $textContent Plain Text body of the message. **Ignored if 'templateId' is passed**
     *
     * @return $this
     */
    public function setTextContent(?string $textContent): static
    {
        if (is_null($textContent)) {
            throw new InvalidArgumentException('non-nullable textContent cannot be null');
        }
        $this->container['textContent'] = $textContent;

        return $this;
    }
}


