<?php
/**
 * GetCampaignStats
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetCampaignStats Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCampaignStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getCampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'uniqueClicks' => 'int',
        'clickers' => 'int',
        'complaints' => 'int',
        'delivered' => 'int',
        'sent' => 'int',
        'softBounces' => 'int',
        'hardBounces' => 'int',
        'uniqueViews' => 'int',
        'trackableViews' => 'int',
        'unsubscriptions' => 'int',
        'viewed' => 'int',
        'listId' => 'int',
        'trackableViewsRate' => 'float',
        'estimatedViews' => 'int',
        'deferred' => 'int',
        'returnBounce' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'uniqueClicks' => 'int64',
        'clickers' => 'int64',
        'complaints' => 'int64',
        'delivered' => 'int64',
        'sent' => 'int64',
        'softBounces' => 'int64',
        'hardBounces' => 'int64',
        'uniqueViews' => 'int64',
        'trackableViews' => 'int64',
        'unsubscriptions' => 'int64',
        'viewed' => 'int64',
        'listId' => 'int64',
        'trackableViewsRate' => 'float',
        'estimatedViews' => 'int64',
        'deferred' => 'int64',
        'returnBounce' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'uniqueClicks' => false,
        'clickers' => false,
        'complaints' => false,
        'delivered' => false,
        'sent' => false,
        'softBounces' => false,
        'hardBounces' => false,
        'uniqueViews' => false,
        'trackableViews' => false,
        'unsubscriptions' => false,
        'viewed' => false,
        'listId' => false,
        'trackableViewsRate' => false,
        'estimatedViews' => false,
        'deferred' => false,
        'returnBounce' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'uniqueClicks' => 'uniqueClicks',
        'clickers' => 'clickers',
        'complaints' => 'complaints',
        'delivered' => 'delivered',
        'sent' => 'sent',
        'softBounces' => 'softBounces',
        'hardBounces' => 'hardBounces',
        'uniqueViews' => 'uniqueViews',
        'trackableViews' => 'trackableViews',
        'unsubscriptions' => 'unsubscriptions',
        'viewed' => 'viewed',
        'listId' => 'listId',
        'trackableViewsRate' => 'trackableViewsRate',
        'estimatedViews' => 'estimatedViews',
        'deferred' => 'deferred',
        'returnBounce' => 'returnBounce'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'uniqueClicks' => 'setUniqueClicks',
        'clickers' => 'setClickers',
        'complaints' => 'setComplaints',
        'delivered' => 'setDelivered',
        'sent' => 'setSent',
        'softBounces' => 'setSoftBounces',
        'hardBounces' => 'setHardBounces',
        'uniqueViews' => 'setUniqueViews',
        'trackableViews' => 'setTrackableViews',
        'unsubscriptions' => 'setUnsubscriptions',
        'viewed' => 'setViewed',
        'listId' => 'setListId',
        'trackableViewsRate' => 'setTrackableViewsRate',
        'estimatedViews' => 'setEstimatedViews',
        'deferred' => 'setDeferred',
        'returnBounce' => 'setReturnBounce'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'uniqueClicks' => 'getUniqueClicks',
        'clickers' => 'getClickers',
        'complaints' => 'getComplaints',
        'delivered' => 'getDelivered',
        'sent' => 'getSent',
        'softBounces' => 'getSoftBounces',
        'hardBounces' => 'getHardBounces',
        'uniqueViews' => 'getUniqueViews',
        'trackableViews' => 'getTrackableViews',
        'unsubscriptions' => 'getUnsubscriptions',
        'viewed' => 'getViewed',
        'listId' => 'getListId',
        'trackableViewsRate' => 'getTrackableViewsRate',
        'estimatedViews' => 'getEstimatedViews',
        'deferred' => 'getDeferred',
        'returnBounce' => 'getReturnBounce'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uniqueClicks', $data ?? [], null);
        $this->setIfExists('clickers', $data ?? [], null);
        $this->setIfExists('complaints', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('softBounces', $data ?? [], null);
        $this->setIfExists('hardBounces', $data ?? [], null);
        $this->setIfExists('uniqueViews', $data ?? [], null);
        $this->setIfExists('trackableViews', $data ?? [], null);
        $this->setIfExists('unsubscriptions', $data ?? [], null);
        $this->setIfExists('viewed', $data ?? [], null);
        $this->setIfExists('listId', $data ?? [], null);
        $this->setIfExists('trackableViewsRate', $data ?? [], null);
        $this->setIfExists('estimatedViews', $data ?? [], null);
        $this->setIfExists('deferred', $data ?? [], null);
        $this->setIfExists('returnBounce', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['uniqueClicks'] === null) {
            $invalidProperties[] = "'uniqueClicks' can't be null";
        }
        if ($this->container['clickers'] === null) {
            $invalidProperties[] = "'clickers' can't be null";
        }
        if ($this->container['complaints'] === null) {
            $invalidProperties[] = "'complaints' can't be null";
        }
        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['sent'] === null) {
            $invalidProperties[] = "'sent' can't be null";
        }
        if ($this->container['softBounces'] === null) {
            $invalidProperties[] = "'softBounces' can't be null";
        }
        if ($this->container['hardBounces'] === null) {
            $invalidProperties[] = "'hardBounces' can't be null";
        }
        if ($this->container['uniqueViews'] === null) {
            $invalidProperties[] = "'uniqueViews' can't be null";
        }
        if ($this->container['trackableViews'] === null) {
            $invalidProperties[] = "'trackableViews' can't be null";
        }
        if ($this->container['unsubscriptions'] === null) {
            $invalidProperties[] = "'unsubscriptions' can't be null";
        }
        if ($this->container['viewed'] === null) {
            $invalidProperties[] = "'viewed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets uniqueClicks
     *
     * @return int
     */
    public function getUniqueClicks(): int
    {
        return $this->container['uniqueClicks'];
    }

    /**
     * Sets uniqueClicks
     *
     * @param int $uniqueClicks Number of unique clicks for the campaign
     *
     * @return $this
     */
    public function setUniqueClicks(int $uniqueClicks): static
    {
        if (is_null($uniqueClicks)) {
            throw new InvalidArgumentException('non-nullable uniqueClicks cannot be null');
        }
        $this->container['uniqueClicks'] = $uniqueClicks;

        return $this;
    }

    /**
     * Gets clickers
     *
     * @return int
     */
    public function getClickers(): int
    {
        return $this->container['clickers'];
    }

    /**
     * Sets clickers
     *
     * @param int $clickers Number of total clicks for the campaign
     *
     * @return $this
     */
    public function setClickers(int $clickers): static
    {
        if (is_null($clickers)) {
            throw new InvalidArgumentException('non-nullable clickers cannot be null');
        }
        $this->container['clickers'] = $clickers;

        return $this;
    }

    /**
     * Gets complaints
     *
     * @return int
     */
    public function getComplaints(): int
    {
        return $this->container['complaints'];
    }

    /**
     * Sets complaints
     *
     * @param int $complaints Number of complaints (Spam reports) for the campaign
     *
     * @return $this
     */
    public function setComplaints(int $complaints): static
    {
        if (is_null($complaints)) {
            throw new InvalidArgumentException('non-nullable complaints cannot be null');
        }
        $this->container['complaints'] = $complaints;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int
     */
    public function getDelivered(): int
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int $delivered Number of delivered emails for the campaign
     *
     * @return $this
     */
    public function setDelivered(int $delivered): static
    {
        if (is_null($delivered)) {
            throw new InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return int
     */
    public function getSent(): int
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param int $sent Number of sent emails for the campaign
     *
     * @return $this
     */
    public function setSent(int $sent): static
    {
        if (is_null($sent)) {
            throw new InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets softBounces
     *
     * @return int
     */
    public function getSoftBounces(): int
    {
        return $this->container['softBounces'];
    }

    /**
     * Sets softBounces
     *
     * @param int $softBounces Number of softbounce for the campaign
     *
     * @return $this
     */
    public function setSoftBounces(int $softBounces): static
    {
        if (is_null($softBounces)) {
            throw new InvalidArgumentException('non-nullable softBounces cannot be null');
        }
        $this->container['softBounces'] = $softBounces;

        return $this;
    }

    /**
     * Gets hardBounces
     *
     * @return int
     */
    public function getHardBounces(): int
    {
        return $this->container['hardBounces'];
    }

    /**
     * Sets hardBounces
     *
     * @param int $hardBounces Number of harbounce for the campaign
     *
     * @return $this
     */
    public function setHardBounces(int $hardBounces): static
    {
        if (is_null($hardBounces)) {
            throw new InvalidArgumentException('non-nullable hardBounces cannot be null');
        }
        $this->container['hardBounces'] = $hardBounces;

        return $this;
    }

    /**
     * Gets uniqueViews
     *
     * @return int
     */
    public function getUniqueViews(): int
    {
        return $this->container['uniqueViews'];
    }

    /**
     * Sets uniqueViews
     *
     * @param int $uniqueViews Number of unique openings for the campaign
     *
     * @return $this
     */
    public function setUniqueViews(int $uniqueViews): static
    {
        if (is_null($uniqueViews)) {
            throw new InvalidArgumentException('non-nullable uniqueViews cannot be null');
        }
        $this->container['uniqueViews'] = $uniqueViews;

        return $this;
    }

    /**
     * Gets trackableViews
     *
     * @return int
     */
    public function getTrackableViews(): int
    {
        return $this->container['trackableViews'];
    }

    /**
     * Sets trackableViews
     *
     * @param int $trackableViews Recipients without any privacy protection option enabled in their email client
     *
     * @return $this
     */
    public function setTrackableViews(int $trackableViews): static
    {
        if (is_null($trackableViews)) {
            throw new InvalidArgumentException('non-nullable trackableViews cannot be null');
        }
        $this->container['trackableViews'] = $trackableViews;

        return $this;
    }

    /**
     * Gets unsubscriptions
     *
     * @return int
     */
    public function getUnsubscriptions(): int
    {
        return $this->container['unsubscriptions'];
    }

    /**
     * Sets unsubscriptions
     *
     * @param int $unsubscriptions Number of unsubscription for the campaign
     *
     * @return $this
     */
    public function setUnsubscriptions(int $unsubscriptions): static
    {
        if (is_null($unsubscriptions)) {
            throw new InvalidArgumentException('non-nullable unsubscriptions cannot be null');
        }
        $this->container['unsubscriptions'] = $unsubscriptions;

        return $this;
    }

    /**
     * Gets viewed
     *
     * @return int
     */
    public function getViewed(): int
    {
        return $this->container['viewed'];
    }

    /**
     * Sets viewed
     *
     * @param int $viewed Number of openings for the campaign
     *
     * @return $this
     */
    public function setViewed(int $viewed): static
    {
        if (is_null($viewed)) {
            throw new InvalidArgumentException('non-nullable viewed cannot be null');
        }
        $this->container['viewed'] = $viewed;

        return $this;
    }

    /**
     * Gets listId
     *
     * @return int|null
     */
    public function getListId(): ?int
    {
        return $this->container['listId'];
    }

    /**
     * Sets listId
     *
     * @param int|null $listId List Id of email campaign (only in case of get email campaign(s)(not for global stats))
     *
     * @return $this
     */
    public function setListId(?int $listId): static
    {
        if (is_null($listId)) {
            throw new InvalidArgumentException('non-nullable listId cannot be null');
        }
        $this->container['listId'] = $listId;

        return $this;
    }

    /**
     * Gets trackableViewsRate
     *
     * @return float|null
     */
    public function getTrackableViewsRate(): ?float
    {
        return $this->container['trackableViewsRate'];
    }

    /**
     * Sets trackableViewsRate
     *
     * @param float|null $trackableViewsRate Rate of recipients without any privacy protection option enabled in their email client
     *
     * @return $this
     */
    public function setTrackableViewsRate(?float $trackableViewsRate): static
    {
        if (is_null($trackableViewsRate)) {
            throw new InvalidArgumentException('non-nullable trackableViewsRate cannot be null');
        }
        $this->container['trackableViewsRate'] = $trackableViewsRate;

        return $this;
    }

    /**
     * Gets estimatedViews
     *
     * @return int|null
     */
    public function getEstimatedViews(): ?int
    {
        return $this->container['estimatedViews'];
    }

    /**
     * Sets estimatedViews
     *
     * @param int|null $estimatedViews Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
     *
     * @return $this
     */
    public function setEstimatedViews(?int $estimatedViews): static
    {
        if (is_null($estimatedViews)) {
            throw new InvalidArgumentException('non-nullable estimatedViews cannot be null');
        }
        $this->container['estimatedViews'] = $estimatedViews;

        return $this;
    }

    /**
     * Gets deferred
     *
     * @return int|null
     */
    public function getDeferred(): ?int
    {
        return $this->container['deferred'];
    }

    /**
     * Sets deferred
     *
     * @param int|null $deferred Number of deferred emails for the campaign
     *
     * @return $this
     */
    public function setDeferred(?int $deferred): static
    {
        if (is_null($deferred)) {
            throw new InvalidArgumentException('non-nullable deferred cannot be null');
        }
        $this->container['deferred'] = $deferred;

        return $this;
    }

    /**
     * Gets returnBounce
     *
     * @return int|null
     */
    public function getReturnBounce(): ?int
    {
        return $this->container['returnBounce'];
    }

    /**
     * Sets returnBounce
     *
     * @param int|null $returnBounce Total number of non-delivered campaigns for a particular campaign id.
     *
     * @return $this
     */
    public function setReturnBounce(?int $returnBounce): static
    {
        if (is_null($returnBounce)) {
            throw new InvalidArgumentException('non-nullable returnBounce cannot be null');
        }
        $this->container['returnBounce'] = $returnBounce;

        return $this;
    }
}


