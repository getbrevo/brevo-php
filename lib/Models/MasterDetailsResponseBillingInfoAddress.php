<?php
/**
 * MasterDetailsResponseBillingInfoAddress
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * MasterDetailsResponseBillingInfoAddress Class Doc Comment
 *
 * @description Billing address of master account
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MasterDetailsResponseBillingInfoAddress extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'masterDetailsResponse_billingInfo_address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'streetAddress' => 'string',
        'locality' => 'string',
        'postalCode' => 'string',
        'stateCode' => 'string',
        'countryCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'streetAddress' => null,
        'locality' => null,
        'postalCode' => null,
        'stateCode' => null,
        'countryCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'streetAddress' => false,
        'locality' => false,
        'postalCode' => false,
        'stateCode' => false,
        'countryCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'streetAddress' => 'streetAddress',
        'locality' => 'locality',
        'postalCode' => 'postalCode',
        'stateCode' => 'stateCode',
        'countryCode' => 'countryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'streetAddress' => 'setStreetAddress',
        'locality' => 'setLocality',
        'postalCode' => 'setPostalCode',
        'stateCode' => 'setStateCode',
        'countryCode' => 'setCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'streetAddress' => 'getStreetAddress',
        'locality' => 'getLocality',
        'postalCode' => 'getPostalCode',
        'stateCode' => 'getStateCode',
        'countryCode' => 'getCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('streetAddress', $data ?? [], null);
        $this->setIfExists('locality', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('stateCode', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets streetAddress
     *
     * @return string|null
     */
    public function getStreetAddress(): ?string
    {
        return $this->container['streetAddress'];
    }

    /**
     * Sets streetAddress
     *
     * @param string|null $streetAddress Street address
     *
     * @return $this
     */
    public function setStreetAddress(?string $streetAddress): static
    {
        if (is_null($streetAddress)) {
            throw new InvalidArgumentException('non-nullable streetAddress cannot be null');
        }
        $this->container['streetAddress'] = $streetAddress;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality(): ?string
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality Locality
     *
     * @return $this
     */
    public function setLocality(?string $locality): static
    {
        if (is_null($locality)) {
            throw new InvalidArgumentException('non-nullable locality cannot be null');
        }
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode(): ?string
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode Postal code
     *
     * @return $this
     */
    public function setPostalCode(?string $postalCode): static
    {
        if (is_null($postalCode)) {
            throw new InvalidArgumentException('non-nullable postalCode cannot be null');
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode(): ?string
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode State code
     *
     * @return $this
     */
    public function setStateCode(?string $stateCode): static
    {
        if (is_null($stateCode)) {
            throw new InvalidArgumentException('non-nullable stateCode cannot be null');
        }
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode(): ?string
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode Country code
     *
     * @return $this
     */
    public function setCountryCode(?string $countryCode): static
    {
        if (is_null($countryCode)) {
            throw new InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }
}


