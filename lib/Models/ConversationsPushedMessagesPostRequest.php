<?php
/**
 * ConversationsPushedMessagesPostRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * ConversationsPushedMessagesPostRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ConversationsPushedMessagesPostRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_conversations_pushedMessages_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'visitorId' => 'mixed',
        'text' => 'mixed',
        'agentId' => 'mixed',
        'groupId' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'visitorId' => null,
        'text' => null,
        'agentId' => null,
        'groupId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'visitorId' => true,
        'text' => true,
        'agentId' => true,
        'groupId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'visitorId' => 'visitorId',
        'text' => 'text',
        'agentId' => 'agentId',
        'groupId' => 'groupId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'visitorId' => 'setVisitorId',
        'text' => 'setText',
        'agentId' => 'setAgentId',
        'groupId' => 'setGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'visitorId' => 'getVisitorId',
        'text' => 'getText',
        'agentId' => 'getAgentId',
        'groupId' => 'getGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('visitorId', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('agentId', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['visitorId'] === null) {
            $invalidProperties[] = "'visitorId' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets visitorId
     *
     * @return mixed
     */
    public function getVisitorId(): mixed
    {
        return $this->container['visitorId'];
    }

    /**
     * Sets visitorId
     *
     * @param mixed $visitorId visitor’s ID received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a> or generated by you to <a href=\"https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users\">bind existing user account to Conversations</a>
     *
     * @return $this
     */
    public function setVisitorId(mixed $visitorId): static
    {
        if (is_null($visitorId)) {
            array_push($this->openAPINullablesSetToNull, 'visitorId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visitorId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visitorId'] = $visitorId;

        return $this;
    }

    /**
     * Gets text
     *
     * @return mixed
     */
    public function getText(): mixed
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param mixed $text message text
     *
     * @return $this
     */
    public function setText(mixed $text): static
    {
        if (is_null($text)) {
            array_push($this->openAPINullablesSetToNull, 'text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets agentId
     *
     * @return mixed|null
     */
    public function getAgentId(): mixed
    {
        return $this->container['agentId'];
    }

    /**
     * Sets agentId
     *
     * @param mixed|null $agentId agent ID. It can be found on agent’s page or received <a href=\"https://developers.brevo.com/docs/conversations-webhooks\">from a webhook</a>.
     *
     * @return $this
     */
    public function setAgentId(mixed $agentId): static
    {
        if (is_null($agentId)) {
            array_push($this->openAPINullablesSetToNull, 'agentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agentId'] = $agentId;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return mixed|null
     */
    public function getGroupId(): mixed
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param mixed|null $groupId group ID. It can be found on group’s page.
     *
     * @return $this
     */
    public function setGroupId(mixed $groupId): static
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }
}


