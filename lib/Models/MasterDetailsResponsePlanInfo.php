<?php
/**
 * MasterDetailsResponsePlanInfo
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * MasterDetailsResponsePlanInfo Class Doc Comment
 *
 * @description Plan details
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MasterDetailsResponsePlanInfo extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'masterDetailsResponse_planInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'currencyCode' => 'string',
        'nextBillingAt' => 'int',
        'price' => 'float',
        'planPeriod' => 'string',
        'subAccounts' => 'int',
        'features' => '\Brevo\Client\Models\MasterDetailsResponsePlanInfoFeaturesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'currencyCode' => null,
        'nextBillingAt' => 'int64',
        'price' => null,
        'planPeriod' => null,
        'subAccounts' => null,
        'features' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'currencyCode' => false,
        'nextBillingAt' => false,
        'price' => false,
        'planPeriod' => false,
        'subAccounts' => false,
        'features' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'currencyCode' => 'currencyCode',
        'nextBillingAt' => 'nextBillingAt',
        'price' => 'price',
        'planPeriod' => 'planPeriod',
        'subAccounts' => 'subAccounts',
        'features' => 'features'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'currencyCode' => 'setCurrencyCode',
        'nextBillingAt' => 'setNextBillingAt',
        'price' => 'setPrice',
        'planPeriod' => 'setPlanPeriod',
        'subAccounts' => 'setSubAccounts',
        'features' => 'setFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'currencyCode' => 'getCurrencyCode',
        'nextBillingAt' => 'getNextBillingAt',
        'price' => 'getPrice',
        'planPeriod' => 'getPlanPeriod',
        'subAccounts' => 'getSubAccounts',
        'features' => 'getFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const PLAN_PERIOD_MONTH = 'month';
    public const PLAN_PERIOD_YEAR = 'year';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanPeriodAllowableValues()
    {
        return [
            self::PLAN_PERIOD_MONTH,
            self::PLAN_PERIOD_YEAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currencyCode', $data ?? [], null);
        $this->setIfExists('nextBillingAt', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('planPeriod', $data ?? [], null);
        $this->setIfExists('subAccounts', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlanPeriodAllowableValues();
        if (!is_null($this->container['planPeriod']) && !in_array($this->container['planPeriod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'planPeriod', must be one of '%s'",
                $this->container['planPeriod'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets currencyCode
     *
     * @return string|null
     */
    public function getCurrencyCode(): ?string
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string|null $currencyCode Plan currency
     *
     * @return $this
     */
    public function setCurrencyCode(?string $currencyCode): static
    {
        if (is_null($currencyCode)) {
            throw new InvalidArgumentException('non-nullable currencyCode cannot be null');
        }
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets nextBillingAt
     *
     * @return int|null
     */
    public function getNextBillingAt(): ?int
    {
        return $this->container['nextBillingAt'];
    }

    /**
     * Sets nextBillingAt
     *
     * @param int|null $nextBillingAt Timestamp of next billing date
     *
     * @return $this
     */
    public function setNextBillingAt(?int $nextBillingAt): static
    {
        if (is_null($nextBillingAt)) {
            throw new InvalidArgumentException('non-nullable nextBillingAt cannot be null');
        }
        $this->container['nextBillingAt'] = $nextBillingAt;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Plan amount
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets planPeriod
     *
     * @return string|null
     */
    public function getPlanPeriod(): ?string
    {
        return $this->container['planPeriod'];
    }

    /**
     * Sets planPeriod
     *
     * @param string|null $planPeriod Plan period type
     *
     * @return $this
     */
    public function setPlanPeriod(?string $planPeriod): static
    {
        if (is_null($planPeriod)) {
            throw new InvalidArgumentException('non-nullable planPeriod cannot be null');
        }
        $allowedValues = $this->getPlanPeriodAllowableValues();
        if (!in_array($planPeriod, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'planPeriod', must be one of '%s'",
                    $planPeriod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['planPeriod'] = $planPeriod;

        return $this;
    }

    /**
     * Gets subAccounts
     *
     * @return int|null
     */
    public function getSubAccounts(): ?int
    {
        return $this->container['subAccounts'];
    }

    /**
     * Sets subAccounts
     *
     * @param int|null $subAccounts Number of sub-accounts
     *
     * @return $this
     */
    public function setSubAccounts(?int $subAccounts): static
    {
        if (is_null($subAccounts)) {
            throw new InvalidArgumentException('non-nullable subAccounts cannot be null');
        }
        $this->container['subAccounts'] = $subAccounts;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Brevo\Client\Models\MasterDetailsResponsePlanInfoFeaturesInner[]|null
     */
    public function getFeatures(): ?array
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Brevo\Client\Models\MasterDetailsResponsePlanInfoFeaturesInner[]|null $features List of provided features in the plan
     *
     * @return $this
     */
    public function setFeatures(?array $features): static
    {
        if (is_null($features)) {
            throw new InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }
}


