<?php
/**
 * GetSmsCampaignStats
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetSmsCampaignStats Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetSmsCampaignStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getSmsCampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'delivered' => 'int',
        'sent' => 'int',
        'processing' => 'int',
        'softBounces' => 'int',
        'hardBounces' => 'int',
        'unsubscriptions' => 'int',
        'answered' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'delivered' => 'int64',
        'sent' => 'int64',
        'processing' => 'int64',
        'softBounces' => 'int64',
        'hardBounces' => 'int64',
        'unsubscriptions' => 'int64',
        'answered' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'delivered' => false,
        'sent' => false,
        'processing' => false,
        'softBounces' => false,
        'hardBounces' => false,
        'unsubscriptions' => false,
        'answered' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'delivered' => 'delivered',
        'sent' => 'sent',
        'processing' => 'processing',
        'softBounces' => 'softBounces',
        'hardBounces' => 'hardBounces',
        'unsubscriptions' => 'unsubscriptions',
        'answered' => 'answered'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'delivered' => 'setDelivered',
        'sent' => 'setSent',
        'processing' => 'setProcessing',
        'softBounces' => 'setSoftBounces',
        'hardBounces' => 'setHardBounces',
        'unsubscriptions' => 'setUnsubscriptions',
        'answered' => 'setAnswered'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'delivered' => 'getDelivered',
        'sent' => 'getSent',
        'processing' => 'getProcessing',
        'softBounces' => 'getSoftBounces',
        'hardBounces' => 'getHardBounces',
        'unsubscriptions' => 'getUnsubscriptions',
        'answered' => 'getAnswered'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('processing', $data ?? [], null);
        $this->setIfExists('softBounces', $data ?? [], null);
        $this->setIfExists('hardBounces', $data ?? [], null);
        $this->setIfExists('unsubscriptions', $data ?? [], null);
        $this->setIfExists('answered', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['sent'] === null) {
            $invalidProperties[] = "'sent' can't be null";
        }
        if ($this->container['processing'] === null) {
            $invalidProperties[] = "'processing' can't be null";
        }
        if ($this->container['softBounces'] === null) {
            $invalidProperties[] = "'softBounces' can't be null";
        }
        if ($this->container['hardBounces'] === null) {
            $invalidProperties[] = "'hardBounces' can't be null";
        }
        if ($this->container['unsubscriptions'] === null) {
            $invalidProperties[] = "'unsubscriptions' can't be null";
        }
        if ($this->container['answered'] === null) {
            $invalidProperties[] = "'answered' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets delivered
     *
     * @return int
     */
    public function getDelivered(): int
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int $delivered Number of delivered SMS
     *
     * @return $this
     */
    public function setDelivered(int $delivered): static
    {
        if (is_null($delivered)) {
            throw new InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return int
     */
    public function getSent(): int
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param int $sent Number of sent SMS
     *
     * @return $this
     */
    public function setSent(int $sent): static
    {
        if (is_null($sent)) {
            throw new InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets processing
     *
     * @return int
     */
    public function getProcessing(): int
    {
        return $this->container['processing'];
    }

    /**
     * Sets processing
     *
     * @param int $processing Number of processing SMS
     *
     * @return $this
     */
    public function setProcessing(int $processing): static
    {
        if (is_null($processing)) {
            throw new InvalidArgumentException('non-nullable processing cannot be null');
        }
        $this->container['processing'] = $processing;

        return $this;
    }

    /**
     * Gets softBounces
     *
     * @return int
     */
    public function getSoftBounces(): int
    {
        return $this->container['softBounces'];
    }

    /**
     * Sets softBounces
     *
     * @param int $softBounces Number of softbounced SMS
     *
     * @return $this
     */
    public function setSoftBounces(int $softBounces): static
    {
        if (is_null($softBounces)) {
            throw new InvalidArgumentException('non-nullable softBounces cannot be null');
        }
        $this->container['softBounces'] = $softBounces;

        return $this;
    }

    /**
     * Gets hardBounces
     *
     * @return int
     */
    public function getHardBounces(): int
    {
        return $this->container['hardBounces'];
    }

    /**
     * Sets hardBounces
     *
     * @param int $hardBounces Number of hardbounced SMS
     *
     * @return $this
     */
    public function setHardBounces(int $hardBounces): static
    {
        if (is_null($hardBounces)) {
            throw new InvalidArgumentException('non-nullable hardBounces cannot be null');
        }
        $this->container['hardBounces'] = $hardBounces;

        return $this;
    }

    /**
     * Gets unsubscriptions
     *
     * @return int
     */
    public function getUnsubscriptions(): int
    {
        return $this->container['unsubscriptions'];
    }

    /**
     * Sets unsubscriptions
     *
     * @param int $unsubscriptions Number of unsubscription SMS
     *
     * @return $this
     */
    public function setUnsubscriptions(int $unsubscriptions): static
    {
        if (is_null($unsubscriptions)) {
            throw new InvalidArgumentException('non-nullable unsubscriptions cannot be null');
        }
        $this->container['unsubscriptions'] = $unsubscriptions;

        return $this;
    }

    /**
     * Gets answered
     *
     * @return int
     */
    public function getAnswered(): int
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param int $answered Number of replies to the SMS
     *
     * @return $this
     */
    public function setAnswered(int $answered): static
    {
        if (is_null($answered)) {
            throw new InvalidArgumentException('non-nullable answered cannot be null');
        }
        $this->container['answered'] = $answered;

        return $this;
    }
}


