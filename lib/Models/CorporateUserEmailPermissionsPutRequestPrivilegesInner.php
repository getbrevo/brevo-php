<?php
/**
 * CorporateUserEmailPermissionsPutRequestPrivilegesInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CorporateUserEmailPermissionsPutRequestPrivilegesInner Class Doc Comment
 *
 * @description Permission on features
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CorporateUserEmailPermissionsPutRequestPrivilegesInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_corporate_user__email__permissions_put_request_privileges_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'feature' => 'string',
        'permissions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'feature' => null,
        'permissions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'feature' => false,
        'permissions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'feature' => 'feature',
        'permissions' => 'permissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'feature' => 'setFeature',
        'permissions' => 'setPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'feature' => 'getFeature',
        'permissions' => 'getPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const FEATURE_USER_MANAGEMENT = 'user_management';
    public const FEATURE_API = 'api';
    public const FEATURE_MY_PLAN = 'my_plan';
    public const FEATURE_APPS_MANAGEMENT = 'apps_management';
    public const FEATURE_ANALYTICS = 'analytics';
    public const FEATURE_SUB_ORGANIZATION_GROUPS = 'sub_organization_groups';
    public const FEATURE_CREATE_SUB_ORGANIZATIONS = 'create_sub_organizations';
    public const FEATURE_MANAGE_SUB_ORGANIZATIONS = 'manage_sub_organizations';
    public const FEATURE_SECURITY = 'security';
    public const PERMISSIONS_ALL = 'all';
    public const PERMISSIONS_NONE = 'none';
    public const PERMISSIONS_CREATE = 'create';
    public const PERMISSIONS_EDIT_DELETE = 'edit_delete';
    public const PERMISSIONS_CREATE_ALERTS = 'create_alerts';
    public const PERMISSIONS_DOWNLOAD_DATA = 'download_data';
    public const PERMISSIONS_MY_LOOKS = 'my_looks';
    public const PERMISSIONS_EXPLORE_CREATE = 'explore_create';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureAllowableValues()
    {
        return [
            self::FEATURE_USER_MANAGEMENT,
            self::FEATURE_API,
            self::FEATURE_MY_PLAN,
            self::FEATURE_APPS_MANAGEMENT,
            self::FEATURE_ANALYTICS,
            self::FEATURE_SUB_ORGANIZATION_GROUPS,
            self::FEATURE_CREATE_SUB_ORGANIZATIONS,
            self::FEATURE_MANAGE_SUB_ORGANIZATIONS,
            self::FEATURE_SECURITY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionsAllowableValues()
    {
        return [
            self::PERMISSIONS_ALL,
            self::PERMISSIONS_NONE,
            self::PERMISSIONS_CREATE,
            self::PERMISSIONS_EDIT_DELETE,
            self::PERMISSIONS_CREATE_ALERTS,
            self::PERMISSIONS_DOWNLOAD_DATA,
            self::PERMISSIONS_MY_LOOKS,
            self::PERMISSIONS_EXPLORE_CREATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('feature', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getFeatureAllowableValues();
        if (!is_null($this->container['feature']) && !in_array($this->container['feature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature', must be one of '%s'",
                $this->container['feature'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets feature
     *
     * @return string|null
     */
    public function getFeature(): ?string
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param string|null $feature feature name
     *
     * @return $this
     */
    public function setFeature(?string $feature): static
    {
        if (is_null($feature)) {
            throw new InvalidArgumentException('non-nullable feature cannot be null');
        }
        $allowedValues = $this->getFeatureAllowableValues();
        if (!in_array($feature, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature', must be one of '%s'",
                    $feature,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]|null
     */
    public function getPermissions(): ?array
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[]|null $permissions Permission for the feature
     *
     * @return $this
     */
    public function setPermissions(?array $permissions): static
    {
        if (is_null($permissions)) {
            throw new InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $allowedValues = $this->getPermissionsAllowableValues();
        if (array_diff($permissions, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }
}


