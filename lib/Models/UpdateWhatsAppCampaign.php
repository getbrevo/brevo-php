<?php
/**
 * UpdateWhatsAppCampaign
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * UpdateWhatsAppCampaign Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UpdateWhatsAppCampaign extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'updateWhatsAppCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'campaignName' => 'string',
        'campaignStatus' => 'string',
        'rescheduleFor' => 'string',
        'recipients' => '\Brevo\Client\Models\CreateWhatsAppCampaignRecipients'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'campaignName' => null,
        'campaignStatus' => null,
        'rescheduleFor' => null,
        'recipients' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'campaignName' => false,
        'campaignStatus' => false,
        'rescheduleFor' => false,
        'recipients' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'campaignName' => 'campaignName',
        'campaignStatus' => 'campaignStatus',
        'rescheduleFor' => 'rescheduleFor',
        'recipients' => 'recipients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'campaignName' => 'setCampaignName',
        'campaignStatus' => 'setCampaignStatus',
        'rescheduleFor' => 'setRescheduleFor',
        'recipients' => 'setRecipients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'campaignName' => 'getCampaignName',
        'campaignStatus' => 'getCampaignStatus',
        'rescheduleFor' => 'getRescheduleFor',
        'recipients' => 'getRecipients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const CAMPAIGN_STATUS_SCHEDULED = 'scheduled';
    public const CAMPAIGN_STATUS_SUSPENDED = 'suspended';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCampaignStatusAllowableValues()
    {
        return [
            self::CAMPAIGN_STATUS_SCHEDULED,
            self::CAMPAIGN_STATUS_SUSPENDED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campaignName', $data ?? [], null);
        $this->setIfExists('campaignStatus', $data ?? [], 'scheduled');
        $this->setIfExists('rescheduleFor', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getCampaignStatusAllowableValues();
        if (!is_null($this->container['campaignStatus']) && !in_array($this->container['campaignStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'campaignStatus', must be one of '%s'",
                $this->container['campaignStatus'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets campaignName
     *
     * @return string|null
     */
    public function getCampaignName(): ?string
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName
     *
     * @param string|null $campaignName Name of the campaign
     *
     * @return $this
     */
    public function setCampaignName(?string $campaignName): static
    {
        if (is_null($campaignName)) {
            throw new InvalidArgumentException('non-nullable campaignName cannot be null');
        }
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets campaignStatus
     *
     * @return string|null
     */
    public function getCampaignStatus(): ?string
    {
        return $this->container['campaignStatus'];
    }

    /**
     * Sets campaignStatus
     *
     * @param string|null $campaignStatus Status of the campaign
     *
     * @return $this
     */
    public function setCampaignStatus(?string $campaignStatus): static
    {
        if (is_null($campaignStatus)) {
            throw new InvalidArgumentException('non-nullable campaignStatus cannot be null');
        }
        $allowedValues = $this->getCampaignStatusAllowableValues();
        if (!in_array($campaignStatus, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'campaignStatus', must be one of '%s'",
                    $campaignStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['campaignStatus'] = $campaignStatus;

        return $this;
    }

    /**
     * Gets rescheduleFor
     *
     * @return string|null
     */
    public function getRescheduleFor(): ?string
    {
        return $this->container['rescheduleFor'];
    }

    /**
     * Sets rescheduleFor
     *
     * @param string|null $rescheduleFor Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign.
     *
     * @return $this
     */
    public function setRescheduleFor(?string $rescheduleFor): static
    {
        if (is_null($rescheduleFor)) {
            throw new InvalidArgumentException('non-nullable rescheduleFor cannot be null');
        }
        $this->container['rescheduleFor'] = $rescheduleFor;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \Brevo\Client\Models\CreateWhatsAppCampaignRecipients|null
     */
    public function getRecipients(): ?\Brevo\Client\Models\CreateWhatsAppCampaignRecipients
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \Brevo\Client\Models\CreateWhatsAppCampaignRecipients|null $recipients recipients
     *
     * @return $this
     */
    public function setRecipients(?\Brevo\Client\Models\CreateWhatsAppCampaignRecipients $recipients): static
    {
        if (is_null($recipients)) {
            throw new InvalidArgumentException('non-nullable recipients cannot be null');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }
}


