<?php
/**
 * GetWhatsappEventReportEventsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetWhatsappEventReportEventsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetWhatsappEventReportEventsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getWhatsappEventReport_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'contactNumber' => 'string',
        'date' => 'string',
        'messageId' => 'string',
        'event' => 'string',
        'senderNumber' => 'string',
        'reason' => 'string',
        'body' => 'string',
        'mediaUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'contactNumber' => 'mobile',
        'date' => null,
        'messageId' => null,
        'event' => null,
        'senderNumber' => 'mobile',
        'reason' => null,
        'body' => null,
        'mediaUrl' => 'url'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'contactNumber' => false,
        'date' => false,
        'messageId' => false,
        'event' => false,
        'senderNumber' => false,
        'reason' => false,
        'body' => false,
        'mediaUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'contactNumber' => 'contactNumber',
        'date' => 'date',
        'messageId' => 'messageId',
        'event' => 'event',
        'senderNumber' => 'senderNumber',
        'reason' => 'reason',
        'body' => 'body',
        'mediaUrl' => 'mediaUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'contactNumber' => 'setContactNumber',
        'date' => 'setDate',
        'messageId' => 'setMessageId',
        'event' => 'setEvent',
        'senderNumber' => 'setSenderNumber',
        'reason' => 'setReason',
        'body' => 'setBody',
        'mediaUrl' => 'setMediaUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'contactNumber' => 'getContactNumber',
        'date' => 'getDate',
        'messageId' => 'getMessageId',
        'event' => 'getEvent',
        'senderNumber' => 'getSenderNumber',
        'reason' => 'getReason',
        'body' => 'getBody',
        'mediaUrl' => 'getMediaUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const EVENT_SENT = 'sent';
    public const EVENT_DELIVERED = 'delivered';
    public const EVENT_READ = 'read';
    public const EVENT_ERROR = 'error';
    public const EVENT_UNSUBSCRIBE = 'unsubscribe';
    public const EVENT_REPLY = 'reply';
    public const EVENT_SOFT_BOUNCE = 'soft-bounce';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_SENT,
            self::EVENT_DELIVERED,
            self::EVENT_READ,
            self::EVENT_ERROR,
            self::EVENT_UNSUBSCRIBE,
            self::EVENT_REPLY,
            self::EVENT_SOFT_BOUNCE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contactNumber', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('senderNumber', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('mediaUrl', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['contactNumber'] === null) {
            $invalidProperties[] = "'contactNumber' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['messageId'] === null) {
            $invalidProperties[] = "'messageId' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['senderNumber'] === null) {
            $invalidProperties[] = "'senderNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets contactNumber
     *
     * @return string
     */
    public function getContactNumber(): string
    {
        return $this->container['contactNumber'];
    }

    /**
     * Sets contactNumber
     *
     * @param string $contactNumber WhatsApp Number with country code. Example, 85264318721
     *
     * @return $this
     */
    public function setContactNumber(string $contactNumber): static
    {
        if (is_null($contactNumber)) {
            throw new InvalidArgumentException('non-nullable contactNumber cannot be null');
        }
        $this->container['contactNumber'] = $contactNumber;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate(): string
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date UTC date-time on which the event has been generated
     *
     * @return $this
     */
    public function setDate(string $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string
     */
    public function getMessageId(): string
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string $messageId Message ID which generated the event
     *
     * @return $this
     */
    public function setMessageId(string $messageId): static
    {
        if (is_null($messageId)) {
            throw new InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent(): string
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event Event which occurred
     *
     * @return $this
     */
    public function setEvent(string $event): static
    {
        if (is_null($event)) {
            throw new InvalidArgumentException('non-nullable event cannot be null');
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!in_array($event, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets senderNumber
     *
     * @return string
     */
    public function getSenderNumber(): string
    {
        return $this->container['senderNumber'];
    }

    /**
     * Sets senderNumber
     *
     * @param string $senderNumber WhatsApp Number with country code. Example, 85264318721
     *
     * @return $this
     */
    public function setSenderNumber(string $senderNumber): static
    {
        if (is_null($senderNumber)) {
            throw new InvalidArgumentException('non-nullable senderNumber cannot be null');
        }
        $this->container['senderNumber'] = $senderNumber;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason(): ?string
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason for the event (will be there in case of `error` and `soft-bounce` events)
     *
     * @return $this
     */
    public function setReason(?string $reason): static
    {
        if (is_null($reason)) {
            throw new InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody(): ?string
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Text of the reply (will be there only in case of `reply` event with text)
     *
     * @return $this
     */
    public function setBody(?string $body): static
    {
        if (is_null($body)) {
            throw new InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets mediaUrl
     *
     * @return string|null
     */
    public function getMediaUrl(): ?string
    {
        return $this->container['mediaUrl'];
    }

    /**
     * Sets mediaUrl
     *
     * @param string|null $mediaUrl Url of the media reply (will be there only in case of `reply` event with media)
     *
     * @return $this
     */
    public function setMediaUrl(?string $mediaUrl): static
    {
        if (is_null($mediaUrl)) {
            throw new InvalidArgumentException('non-nullable mediaUrl cannot be null');
        }
        $this->container['mediaUrl'] = $mediaUrl;

        return $this;
    }
}


