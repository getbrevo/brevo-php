<?php
/**
 * AbTestCampaignResult
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * AbTestCampaignResult Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AbTestCampaignResult extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'abTestCampaignResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'winningVersion' => 'string',
        'winningCriteria' => 'string',
        'winningSubjectLine' => 'string',
        'openRate' => 'string',
        'clickRate' => 'string',
        'winningVersionRate' => 'string',
        'statistics' => '\Brevo\Client\Models\AbTestCampaignResultStatistics',
        'clickedLinks' => '\Brevo\Client\Models\AbTestCampaignResultClickedLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'winningVersion' => null,
        'winningCriteria' => null,
        'winningSubjectLine' => null,
        'openRate' => null,
        'clickRate' => null,
        'winningVersionRate' => null,
        'statistics' => null,
        'clickedLinks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'winningVersion' => false,
        'winningCriteria' => false,
        'winningSubjectLine' => false,
        'openRate' => false,
        'clickRate' => false,
        'winningVersionRate' => false,
        'statistics' => false,
        'clickedLinks' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'winningVersion' => 'winningVersion',
        'winningCriteria' => 'winningCriteria',
        'winningSubjectLine' => 'winningSubjectLine',
        'openRate' => 'openRate',
        'clickRate' => 'clickRate',
        'winningVersionRate' => 'winningVersionRate',
        'statistics' => 'statistics',
        'clickedLinks' => 'clickedLinks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'winningVersion' => 'setWinningVersion',
        'winningCriteria' => 'setWinningCriteria',
        'winningSubjectLine' => 'setWinningSubjectLine',
        'openRate' => 'setOpenRate',
        'clickRate' => 'setClickRate',
        'winningVersionRate' => 'setWinningVersionRate',
        'statistics' => 'setStatistics',
        'clickedLinks' => 'setClickedLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'winningVersion' => 'getWinningVersion',
        'winningCriteria' => 'getWinningCriteria',
        'winningSubjectLine' => 'getWinningSubjectLine',
        'openRate' => 'getOpenRate',
        'clickRate' => 'getClickRate',
        'winningVersionRate' => 'getWinningVersionRate',
        'statistics' => 'getStatistics',
        'clickedLinks' => 'getClickedLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const WINNING_VERSION_NOT_AVAILABLE = 'notAvailable';
    public const WINNING_VERSION_PENDING = 'pending';
    public const WINNING_VERSION_TIE = 'tie';
    public const WINNING_VERSION_A = 'A';
    public const WINNING_VERSION_B = 'B';
    public const WINNING_CRITERIA_OPEN = 'Open';
    public const WINNING_CRITERIA_CLICK = 'Click';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinningVersionAllowableValues()
    {
        return [
            self::WINNING_VERSION_NOT_AVAILABLE,
            self::WINNING_VERSION_PENDING,
            self::WINNING_VERSION_TIE,
            self::WINNING_VERSION_A,
            self::WINNING_VERSION_B,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinningCriteriaAllowableValues()
    {
        return [
            self::WINNING_CRITERIA_OPEN,
            self::WINNING_CRITERIA_CLICK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('winningVersion', $data ?? [], null);
        $this->setIfExists('winningCriteria', $data ?? [], null);
        $this->setIfExists('winningSubjectLine', $data ?? [], null);
        $this->setIfExists('openRate', $data ?? [], null);
        $this->setIfExists('clickRate', $data ?? [], null);
        $this->setIfExists('winningVersionRate', $data ?? [], null);
        $this->setIfExists('statistics', $data ?? [], null);
        $this->setIfExists('clickedLinks', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getWinningVersionAllowableValues();
        if (!is_null($this->container['winningVersion']) && !in_array($this->container['winningVersion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'winningVersion', must be one of '%s'",
                $this->container['winningVersion'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWinningCriteriaAllowableValues();
        if (!is_null($this->container['winningCriteria']) && !in_array($this->container['winningCriteria'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'winningCriteria', must be one of '%s'",
                $this->container['winningCriteria'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets winningVersion
     *
     * @return string|null
     */
    public function getWinningVersion(): ?string
    {
        return $this->container['winningVersion'];
    }

    /**
     * Sets winningVersion
     *
     * @param string|null $winningVersion Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
     *
     * @return $this
     */
    public function setWinningVersion(?string $winningVersion): static
    {
        if (is_null($winningVersion)) {
            throw new InvalidArgumentException('non-nullable winningVersion cannot be null');
        }
        $allowedValues = $this->getWinningVersionAllowableValues();
        if (!in_array($winningVersion, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'winningVersion', must be one of '%s'",
                    $winningVersion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winningVersion'] = $winningVersion;

        return $this;
    }

    /**
     * Gets winningCriteria
     *
     * @return string|null
     */
    public function getWinningCriteria(): ?string
    {
        return $this->container['winningCriteria'];
    }

    /**
     * Sets winningCriteria
     *
     * @param string|null $winningCriteria Criteria choosen for winning version (Open/Click)
     *
     * @return $this
     */
    public function setWinningCriteria(?string $winningCriteria): static
    {
        if (is_null($winningCriteria)) {
            throw new InvalidArgumentException('non-nullable winningCriteria cannot be null');
        }
        $allowedValues = $this->getWinningCriteriaAllowableValues();
        if (!in_array($winningCriteria, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'winningCriteria', must be one of '%s'",
                    $winningCriteria,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winningCriteria'] = $winningCriteria;

        return $this;
    }

    /**
     * Gets winningSubjectLine
     *
     * @return string|null
     */
    public function getWinningSubjectLine(): ?string
    {
        return $this->container['winningSubjectLine'];
    }

    /**
     * Sets winningSubjectLine
     *
     * @param string|null $winningSubjectLine Subject Line of current winning version
     *
     * @return $this
     */
    public function setWinningSubjectLine(?string $winningSubjectLine): static
    {
        if (is_null($winningSubjectLine)) {
            throw new InvalidArgumentException('non-nullable winningSubjectLine cannot be null');
        }
        $this->container['winningSubjectLine'] = $winningSubjectLine;

        return $this;
    }

    /**
     * Gets openRate
     *
     * @return string|null
     */
    public function getOpenRate(): ?string
    {
        return $this->container['openRate'];
    }

    /**
     * Sets openRate
     *
     * @param string|null $openRate Open rate for current winning version
     *
     * @return $this
     */
    public function setOpenRate(?string $openRate): static
    {
        if (is_null($openRate)) {
            throw new InvalidArgumentException('non-nullable openRate cannot be null');
        }
        $this->container['openRate'] = $openRate;

        return $this;
    }

    /**
     * Gets clickRate
     *
     * @return string|null
     */
    public function getClickRate(): ?string
    {
        return $this->container['clickRate'];
    }

    /**
     * Sets clickRate
     *
     * @param string|null $clickRate Click rate for current winning version
     *
     * @return $this
     */
    public function setClickRate(?string $clickRate): static
    {
        if (is_null($clickRate)) {
            throw new InvalidArgumentException('non-nullable clickRate cannot be null');
        }
        $this->container['clickRate'] = $clickRate;

        return $this;
    }

    /**
     * Gets winningVersionRate
     *
     * @return string|null
     */
    public function getWinningVersionRate(): ?string
    {
        return $this->container['winningVersionRate'];
    }

    /**
     * Sets winningVersionRate
     *
     * @param string|null $winningVersionRate Open/Click rate for the winner version
     *
     * @return $this
     */
    public function setWinningVersionRate(?string $winningVersionRate): static
    {
        if (is_null($winningVersionRate)) {
            throw new InvalidArgumentException('non-nullable winningVersionRate cannot be null');
        }
        $this->container['winningVersionRate'] = $winningVersionRate;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Brevo\Client\Models\AbTestCampaignResultStatistics|null
     */
    public function getStatistics(): ?\Brevo\Client\Models\AbTestCampaignResultStatistics
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Brevo\Client\Models\AbTestCampaignResultStatistics|null $statistics statistics
     *
     * @return $this
     */
    public function setStatistics(?\Brevo\Client\Models\AbTestCampaignResultStatistics $statistics): static
    {
        if (is_null($statistics)) {
            throw new InvalidArgumentException('non-nullable statistics cannot be null');
        }
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets clickedLinks
     *
     * @return \Brevo\Client\Models\AbTestCampaignResultClickedLinks|null
     */
    public function getClickedLinks(): ?\Brevo\Client\Models\AbTestCampaignResultClickedLinks
    {
        return $this->container['clickedLinks'];
    }

    /**
     * Sets clickedLinks
     *
     * @param \Brevo\Client\Models\AbTestCampaignResultClickedLinks|null $clickedLinks clickedLinks
     *
     * @return $this
     */
    public function setClickedLinks(?\Brevo\Client\Models\AbTestCampaignResultClickedLinks $clickedLinks): static
    {
        if (is_null($clickedLinks)) {
            throw new InvalidArgumentException('non-nullable clickedLinks cannot be null');
        }
        $this->container['clickedLinks'] = $clickedLinks;

        return $this;
    }
}


