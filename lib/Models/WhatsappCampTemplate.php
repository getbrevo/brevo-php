<?php
/**
 * WhatsappCampTemplate
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * WhatsappCampTemplate Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class WhatsappCampTemplate extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WhatsappCampTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'category' => 'string',
        'language' => 'string',
        'containsButton' => 'bool',
        'displayHeader' => 'bool',
        'headerType' => 'string',
        'components' => '\Brevo\Client\Models\ComponentItems[]',
        'headerVariables' => '\Brevo\Client\Models\VariablesItems[]',
        'bodyVariables' => '\Brevo\Client\Models\VariablesItems[]',
        'buttonType' => 'string',
        'hideFooter' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'category' => null,
        'language' => null,
        'containsButton' => null,
        'displayHeader' => null,
        'headerType' => null,
        'components' => null,
        'headerVariables' => null,
        'bodyVariables' => null,
        'buttonType' => null,
        'hideFooter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'category' => false,
        'language' => false,
        'containsButton' => false,
        'displayHeader' => false,
        'headerType' => false,
        'components' => false,
        'headerVariables' => false,
        'bodyVariables' => false,
        'buttonType' => false,
        'hideFooter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'category' => 'category',
        'language' => 'language',
        'containsButton' => 'contains_button',
        'displayHeader' => 'display_header',
        'headerType' => 'header_type',
        'components' => 'components',
        'headerVariables' => 'header_variables',
        'bodyVariables' => 'body_variables',
        'buttonType' => 'button_type',
        'hideFooter' => 'hide_footer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'category' => 'setCategory',
        'language' => 'setLanguage',
        'containsButton' => 'setContainsButton',
        'displayHeader' => 'setDisplayHeader',
        'headerType' => 'setHeaderType',
        'components' => 'setComponents',
        'headerVariables' => 'setHeaderVariables',
        'bodyVariables' => 'setBodyVariables',
        'buttonType' => 'setButtonType',
        'hideFooter' => 'setHideFooter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'category' => 'getCategory',
        'language' => 'getLanguage',
        'containsButton' => 'getContainsButton',
        'displayHeader' => 'getDisplayHeader',
        'headerType' => 'getHeaderType',
        'components' => 'getComponents',
        'headerVariables' => 'getHeaderVariables',
        'bodyVariables' => 'getBodyVariables',
        'buttonType' => 'getButtonType',
        'hideFooter' => 'getHideFooter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('containsButton', $data ?? [], null);
        $this->setIfExists('displayHeader', $data ?? [], null);
        $this->setIfExists('headerType', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('headerVariables', $data ?? [], null);
        $this->setIfExists('bodyVariables', $data ?? [], null);
        $this->setIfExists('buttonType', $data ?? [], null);
        $this->setIfExists('hideFooter', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name of the template
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category description of the template
     *
     * @return $this
     */
    public function setCategory(?string $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage(): ?string
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language of the template
     *
     * @return $this
     */
    public function setLanguage(?string $language): static
    {
        if (is_null($language)) {
            throw new InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets containsButton
     *
     * @return bool|null
     */
    public function getContainsButton(): ?bool
    {
        return $this->container['containsButton'];
    }

    /**
     * Sets containsButton
     *
     * @param bool|null $containsButton containsButton
     *
     * @return $this
     */
    public function setContainsButton(?bool $containsButton): static
    {
        if (is_null($containsButton)) {
            throw new InvalidArgumentException('non-nullable containsButton cannot be null');
        }
        $this->container['containsButton'] = $containsButton;

        return $this;
    }

    /**
     * Gets displayHeader
     *
     * @return bool|null
     */
    public function getDisplayHeader(): ?bool
    {
        return $this->container['displayHeader'];
    }

    /**
     * Sets displayHeader
     *
     * @param bool|null $displayHeader displayHeader
     *
     * @return $this
     */
    public function setDisplayHeader(?bool $displayHeader): static
    {
        if (is_null($displayHeader)) {
            throw new InvalidArgumentException('non-nullable displayHeader cannot be null');
        }
        $this->container['displayHeader'] = $displayHeader;

        return $this;
    }

    /**
     * Gets headerType
     *
     * @return string|null
     */
    public function getHeaderType(): ?string
    {
        return $this->container['headerType'];
    }

    /**
     * Sets headerType
     *
     * @param string|null $headerType type of header
     *
     * @return $this
     */
    public function setHeaderType(?string $headerType): static
    {
        if (is_null($headerType)) {
            throw new InvalidArgumentException('non-nullable headerType cannot be null');
        }
        $this->container['headerType'] = $headerType;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Brevo\Client\Models\ComponentItems[]|null
     */
    public function getComponents(): ?array
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Brevo\Client\Models\ComponentItems[]|null $components array of component item objects
     *
     * @return $this
     */
    public function setComponents(?array $components): static
    {
        if (is_null($components)) {
            throw new InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets headerVariables
     *
     * @return \Brevo\Client\Models\VariablesItems[]|null
     */
    public function getHeaderVariables(): ?array
    {
        return $this->container['headerVariables'];
    }

    /**
     * Sets headerVariables
     *
     * @param \Brevo\Client\Models\VariablesItems[]|null $headerVariables array of variables item object
     *
     * @return $this
     */
    public function setHeaderVariables(?array $headerVariables): static
    {
        if (is_null($headerVariables)) {
            throw new InvalidArgumentException('non-nullable headerVariables cannot be null');
        }
        $this->container['headerVariables'] = $headerVariables;

        return $this;
    }

    /**
     * Gets bodyVariables
     *
     * @return \Brevo\Client\Models\VariablesItems[]|null
     */
    public function getBodyVariables(): ?array
    {
        return $this->container['bodyVariables'];
    }

    /**
     * Sets bodyVariables
     *
     * @param \Brevo\Client\Models\VariablesItems[]|null $bodyVariables array of variables item variables
     *
     * @return $this
     */
    public function setBodyVariables(?array $bodyVariables): static
    {
        if (is_null($bodyVariables)) {
            throw new InvalidArgumentException('non-nullable bodyVariables cannot be null');
        }
        $this->container['bodyVariables'] = $bodyVariables;

        return $this;
    }

    /**
     * Gets buttonType
     *
     * @return string|null
     */
    public function getButtonType(): ?string
    {
        return $this->container['buttonType'];
    }

    /**
     * Sets buttonType
     *
     * @param string|null $buttonType buttonType
     *
     * @return $this
     */
    public function setButtonType(?string $buttonType): static
    {
        if (is_null($buttonType)) {
            throw new InvalidArgumentException('non-nullable buttonType cannot be null');
        }
        $this->container['buttonType'] = $buttonType;

        return $this;
    }

    /**
     * Gets hideFooter
     *
     * @return bool|null
     */
    public function getHideFooter(): ?bool
    {
        return $this->container['hideFooter'];
    }

    /**
     * Sets hideFooter
     *
     * @param bool|null $hideFooter hideFooter
     *
     * @return $this
     */
    public function setHideFooter(?bool $hideFooter): static
    {
        if (is_null($hideFooter)) {
            throw new InvalidArgumentException('non-nullable hideFooter cannot be null');
        }
        $this->container['hideFooter'] = $hideFooter;

        return $this;
    }
}


