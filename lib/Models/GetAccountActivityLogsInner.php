<?php
/**
 * GetAccountActivityLogsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetAccountActivityLogsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetAccountActivityLogsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getAccountActivity_logs_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'action' => 'string',
        'date' => 'string',
        'userEmail' => 'string',
        'userIp' => 'string',
        'userAgent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'action' => null,
        'date' => null,
        'userEmail' => null,
        'userIp' => null,
        'userAgent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'action' => false,
        'date' => false,
        'userEmail' => false,
        'userIp' => false,
        'userAgent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'action' => 'action',
        'date' => 'date',
        'userEmail' => 'user_email',
        'userIp' => 'user_ip',
        'userAgent' => 'user_agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'action' => 'setAction',
        'date' => 'setDate',
        'userEmail' => 'setUserEmail',
        'userIp' => 'setUserIp',
        'userAgent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'action' => 'getAction',
        'date' => 'getDate',
        'userEmail' => 'getUserEmail',
        'userIp' => 'getUserIp',
        'userAgent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('userEmail', $data ?? [], null);
        $this->setIfExists('userIp', $data ?? [], null);
        $this->setIfExists('userAgent', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['userEmail'] === null) {
            $invalidProperties[] = "'userEmail' can't be null";
        }
        if ($this->container['userIp'] === null) {
            $invalidProperties[] = "'userIp' can't be null";
        }
        if ($this->container['userAgent'] === null) {
            $invalidProperties[] = "'userAgent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction(): string
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Type of activity in the account.
     *
     * @return $this
     */
    public function setAction(string $action): static
    {
        if (is_null($action)) {
            throw new InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate(): string
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Time of the activity.
     *
     * @return $this
     */
    public function setDate(string $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets userEmail
     *
     * @return string
     */
    public function getUserEmail(): string
    {
        return $this->container['userEmail'];
    }

    /**
     * Sets userEmail
     *
     * @param string $userEmail Email address of the user who performed activity in the account.
     *
     * @return $this
     */
    public function setUserEmail(string $userEmail): static
    {
        if (is_null($userEmail)) {
            throw new InvalidArgumentException('non-nullable userEmail cannot be null');
        }
        $this->container['userEmail'] = $userEmail;

        return $this;
    }

    /**
     * Gets userIp
     *
     * @return string
     */
    public function getUserIp(): string
    {
        return $this->container['userIp'];
    }

    /**
     * Sets userIp
     *
     * @param string $userIp IP address of the user who performed activity in the account.
     *
     * @return $this
     */
    public function setUserIp(string $userIp): static
    {
        if (is_null($userIp)) {
            throw new InvalidArgumentException('non-nullable userIp cannot be null');
        }
        $this->container['userIp'] = $userIp;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string
     */
    public function getUserAgent(): string
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string $userAgent Browser details of the user who performed the activity.
     *
     * @return $this
     */
    public function setUserAgent(string $userAgent): static
    {
        if (is_null($userAgent)) {
            throw new InvalidArgumentException('non-nullable userAgent cannot be null');
        }
        $this->container['userAgent'] = $userAgent;

        return $this;
    }
}


