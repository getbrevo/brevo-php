<?php
/**
 * RemoveContactFromListRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * RemoveContactFromListRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RemoveContactFromListRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'removeContactFromList_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'emails' => 'string[]',
        'ids' => 'int[]',
        'all' => 'bool',
        'extIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'emails' => 'email',
        'ids' => 'int64',
        'all' => null,
        'extIds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'emails' => false,
        'ids' => false,
        'all' => false,
        'extIds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'emails' => 'emails',
        'ids' => 'ids',
        'all' => 'all',
        'extIds' => 'extIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'emails' => 'setEmails',
        'ids' => 'setIds',
        'all' => 'setAll',
        'extIds' => 'setExtIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'emails' => 'getEmails',
        'ids' => 'getIds',
        'all' => 'getAll',
        'extIds' => 'getExtIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('ids', $data ?? [], null);
        $this->setIfExists('all', $data ?? [], null);
        $this->setIfExists('extIds', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['emails']) && (count($this->container['emails']) > 150)) {
            $invalidProperties[] = "invalid value for 'emails', number of items must be less than or equal to 150.";
        }

        if (!is_null($this->container['emails']) && (count($this->container['emails']) < 1)) {
            $invalidProperties[] = "invalid value for 'emails', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['ids']) && (count($this->container['ids']) > 150)) {
            $invalidProperties[] = "invalid value for 'ids', number of items must be less than or equal to 150.";
        }

        if (!is_null($this->container['ids']) && (count($this->container['ids']) < 1)) {
            $invalidProperties[] = "invalid value for 'ids', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['extIds']) && (count($this->container['extIds']) > 150)) {
            $invalidProperties[] = "invalid value for 'extIds', number of items must be less than or equal to 150.";
        }

        if (!is_null($this->container['extIds']) && (count($this->container['extIds']) < 1)) {
            $invalidProperties[] = "invalid value for 'extIds', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Gets emails
     *
     * @return string[]|null
     */
    public function getEmails(): ?array
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[]|null $emails **Required if 'all' is false and 'ids', 'extIds' are empty.** Emails to remove from a list. You can pass a **maximum of 150 emails** for removal in one request.
     *
     * @return $this
     */
    public function setEmails(?array $emails): static
    {
        if (is_null($emails)) {
            throw new InvalidArgumentException('non-nullable emails cannot be null');
        }

        if ((count($emails) > 150)) {
            throw new InvalidArgumentException('invalid value for $emails when calling RemoveContactFromListRequest., number of items must be less than or equal to 150.');
        }
        if ((count($emails) < 1)) {
            throw new InvalidArgumentException('invalid length for $emails when calling RemoveContactFromListRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return int[]|null
     */
    public function getIds(): ?array
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param int[]|null $ids **Required if 'all' is false and 'emails', 'extIds' are empty.** IDs to remove from a list. You can pass a **maximum of 150 IDs** for removal in one request.
     *
     * @return $this
     */
    public function setIds(?array $ids): static
    {
        if (is_null($ids)) {
            throw new InvalidArgumentException('non-nullable ids cannot be null');
        }

        if ((count($ids) > 150)) {
            throw new InvalidArgumentException('invalid value for $ids when calling RemoveContactFromListRequest., number of items must be less than or equal to 150.');
        }
        if ((count($ids) < 1)) {
            throw new InvalidArgumentException('invalid length for $ids when calling RemoveContactFromListRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets all
     *
     * @return bool|null
     */
    public function getAll(): ?bool
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     *
     * @param bool|null $all **Required if 'emails', 'extIds' and 'ids' are empty.** Remove all existing contacts from a list. A process will be created in this scenario. You can fetch the process details to know about the progress
     *
     * @return $this
     */
    public function setAll(?bool $all): static
    {
        if (is_null($all)) {
            throw new InvalidArgumentException('non-nullable all cannot be null');
        }
        $this->container['all'] = $all;

        return $this;
    }

    /**
     * Gets extIds
     *
     * @return string[]|null
     */
    public function getExtIds(): ?array
    {
        return $this->container['extIds'];
    }

    /**
     * Sets extIds
     *
     * @param string[]|null $extIds **Required if 'all' is false, 'ids' and 'emails' are empty.** EXT_ID attributes to remove from a list. You can pass a **maximum of 150 EXT_ID attributes** for removal in one request.
     *
     * @return $this
     */
    public function setExtIds(?array $extIds): static
    {
        if (is_null($extIds)) {
            throw new InvalidArgumentException('non-nullable extIds cannot be null');
        }

        if ((count($extIds) > 150)) {
            throw new InvalidArgumentException('invalid value for $extIds when calling RemoveContactFromListRequest., number of items must be less than or equal to 150.');
        }
        if ((count($extIds) < 1)) {
            throw new InvalidArgumentException('invalid length for $extIds when calling RemoveContactFromListRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['extIds'] = $extIds;

        return $this;
    }
}


