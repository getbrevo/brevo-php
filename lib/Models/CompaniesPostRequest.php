<?php
/**
 * CompaniesPostRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CompaniesPostRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CompaniesPostRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_companies_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'attributes' => 'object',
        'countryCode' => 'int',
        'linkedContactsIds' => 'int[]',
        'linkedDealsIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'attributes' => null,
        'countryCode' => 'int64',
        'linkedContactsIds' => 'int64',
        'linkedDealsIds' => 'objectID'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'attributes' => false,
        'countryCode' => false,
        'linkedContactsIds' => false,
        'linkedDealsIds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'attributes' => 'attributes',
        'countryCode' => 'countryCode',
        'linkedContactsIds' => 'linkedContactsIds',
        'linkedDealsIds' => 'linkedDealsIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'attributes' => 'setAttributes',
        'countryCode' => 'setCountryCode',
        'linkedContactsIds' => 'setLinkedContactsIds',
        'linkedDealsIds' => 'setLinkedDealsIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'attributes' => 'getAttributes',
        'countryCode' => 'getCountryCode',
        'linkedContactsIds' => 'getLinkedContactsIds',
        'linkedDealsIds' => 'getLinkedDealsIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('linkedContactsIds', $data ?? [], null);
        $this->setIfExists('linkedDealsIds', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of company
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return object|null
     */
    public function getAttributes(): ?object
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param object|null $attributes Attributes for company creation
     *
     * @return $this
     */
    public function setAttributes(?object $attributes): static
    {
        if (is_null($attributes)) {
            throw new InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return int|null
     */
    public function getCountryCode(): ?int
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param int|null $countryCode Country code if phone_number is passed in attributes.
     *
     * @return $this
     */
    public function setCountryCode(?int $countryCode): static
    {
        if (is_null($countryCode)) {
            throw new InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets linkedContactsIds
     *
     * @return int[]|null
     */
    public function getLinkedContactsIds(): ?array
    {
        return $this->container['linkedContactsIds'];
    }

    /**
     * Sets linkedContactsIds
     *
     * @param int[]|null $linkedContactsIds Contact ids to be linked with company
     *
     * @return $this
     */
    public function setLinkedContactsIds(?array $linkedContactsIds): static
    {
        if (is_null($linkedContactsIds)) {
            throw new InvalidArgumentException('non-nullable linkedContactsIds cannot be null');
        }
        $this->container['linkedContactsIds'] = $linkedContactsIds;

        return $this;
    }

    /**
     * Gets linkedDealsIds
     *
     * @return string[]|null
     */
    public function getLinkedDealsIds(): ?array
    {
        return $this->container['linkedDealsIds'];
    }

    /**
     * Sets linkedDealsIds
     *
     * @param string[]|null $linkedDealsIds Deal ids to be linked with company
     *
     * @return $this
     */
    public function setLinkedDealsIds(?array $linkedDealsIds): static
    {
        if (is_null($linkedDealsIds)) {
            throw new InvalidArgumentException('non-nullable linkedDealsIds cannot be null');
        }
        $this->container['linkedDealsIds'] = $linkedDealsIds;

        return $this;
    }
}


