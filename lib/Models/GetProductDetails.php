<?php
/**
 * GetProductDetails
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetProductDetails Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetProductDetails extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getProductDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'createdAt' => 'string',
        'modifiedAt' => 'string',
        's3ThumbAnalytics' => 'string',
        's3ThumbEditor' => 'string',
        'url' => 'string',
        'imageUrl' => 'string',
        'sku' => 'string',
        'price' => 'float',
        'categories' => 'string[]',
        'parentId' => 'string',
        's3Original' => 'string',
        'metaInfo' => 'object',
        'isDeleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'string',
        'name' => 'string',
        'createdAt' => null,
        'modifiedAt' => null,
        's3ThumbAnalytics' => 'string',
        's3ThumbEditor' => 'string',
        'url' => 'string',
        'imageUrl' => 'string',
        'sku' => 'string',
        'price' => 'float',
        'categories' => null,
        'parentId' => 'string',
        's3Original' => 'string',
        'metaInfo' => null,
        'isDeleted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'createdAt' => false,
        'modifiedAt' => false,
        's3ThumbAnalytics' => false,
        's3ThumbEditor' => false,
        'url' => false,
        'imageUrl' => false,
        'sku' => false,
        'price' => false,
        'categories' => false,
        'parentId' => false,
        's3Original' => false,
        'metaInfo' => false,
        'isDeleted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'createdAt' => 'createdAt',
        'modifiedAt' => 'modifiedAt',
        's3ThumbAnalytics' => 's3ThumbAnalytics',
        's3ThumbEditor' => 's3ThumbEditor',
        'url' => 'url',
        'imageUrl' => 'imageUrl',
        'sku' => 'sku',
        'price' => 'price',
        'categories' => 'categories',
        'parentId' => 'parentId',
        's3Original' => 's3Original',
        'metaInfo' => 'metaInfo',
        'isDeleted' => 'isDeleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'createdAt' => 'setCreatedAt',
        'modifiedAt' => 'setModifiedAt',
        's3ThumbAnalytics' => 'setS3ThumbAnalytics',
        's3ThumbEditor' => 'setS3ThumbEditor',
        'url' => 'setUrl',
        'imageUrl' => 'setImageUrl',
        'sku' => 'setSku',
        'price' => 'setPrice',
        'categories' => 'setCategories',
        'parentId' => 'setParentId',
        's3Original' => 'setS3Original',
        'metaInfo' => 'setMetaInfo',
        'isDeleted' => 'setIsDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'createdAt' => 'getCreatedAt',
        'modifiedAt' => 'getModifiedAt',
        's3ThumbAnalytics' => 'getS3ThumbAnalytics',
        's3ThumbEditor' => 'getS3ThumbEditor',
        'url' => 'getUrl',
        'imageUrl' => 'getImageUrl',
        'sku' => 'getSku',
        'price' => 'getPrice',
        'categories' => 'getCategories',
        'parentId' => 'getParentId',
        's3Original' => 'getS3Original',
        'metaInfo' => 'getMetaInfo',
        'isDeleted' => 'getIsDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('modifiedAt', $data ?? [], null);
        $this->setIfExists('s3ThumbAnalytics', $data ?? [], null);
        $this->setIfExists('s3ThumbEditor', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('imageUrl', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('parentId', $data ?? [], null);
        $this->setIfExists('s3Original', $data ?? [], null);
        $this->setIfExists('metaInfo', $data ?? [], null);
        $this->setIfExists('isDeleted', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['modifiedAt'] === null) {
            $invalidProperties[] = "'modifiedAt' can't be null";
        }
        if ($this->container['s3ThumbAnalytics'] === null) {
            $invalidProperties[] = "'s3ThumbAnalytics' can't be null";
        }
        if ($this->container['s3ThumbEditor'] === null) {
            $invalidProperties[] = "'s3ThumbEditor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Product ID for which you requested the details
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the product for which you requested the details
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setCreatedAt(string $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets modifiedAt
     *
     * @return string
     */
    public function getModifiedAt(): string
    {
        return $this->container['modifiedAt'];
    }

    /**
     * Sets modifiedAt
     *
     * @param string $modifiedAt Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setModifiedAt(string $modifiedAt): static
    {
        if (is_null($modifiedAt)) {
            throw new InvalidArgumentException('non-nullable modifiedAt cannot be null');
        }
        $this->container['modifiedAt'] = $modifiedAt;

        return $this;
    }

    /**
     * Gets s3ThumbAnalytics
     *
     * @return string
     */
    public function getS3ThumbAnalytics(): string
    {
        return $this->container['s3ThumbAnalytics'];
    }

    /**
     * Sets s3ThumbAnalytics
     *
     * @param string $s3ThumbAnalytics S3 thumbnail url of original image in 120x120 dimension for analytics section
     *
     * @return $this
     */
    public function setS3ThumbAnalytics(string $s3ThumbAnalytics): static
    {
        if (is_null($s3ThumbAnalytics)) {
            throw new InvalidArgumentException('non-nullable s3ThumbAnalytics cannot be null');
        }
        $this->container['s3ThumbAnalytics'] = $s3ThumbAnalytics;

        return $this;
    }

    /**
     * Gets s3ThumbEditor
     *
     * @return string
     */
    public function getS3ThumbEditor(): string
    {
        return $this->container['s3ThumbEditor'];
    }

    /**
     * Sets s3ThumbEditor
     *
     * @param string $s3ThumbEditor S3 thumbnail url of original image in 600x400 dimension for editor section
     *
     * @return $this
     */
    public function setS3ThumbEditor(string $s3ThumbEditor): static
    {
        if (is_null($s3ThumbEditor)) {
            throw new InvalidArgumentException('non-nullable s3ThumbEditor cannot be null');
        }
        $this->container['s3ThumbEditor'] = $s3ThumbEditor;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL to the product
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|null
     */
    public function getImageUrl(): ?string
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|null $imageUrl Absolute URL to the cover image of the product
     *
     * @return $this
     */
    public function setImageUrl(?string $imageUrl): static
    {
        if (is_null($imageUrl)) {
            throw new InvalidArgumentException('non-nullable imageUrl cannot be null');
        }
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku(): ?string
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Product identifier from the shop
     *
     * @return $this
     */
    public function setSku(?string $sku): static
    {
        if (is_null($sku)) {
            throw new InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the product
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories(): ?array
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories Category ID-s of the product
     *
     * @return $this
     */
    public function setCategories(?array $categories): static
    {
        if (is_null($categories)) {
            throw new InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return string|null
     */
    public function getParentId(): ?string
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param string|null $parentId Parent product id of the product
     *
     * @return $this
     */
    public function setParentId(?string $parentId): static
    {
        if (is_null($parentId)) {
            throw new InvalidArgumentException('non-nullable parentId cannot be null');
        }
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets s3Original
     *
     * @return string|null
     */
    public function getS3Original(): ?string
    {
        return $this->container['s3Original'];
    }

    /**
     * Sets s3Original
     *
     * @param string|null $s3Original S3 url of original image
     *
     * @return $this
     */
    public function setS3Original(?string $s3Original): static
    {
        if (is_null($s3Original)) {
            throw new InvalidArgumentException('non-nullable s3Original cannot be null');
        }
        $this->container['s3Original'] = $s3Original;

        return $this;
    }

    /**
     * Gets metaInfo
     *
     * @return object|null
     */
    public function getMetaInfo(): ?object
    {
        return $this->container['metaInfo'];
    }

    /**
     * Sets metaInfo
     *
     * @param object|null $metaInfo Meta data of product such as description, vendor, producer, stock level, etc.
     *
     * @return $this
     */
    public function setMetaInfo(?object $metaInfo): static
    {
        if (is_null($metaInfo)) {
            throw new InvalidArgumentException('non-nullable metaInfo cannot be null');
        }
        $this->container['metaInfo'] = $metaInfo;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool|null
     */
    public function getIsDeleted(): ?bool
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool|null $isDeleted product deleted from the shop's database
     *
     * @return $this
     */
    public function setIsDeleted(?bool $isDeleted): static
    {
        if (is_null($isDeleted)) {
            throw new InvalidArgumentException('non-nullable isDeleted cannot be null');
        }
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }
}


