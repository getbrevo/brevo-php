<?php
/**
 * GetWhatsAppConfig
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetWhatsAppConfig Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetWhatsAppConfig extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getWhatsAppConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'whatsappBusinessAccountId' => 'string',
        'sendingLimit' => 'string',
        'phoneNumberQuality' => 'string',
        'whatsappBusinessAccountStatus' => 'string',
        'businessStatus' => 'string',
        'phoneNumberNameStatus' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'whatsappBusinessAccountId' => null,
        'sendingLimit' => null,
        'phoneNumberQuality' => null,
        'whatsappBusinessAccountStatus' => null,
        'businessStatus' => null,
        'phoneNumberNameStatus' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'whatsappBusinessAccountId' => false,
        'sendingLimit' => false,
        'phoneNumberQuality' => false,
        'whatsappBusinessAccountStatus' => false,
        'businessStatus' => false,
        'phoneNumberNameStatus' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'whatsappBusinessAccountId' => 'whatsappBusinessAccountId',
        'sendingLimit' => 'sendingLimit',
        'phoneNumberQuality' => 'phoneNumberQuality',
        'whatsappBusinessAccountStatus' => 'whatsappBusinessAccountStatus',
        'businessStatus' => 'businessStatus',
        'phoneNumberNameStatus' => 'phoneNumberNameStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'whatsappBusinessAccountId' => 'setWhatsappBusinessAccountId',
        'sendingLimit' => 'setSendingLimit',
        'phoneNumberQuality' => 'setPhoneNumberQuality',
        'whatsappBusinessAccountStatus' => 'setWhatsappBusinessAccountStatus',
        'businessStatus' => 'setBusinessStatus',
        'phoneNumberNameStatus' => 'setPhoneNumberNameStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'whatsappBusinessAccountId' => 'getWhatsappBusinessAccountId',
        'sendingLimit' => 'getSendingLimit',
        'phoneNumberQuality' => 'getPhoneNumberQuality',
        'whatsappBusinessAccountStatus' => 'getWhatsappBusinessAccountStatus',
        'businessStatus' => 'getBusinessStatus',
        'phoneNumberNameStatus' => 'getPhoneNumberNameStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const PHONE_NUMBER_QUALITY_GREEN = 'GREEN';
    public const PHONE_NUMBER_QUALITY_YELLOW = 'YELLOW';
    public const PHONE_NUMBER_QUALITY_RED = 'RED';
    public const WHATSAPP_BUSINESS_ACCOUNT_STATUS_APPROVED = 'APPROVED';
    public const WHATSAPP_BUSINESS_ACCOUNT_STATUS_PENDING = 'PENDING';
    public const WHATSAPP_BUSINESS_ACCOUNT_STATUS_REJECTED = 'REJECTED';
    public const PHONE_NUMBER_NAME_STATUS_APPROVED = 'APPROVED';
    public const PHONE_NUMBER_NAME_STATUS_PENDING = 'PENDING';
    public const PHONE_NUMBER_NAME_STATUS_REJECTED = 'REJECTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneNumberQualityAllowableValues()
    {
        return [
            self::PHONE_NUMBER_QUALITY_GREEN,
            self::PHONE_NUMBER_QUALITY_YELLOW,
            self::PHONE_NUMBER_QUALITY_RED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhatsappBusinessAccountStatusAllowableValues()
    {
        return [
            self::WHATSAPP_BUSINESS_ACCOUNT_STATUS_APPROVED,
            self::WHATSAPP_BUSINESS_ACCOUNT_STATUS_PENDING,
            self::WHATSAPP_BUSINESS_ACCOUNT_STATUS_REJECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneNumberNameStatusAllowableValues()
    {
        return [
            self::PHONE_NUMBER_NAME_STATUS_APPROVED,
            self::PHONE_NUMBER_NAME_STATUS_PENDING,
            self::PHONE_NUMBER_NAME_STATUS_REJECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('whatsappBusinessAccountId', $data ?? [], null);
        $this->setIfExists('sendingLimit', $data ?? [], null);
        $this->setIfExists('phoneNumberQuality', $data ?? [], null);
        $this->setIfExists('whatsappBusinessAccountStatus', $data ?? [], null);
        $this->setIfExists('businessStatus', $data ?? [], null);
        $this->setIfExists('phoneNumberNameStatus', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getPhoneNumberQualityAllowableValues();
        if (!is_null($this->container['phoneNumberQuality']) && !in_array($this->container['phoneNumberQuality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phoneNumberQuality', must be one of '%s'",
                $this->container['phoneNumberQuality'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhatsappBusinessAccountStatusAllowableValues();
        if (!is_null($this->container['whatsappBusinessAccountStatus']) && !in_array($this->container['whatsappBusinessAccountStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'whatsappBusinessAccountStatus', must be one of '%s'",
                $this->container['whatsappBusinessAccountStatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhoneNumberNameStatusAllowableValues();
        if (!is_null($this->container['phoneNumberNameStatus']) && !in_array($this->container['phoneNumberNameStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phoneNumberNameStatus', must be one of '%s'",
                $this->container['phoneNumberNameStatus'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets whatsappBusinessAccountId
     *
     * @return string|null
     */
    public function getWhatsappBusinessAccountId(): ?string
    {
        return $this->container['whatsappBusinessAccountId'];
    }

    /**
     * Sets whatsappBusinessAccountId
     *
     * @param string|null $whatsappBusinessAccountId Id of the WhatsApp business account
     *
     * @return $this
     */
    public function setWhatsappBusinessAccountId(?string $whatsappBusinessAccountId): static
    {
        if (is_null($whatsappBusinessAccountId)) {
            throw new InvalidArgumentException('non-nullable whatsappBusinessAccountId cannot be null');
        }
        $this->container['whatsappBusinessAccountId'] = $whatsappBusinessAccountId;

        return $this;
    }

    /**
     * Gets sendingLimit
     *
     * @return string|null
     */
    public function getSendingLimit(): ?string
    {
        return $this->container['sendingLimit'];
    }

    /**
     * Sets sendingLimit
     *
     * @param string|null $sendingLimit Sending limit Information of the WhatsApp API account
     *
     * @return $this
     */
    public function setSendingLimit(?string $sendingLimit): static
    {
        if (is_null($sendingLimit)) {
            throw new InvalidArgumentException('non-nullable sendingLimit cannot be null');
        }
        $this->container['sendingLimit'] = $sendingLimit;

        return $this;
    }

    /**
     * Gets phoneNumberQuality
     *
     * @return string|null
     */
    public function getPhoneNumberQuality(): ?string
    {
        return $this->container['phoneNumberQuality'];
    }

    /**
     * Sets phoneNumberQuality
     *
     * @param string|null $phoneNumberQuality Quality status of phone number associated with WhatsApp account. There are three quality ratings. example - **High (GREEN) , Medium (YELLOW) and Low(RED)**
     *
     * @return $this
     */
    public function setPhoneNumberQuality(?string $phoneNumberQuality): static
    {
        if (is_null($phoneNumberQuality)) {
            throw new InvalidArgumentException('non-nullable phoneNumberQuality cannot be null');
        }
        $allowedValues = $this->getPhoneNumberQualityAllowableValues();
        if (!in_array($phoneNumberQuality, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phoneNumberQuality', must be one of '%s'",
                    $phoneNumberQuality,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneNumberQuality'] = $phoneNumberQuality;

        return $this;
    }

    /**
     * Gets whatsappBusinessAccountStatus
     *
     * @return string|null
     */
    public function getWhatsappBusinessAccountStatus(): ?string
    {
        return $this->container['whatsappBusinessAccountStatus'];
    }

    /**
     * Sets whatsappBusinessAccountStatus
     *
     * @param string|null $whatsappBusinessAccountStatus Status information related to WhatsApp API account
     *
     * @return $this
     */
    public function setWhatsappBusinessAccountStatus(?string $whatsappBusinessAccountStatus): static
    {
        if (is_null($whatsappBusinessAccountStatus)) {
            throw new InvalidArgumentException('non-nullable whatsappBusinessAccountStatus cannot be null');
        }
        $allowedValues = $this->getWhatsappBusinessAccountStatusAllowableValues();
        if (!in_array($whatsappBusinessAccountStatus, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'whatsappBusinessAccountStatus', must be one of '%s'",
                    $whatsappBusinessAccountStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['whatsappBusinessAccountStatus'] = $whatsappBusinessAccountStatus;

        return $this;
    }

    /**
     * Gets businessStatus
     *
     * @return string|null
     */
    public function getBusinessStatus(): ?string
    {
        return $this->container['businessStatus'];
    }

    /**
     * Sets businessStatus
     *
     * @param string|null $businessStatus Verification status information of the Business account
     *
     * @return $this
     */
    public function setBusinessStatus(?string $businessStatus): static
    {
        if (is_null($businessStatus)) {
            throw new InvalidArgumentException('non-nullable businessStatus cannot be null');
        }
        $this->container['businessStatus'] = $businessStatus;

        return $this;
    }

    /**
     * Gets phoneNumberNameStatus
     *
     * @return string|null
     */
    public function getPhoneNumberNameStatus(): ?string
    {
        return $this->container['phoneNumberNameStatus'];
    }

    /**
     * Sets phoneNumberNameStatus
     *
     * @param string|null $phoneNumberNameStatus Status of the name associated with WhatsApp Phone number
     *
     * @return $this
     */
    public function setPhoneNumberNameStatus(?string $phoneNumberNameStatus): static
    {
        if (is_null($phoneNumberNameStatus)) {
            throw new InvalidArgumentException('non-nullable phoneNumberNameStatus cannot be null');
        }
        $allowedValues = $this->getPhoneNumberNameStatusAllowableValues();
        if (!in_array($phoneNumberNameStatus, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phoneNumberNameStatus', must be one of '%s'",
                    $phoneNumberNameStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneNumberNameStatus'] = $phoneNumberNameStatus;

        return $this;
    }
}


