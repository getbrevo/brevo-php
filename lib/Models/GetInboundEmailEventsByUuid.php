<?php
/**
 * GetInboundEmailEventsByUuid
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetInboundEmailEventsByUuid Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetInboundEmailEventsByUuid extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getInboundEmailEventsByUuid';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'receivedAt' => '\DateTime',
        'deliveredAt' => '\DateTime',
        'recipient' => 'string',
        'sender' => 'string',
        'messageId' => 'string',
        'subject' => 'string',
        'attachments' => '\Brevo\Client\Models\GetInboundEmailEventsByUuidAttachmentsInner[]',
        'logs' => '\Brevo\Client\Models\GetInboundEmailEventsByUuidLogsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'receivedAt' => 'date-time',
        'deliveredAt' => 'date-time',
        'recipient' => 'email',
        'sender' => 'email',
        'messageId' => null,
        'subject' => null,
        'attachments' => null,
        'logs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'receivedAt' => false,
        'deliveredAt' => true,
        'recipient' => false,
        'sender' => false,
        'messageId' => false,
        'subject' => false,
        'attachments' => false,
        'logs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'receivedAt' => 'receivedAt',
        'deliveredAt' => 'deliveredAt',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'messageId' => 'messageId',
        'subject' => 'subject',
        'attachments' => 'attachments',
        'logs' => 'logs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'receivedAt' => 'setReceivedAt',
        'deliveredAt' => 'setDeliveredAt',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'messageId' => 'setMessageId',
        'subject' => 'setSubject',
        'attachments' => 'setAttachments',
        'logs' => 'setLogs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'receivedAt' => 'getReceivedAt',
        'deliveredAt' => 'getDeliveredAt',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'messageId' => 'getMessageId',
        'subject' => 'getSubject',
        'attachments' => 'getAttachments',
        'logs' => 'getLogs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('receivedAt', $data ?? [], null);
        $this->setIfExists('deliveredAt', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('logs', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets receivedAt
     *
     * @return \DateTime|null
     */
    public function getReceivedAt(): ?\DateTime
    {
        return $this->container['receivedAt'];
    }

    /**
     * Sets receivedAt
     *
     * @param \DateTime|null $receivedAt Date when email was received on SMTP relay
     *
     * @return $this
     */
    public function setReceivedAt(?\DateTime $receivedAt): static
    {
        if (is_null($receivedAt)) {
            throw new InvalidArgumentException('non-nullable receivedAt cannot be null');
        }
        $this->container['receivedAt'] = $receivedAt;

        return $this;
    }

    /**
     * Gets deliveredAt
     *
     * @return \DateTime|null
     */
    public function getDeliveredAt(): ?\DateTime
    {
        return $this->container['deliveredAt'];
    }

    /**
     * Sets deliveredAt
     *
     * @param \DateTime|null $deliveredAt Date when email was delivered successfully to client’s webhook
     *
     * @return $this
     */
    public function setDeliveredAt(?\DateTime $deliveredAt): static
    {
        if (is_null($deliveredAt)) {
            array_push($this->openAPINullablesSetToNull, 'deliveredAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveredAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveredAt'] = $deliveredAt;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient(): ?string
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient Recipient’s email address
     *
     * @return $this
     */
    public function setRecipient(?string $recipient): static
    {
        if (is_null($recipient)) {
            throw new InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender(): ?string
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender Sender’s email address
     *
     * @return $this
     */
    public function setSender(?string $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string|null
     */
    public function getMessageId(): ?string
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string|null $messageId Value of the Message-ID header. This will be present only after the processing is done.
     *
     * @return $this
     */
    public function setMessageId(?string $messageId): static
    {
        if (is_null($messageId)) {
            throw new InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject(): ?string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Value of the Subject header. This will be present only after the processing is done.
     *
     * @return $this
     */
    public function setSubject(?string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Brevo\Client\Models\GetInboundEmailEventsByUuidAttachmentsInner[]|null
     */
    public function getAttachments(): ?array
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Brevo\Client\Models\GetInboundEmailEventsByUuidAttachmentsInner[]|null $attachments List of attachments of the email. This will be present only after the processing is done.
     *
     * @return $this
     */
    public function setAttachments(?array $attachments): static
    {
        if (is_null($attachments)) {
            throw new InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \Brevo\Client\Models\GetInboundEmailEventsByUuidLogsInner[]|null
     */
    public function getLogs(): ?array
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \Brevo\Client\Models\GetInboundEmailEventsByUuidLogsInner[]|null $logs List of events/logs that describe the lifecycle of the email on SIB platform
     *
     * @return $this
     */
    public function setLogs(?array $logs): static
    {
        if (is_null($logs)) {
            throw new InvalidArgumentException('non-nullable logs cannot be null');
        }
        $this->container['logs'] = $logs;

        return $this;
    }
}


