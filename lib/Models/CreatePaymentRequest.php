<?php
/**
 * CreatePaymentRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CreatePaymentRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreatePaymentRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'createPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'reference' => 'string',
        'cart' => '\Brevo\Client\Models\Cart',
        'contactId' => 'int',
        'description' => 'string',
        'notification' => '\Brevo\Client\Models\Notification',
        'configuration' => '\Brevo\Client\Models\Configuration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'reference' => null,
        'cart' => null,
        'contactId' => 'int64',
        'description' => null,
        'notification' => null,
        'configuration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'reference' => false,
        'cart' => false,
        'contactId' => false,
        'description' => false,
        'notification' => false,
        'configuration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'reference' => 'reference',
        'cart' => 'cart',
        'contactId' => 'contactId',
        'description' => 'description',
        'notification' => 'notification',
        'configuration' => 'configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'reference' => 'setReference',
        'cart' => 'setCart',
        'contactId' => 'setContactId',
        'description' => 'setDescription',
        'notification' => 'setNotification',
        'configuration' => 'setConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'reference' => 'getReference',
        'cart' => 'getCart',
        'contactId' => 'getContactId',
        'description' => 'getDescription',
        'notification' => 'getNotification',
        'configuration' => 'getConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['cart'] === null) {
            $invalidProperties[] = "'cart' can't be null";
        }
        if ($this->container['contactId'] === null) {
            $invalidProperties[] = "'contactId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference(): string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference of the payment request, it will appear on the payment page.
     *
     * @return $this
     */
    public function setReference(string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \Brevo\Client\Models\Cart
     */
    public function getCart(): \Brevo\Client\Models\Cart
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \Brevo\Client\Models\Cart $cart cart
     *
     * @return $this
     */
    public function setCart(\Brevo\Client\Models\Cart $cart): static
    {
        if (is_null($cart)) {
            throw new InvalidArgumentException('non-nullable cart cannot be null');
        }
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return int
     */
    public function getContactId(): int
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param int $contactId Brevo ID of the contact requested to pay.
     *
     * @return $this
     */
    public function setContactId(int $contactId): static
    {
        if (is_null($contactId)) {
            throw new InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description of payment request
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \Brevo\Client\Models\Notification|null
     */
    public function getNotification(): ?\Brevo\Client\Models\Notification
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \Brevo\Client\Models\Notification|null $notification notification
     *
     * @return $this
     */
    public function setNotification(?\Brevo\Client\Models\Notification $notification): static
    {
        if (is_null($notification)) {
            throw new InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Brevo\Client\Models\Configuration|null
     */
    public function getConfiguration(): ?\Brevo\Client\Models\Configuration
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Brevo\Client\Models\Configuration|null $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration(?\Brevo\Client\Models\Configuration $configuration): static
    {
        if (is_null($configuration)) {
            throw new InvalidArgumentException('non-nullable configuration cannot be null');
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }
}


