<?php
/**
 * GetTransacSmsReportReportsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetTransacSmsReportReportsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetTransacSmsReportReportsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getTransacSmsReport_reports_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'date' => '\DateTime',
        'requests' => 'int',
        'delivered' => 'int',
        'hardBounces' => 'int',
        'softBounces' => 'int',
        'blocked' => 'int',
        'unsubscribed' => 'int',
        'replied' => 'int',
        'accepted' => 'int',
        'rejected' => 'int',
        'skipped' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'date' => 'date',
        'requests' => 'int64',
        'delivered' => 'int64',
        'hardBounces' => 'int64',
        'softBounces' => 'int64',
        'blocked' => 'int64',
        'unsubscribed' => 'int64',
        'replied' => 'int64',
        'accepted' => 'int64',
        'rejected' => 'int64',
        'skipped' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'date' => false,
        'requests' => false,
        'delivered' => false,
        'hardBounces' => false,
        'softBounces' => false,
        'blocked' => false,
        'unsubscribed' => false,
        'replied' => false,
        'accepted' => false,
        'rejected' => false,
        'skipped' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'requests' => 'requests',
        'delivered' => 'delivered',
        'hardBounces' => 'hardBounces',
        'softBounces' => 'softBounces',
        'blocked' => 'blocked',
        'unsubscribed' => 'unsubscribed',
        'replied' => 'replied',
        'accepted' => 'accepted',
        'rejected' => 'rejected',
        'skipped' => 'skipped'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'date' => 'setDate',
        'requests' => 'setRequests',
        'delivered' => 'setDelivered',
        'hardBounces' => 'setHardBounces',
        'softBounces' => 'setSoftBounces',
        'blocked' => 'setBlocked',
        'unsubscribed' => 'setUnsubscribed',
        'replied' => 'setReplied',
        'accepted' => 'setAccepted',
        'rejected' => 'setRejected',
        'skipped' => 'setSkipped'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'date' => 'getDate',
        'requests' => 'getRequests',
        'delivered' => 'getDelivered',
        'hardBounces' => 'getHardBounces',
        'softBounces' => 'getSoftBounces',
        'blocked' => 'getBlocked',
        'unsubscribed' => 'getUnsubscribed',
        'replied' => 'getReplied',
        'accepted' => 'getAccepted',
        'rejected' => 'getRejected',
        'skipped' => 'getSkipped'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('requests', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('hardBounces', $data ?? [], null);
        $this->setIfExists('softBounces', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('unsubscribed', $data ?? [], null);
        $this->setIfExists('replied', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('rejected', $data ?? [], null);
        $this->setIfExists('skipped', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date for which statistics are retrieved
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets requests
     *
     * @return int|null
     */
    public function getRequests(): ?int
    {
        return $this->container['requests'];
    }

    /**
     * Sets requests
     *
     * @param int|null $requests Number of requests for the date
     *
     * @return $this
     */
    public function setRequests(?int $requests): static
    {
        if (is_null($requests)) {
            throw new InvalidArgumentException('non-nullable requests cannot be null');
        }
        $this->container['requests'] = $requests;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int|null
     */
    public function getDelivered(): ?int
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int|null $delivered Number of delivered SMS for the date
     *
     * @return $this
     */
    public function setDelivered(?int $delivered): static
    {
        if (is_null($delivered)) {
            throw new InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets hardBounces
     *
     * @return int|null
     */
    public function getHardBounces(): ?int
    {
        return $this->container['hardBounces'];
    }

    /**
     * Sets hardBounces
     *
     * @param int|null $hardBounces Number of hardbounces for the date
     *
     * @return $this
     */
    public function setHardBounces(?int $hardBounces): static
    {
        if (is_null($hardBounces)) {
            throw new InvalidArgumentException('non-nullable hardBounces cannot be null');
        }
        $this->container['hardBounces'] = $hardBounces;

        return $this;
    }

    /**
     * Gets softBounces
     *
     * @return int|null
     */
    public function getSoftBounces(): ?int
    {
        return $this->container['softBounces'];
    }

    /**
     * Sets softBounces
     *
     * @param int|null $softBounces Number of softbounces for the date
     *
     * @return $this
     */
    public function setSoftBounces(?int $softBounces): static
    {
        if (is_null($softBounces)) {
            throw new InvalidArgumentException('non-nullable softBounces cannot be null');
        }
        $this->container['softBounces'] = $softBounces;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return int|null
     */
    public function getBlocked(): ?int
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param int|null $blocked Number of blocked contact for the date
     *
     * @return $this
     */
    public function setBlocked(?int $blocked): static
    {
        if (is_null($blocked)) {
            throw new InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return int|null
     */
    public function getUnsubscribed(): ?int
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param int|null $unsubscribed Number of unsubscription for the date
     *
     * @return $this
     */
    public function setUnsubscribed(?int $unsubscribed): static
    {
        if (is_null($unsubscribed)) {
            throw new InvalidArgumentException('non-nullable unsubscribed cannot be null');
        }
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets replied
     *
     * @return int|null
     */
    public function getReplied(): ?int
    {
        return $this->container['replied'];
    }

    /**
     * Sets replied
     *
     * @param int|null $replied Number of answered SMS for the date
     *
     * @return $this
     */
    public function setReplied(?int $replied): static
    {
        if (is_null($replied)) {
            throw new InvalidArgumentException('non-nullable replied cannot be null');
        }
        $this->container['replied'] = $replied;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return int|null
     */
    public function getAccepted(): ?int
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param int|null $accepted Number of accepted SMS for the date
     *
     * @return $this
     */
    public function setAccepted(?int $accepted): static
    {
        if (is_null($accepted)) {
            throw new InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets rejected
     *
     * @return int|null
     */
    public function getRejected(): ?int
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param int|null $rejected Number of rejected SMS for the date
     *
     * @return $this
     */
    public function setRejected(?int $rejected): static
    {
        if (is_null($rejected)) {
            throw new InvalidArgumentException('non-nullable rejected cannot be null');
        }
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets skipped
     *
     * @return int|null
     */
    public function getSkipped(): ?int
    {
        return $this->container['skipped'];
    }

    /**
     * Sets skipped
     *
     * @param int|null $skipped Number of skipped SMS for the date
     *
     * @return $this
     */
    public function setSkipped(?int $skipped): static
    {
        if (is_null($skipped)) {
            throw new InvalidArgumentException('non-nullable skipped cannot be null');
        }
        $this->container['skipped'] = $skipped;

        return $this;
    }
}


