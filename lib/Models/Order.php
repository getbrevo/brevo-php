<?php
/**
 * Order
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Order extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'status' => 'string',
        'amount' => 'float',
        'products' => '\Brevo\Client\Models\OrderProductsInner[]',
        'storeId' => 'string',
        'identifiers' => '\Brevo\Client\Models\OrderIdentifiers',
        'billing' => '\Brevo\Client\Models\OrderBilling',
        'coupons' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'createdAt' => null,
        'updatedAt' => null,
        'status' => null,
        'amount' => null,
        'products' => null,
        'storeId' => null,
        'identifiers' => null,
        'billing' => null,
        'coupons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'status' => false,
        'amount' => false,
        'products' => false,
        'storeId' => false,
        'identifiers' => false,
        'billing' => false,
        'coupons' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'status' => 'status',
        'amount' => 'amount',
        'products' => 'products',
        'storeId' => 'storeId',
        'identifiers' => 'identifiers',
        'billing' => 'billing',
        'coupons' => 'coupons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'products' => 'setProducts',
        'storeId' => 'setStoreId',
        'identifiers' => 'setIdentifiers',
        'billing' => 'setBilling',
        'coupons' => 'setCoupons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'products' => 'getProducts',
        'storeId' => 'getStoreId',
        'identifiers' => 'getIdentifiers',
        'billing' => 'getBilling',
        'coupons' => 'getCoupons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('storeId', $data ?? [], null);
        $this->setIfExists('identifiers', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('coupons', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID of the order.
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created.
     *
     * @return $this
     */
    public function setCreatedAt(string $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt(): string
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated.
     *
     * @return $this
     */
    public function setUpdatedAt(string $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status State of the order.
     *
     * @return $this
     */
    public function setStatus(string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount(): float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Total amount of the order, including all shipping expenses, tax and the price of items.
     *
     * @return $this
     */
    public function setAmount(float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Brevo\Client\Models\OrderProductsInner[]
     */
    public function getProducts(): array
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Brevo\Client\Models\OrderProductsInner[] $products products
     *
     * @return $this
     */
    public function setProducts(array $products): static
    {
        if (is_null($products)) {
            throw new InvalidArgumentException('non-nullable products cannot be null');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return string|null
     */
    public function getStoreId(): ?string
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string|null $storeId ID of store where the order is placed
     *
     * @return $this
     */
    public function setStoreId(?string $storeId): static
    {
        if (is_null($storeId)) {
            throw new InvalidArgumentException('non-nullable storeId cannot be null');
        }
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \Brevo\Client\Models\OrderIdentifiers|null
     */
    public function getIdentifiers(): ?\Brevo\Client\Models\OrderIdentifiers
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \Brevo\Client\Models\OrderIdentifiers|null $identifiers identifiers
     *
     * @return $this
     */
    public function setIdentifiers(?\Brevo\Client\Models\OrderIdentifiers $identifiers): static
    {
        if (is_null($identifiers)) {
            throw new InvalidArgumentException('non-nullable identifiers cannot be null');
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \Brevo\Client\Models\OrderBilling|null
     */
    public function getBilling(): ?\Brevo\Client\Models\OrderBilling
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \Brevo\Client\Models\OrderBilling|null $billing billing
     *
     * @return $this
     */
    public function setBilling(?\Brevo\Client\Models\OrderBilling $billing): static
    {
        if (is_null($billing)) {
            throw new InvalidArgumentException('non-nullable billing cannot be null');
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return string[]|null
     */
    public function getCoupons(): ?array
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param string[]|null $coupons Coupons applied to the order. Stored case insensitive.
     *
     * @return $this
     */
    public function setCoupons(?array $coupons): static
    {
        if (is_null($coupons)) {
            throw new InvalidArgumentException('non-nullable coupons cannot be null');
        }
        $this->container['coupons'] = $coupons;

        return $this;
    }
}


