<?php
/**
 * ExportWebhooksHistoryRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * ExportWebhooksHistoryRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ExportWebhooksHistoryRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'exportWebhooksHistory_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => 'string',
        'event' => 'string',
        'notifyURL' => 'string',
        'days' => 'int',
        'startDate' => 'string',
        'endDate' => 'string',
        'sort' => 'string',
        'webhookId' => 'int',
        'email' => 'string',
        'messageId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'event' => null,
        'notifyURL' => null,
        'days' => null,
        'startDate' => null,
        'endDate' => null,
        'sort' => null,
        'webhookId' => null,
        'email' => null,
        'messageId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'event' => false,
        'notifyURL' => false,
        'days' => false,
        'startDate' => false,
        'endDate' => false,
        'sort' => false,
        'webhookId' => false,
        'email' => false,
        'messageId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'event' => 'event',
        'notifyURL' => 'notifyURL',
        'days' => 'days',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'sort' => 'sort',
        'webhookId' => 'webhookId',
        'email' => 'email',
        'messageId' => 'messageId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'event' => 'setEvent',
        'notifyURL' => 'setNotifyURL',
        'days' => 'setDays',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'sort' => 'setSort',
        'webhookId' => 'setWebhookId',
        'email' => 'setEmail',
        'messageId' => 'setMessageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'event' => 'getEvent',
        'notifyURL' => 'getNotifyURL',
        'days' => 'getDays',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'sort' => 'getSort',
        'webhookId' => 'getWebhookId',
        'email' => 'getEmail',
        'messageId' => 'getMessageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const TYPE_TRANSACTIONAL = 'transactional';
    public const TYPE_MARKETING = 'marketing';
    public const EVENT_INVALID_PARAMETER = 'invalid_parameter';
    public const EVENT_MISSING_PARAMETER = 'missing_parameter';
    public const EVENT_HARD_BOUNCE = 'hardBounce';
    public const EVENT_SOFT_BOUNCE = 'softBounce';
    public const EVENT_DELIVERED = 'delivered';
    public const EVENT_SPAM = 'spam';
    public const EVENT_REQUEST = 'request';
    public const EVENT_OPENED = 'opened';
    public const EVENT_CLICK = 'click';
    public const EVENT_INVALID = 'invalid';
    public const EVENT_DEFERRED = 'deferred';
    public const EVENT_BLOCKED = 'blocked';
    public const EVENT_UNSUBSCRIBED = 'unsubscribed';
    public const EVENT_ERROR = 'error';
    public const EVENT_UNIQUE_OPENED = 'uniqueOpened';
    public const EVENT_LOADED_BY_PROXY = 'loadedByProxy';
    public const EVENT_ALL_EVENTS = 'allEvents';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRANSACTIONAL,
            self::TYPE_MARKETING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_INVALID_PARAMETER,
            self::EVENT_MISSING_PARAMETER,
            self::EVENT_HARD_BOUNCE,
            self::EVENT_SOFT_BOUNCE,
            self::EVENT_DELIVERED,
            self::EVENT_SPAM,
            self::EVENT_REQUEST,
            self::EVENT_OPENED,
            self::EVENT_CLICK,
            self::EVENT_INVALID,
            self::EVENT_DEFERRED,
            self::EVENT_BLOCKED,
            self::EVENT_UNSUBSCRIBED,
            self::EVENT_ERROR,
            self::EVENT_UNIQUE_OPENED,
            self::EVENT_LOADED_BY_PROXY,
            self::EVENT_ALL_EVENTS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('notifyURL', $data ?? [], null);
        $this->setIfExists('days', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('webhookId', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['notifyURL'] === null) {
            $invalidProperties[] = "'notifyURL' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Filter the history based on webhook type
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent(): string
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event Filter the history for a specific event type
     *
     * @return $this
     */
    public function setEvent(string $event): static
    {
        if (is_null($event)) {
            throw new InvalidArgumentException('non-nullable event cannot be null');
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!in_array($event, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets notifyURL
     *
     * @return string
     */
    public function getNotifyURL(): string
    {
        return $this->container['notifyURL'];
    }

    /**
     * Sets notifyURL
     *
     * @param string $notifyURL Webhook URL to receive CSV file link
     *
     * @return $this
     */
    public function setNotifyURL(string $notifyURL): static
    {
        if (is_null($notifyURL)) {
            throw new InvalidArgumentException('non-nullable notifyURL cannot be null');
        }
        $this->container['notifyURL'] = $notifyURL;

        return $this;
    }

    /**
     * Gets days
     *
     * @return int|null
     */
    public function getDays(): ?int
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param int|null $days Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
     *
     * @return $this
     */
    public function setDays(?int $days): static
    {
        if (is_null($days)) {
            throw new InvalidArgumentException('non-nullable days cannot be null');
        }
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string|null
     */
    public function getStartDate(): ?string
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string|null $startDate Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate
     *
     * @return $this
     */
    public function setStartDate(?string $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string|null
     */
    public function getEndDate(): ?string
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string|null $endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     *
     * @return $this
     */
    public function setEndDate(?string $endDate): static
    {
        if (is_null($endDate)) {
            throw new InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string|null
     */
    public function getSort(): ?string
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string|null $sort Sorting order of records (asc or desc)
     *
     * @return $this
     */
    public function setSort(?string $sort): static
    {
        if (is_null($sort)) {
            throw new InvalidArgumentException('non-nullable sort cannot be null');
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets webhookId
     *
     * @return int|null
     */
    public function getWebhookId(): ?int
    {
        return $this->container['webhookId'];
    }

    /**
     * Sets webhookId
     *
     * @param int|null $webhookId Filter the history for a specific webhook id
     *
     * @return $this
     */
    public function setWebhookId(?int $webhookId): static
    {
        if (is_null($webhookId)) {
            throw new InvalidArgumentException('non-nullable webhookId cannot be null');
        }
        $this->container['webhookId'] = $webhookId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Filter the history for a specific email
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return int|null
     */
    public function getMessageId(): ?int
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param int|null $messageId Filter the history for a specific message id. Applicable only for transactional webhooks.
     *
     * @return $this
     */
    public function setMessageId(?int $messageId): static
    {
        if (is_null($messageId)) {
            throw new InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }
}


