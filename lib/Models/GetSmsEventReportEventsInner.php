<?php
/**
 * GetSmsEventReportEventsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetSmsEventReportEventsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetSmsEventReportEventsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getSmsEventReport_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'phoneNumber' => 'string',
        'date' => 'string',
        'messageId' => 'string',
        'event' => 'string',
        'reason' => 'string',
        'reply' => 'string',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'phoneNumber' => null,
        'date' => null,
        'messageId' => null,
        'event' => null,
        'reason' => null,
        'reply' => null,
        'tag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'phoneNumber' => false,
        'date' => false,
        'messageId' => false,
        'event' => false,
        'reason' => false,
        'reply' => false,
        'tag' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'phoneNumber' => 'phoneNumber',
        'date' => 'date',
        'messageId' => 'messageId',
        'event' => 'event',
        'reason' => 'reason',
        'reply' => 'reply',
        'tag' => 'tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'phoneNumber' => 'setPhoneNumber',
        'date' => 'setDate',
        'messageId' => 'setMessageId',
        'event' => 'setEvent',
        'reason' => 'setReason',
        'reply' => 'setReply',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'phoneNumber' => 'getPhoneNumber',
        'date' => 'getDate',
        'messageId' => 'getMessageId',
        'event' => 'getEvent',
        'reason' => 'getReason',
        'reply' => 'getReply',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const EVENT_BOUNCES = 'bounces';
    public const EVENT_HARD_BOUNCES = 'hardBounces';
    public const EVENT_SOFT_BOUNCES = 'softBounces';
    public const EVENT_DELIVERED = 'delivered';
    public const EVENT_SENT = 'sent';
    public const EVENT_ACCEPTED = 'accepted';
    public const EVENT_UNSUBSCRIPTION = 'unsubscription';
    public const EVENT_REPLIES = 'replies';
    public const EVENT_BLOCKED = 'blocked';
    public const EVENT_REJECTED = 'rejected';
    public const EVENT_SKIPPED = 'skipped';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_BOUNCES,
            self::EVENT_HARD_BOUNCES,
            self::EVENT_SOFT_BOUNCES,
            self::EVENT_DELIVERED,
            self::EVENT_SENT,
            self::EVENT_ACCEPTED,
            self::EVENT_UNSUBSCRIPTION,
            self::EVENT_REPLIES,
            self::EVENT_BLOCKED,
            self::EVENT_REJECTED,
            self::EVENT_SKIPPED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phoneNumber', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('reply', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event', must be one of '%s'",
                $this->container['event'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber(): ?string
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber Phone number which has generated the event
     *
     * @return $this
     */
    public function setPhoneNumber(?string $phoneNumber): static
    {
        if (is_null($phoneNumber)) {
            throw new InvalidArgumentException('non-nullable phoneNumber cannot be null');
        }
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate(): ?string
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date UTC date-time on which the event has been generated
     *
     * @return $this
     */
    public function setDate(?string $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string|null
     */
    public function getMessageId(): ?string
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string|null $messageId Message ID which generated the event
     *
     * @return $this
     */
    public function setMessageId(?string $messageId): static
    {
        if (is_null($messageId)) {
            throw new InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent(): ?string
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event Event which occurred
     *
     * @return $this
     */
    public function setEvent(?string $event): static
    {
        if (is_null($event)) {
            throw new InvalidArgumentException('non-nullable event cannot be null');
        }
        $allowedValues = $this->getEventAllowableValues();
        if (!in_array($event, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event', must be one of '%s'",
                    $event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason(): ?string
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason of bounce (only available if the event is hardbounce or softbounce)
     *
     * @return $this
     */
    public function setReason(?string $reason): static
    {
        if (is_null($reason)) {
            throw new InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reply
     *
     * @return string|null
     */
    public function getReply(): ?string
    {
        return $this->container['reply'];
    }

    /**
     * Sets reply
     *
     * @param string|null $reply reply
     *
     * @return $this
     */
    public function setReply(?string $reply): static
    {
        if (is_null($reply)) {
            throw new InvalidArgumentException('non-nullable reply cannot be null');
        }
        $this->container['reply'] = $reply;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag(): ?string
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Tag of the SMS which generated the event
     *
     * @return $this
     */
    public function setTag(?string $tag): static
    {
        if (is_null($tag)) {
            throw new InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }
}


