<?php
/**
 * CreateDoiContact
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CreateDoiContact Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateDoiContact extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'createDoiContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'email' => 'string',
        'includeListIds' => 'int[]',
        'templateId' => 'int',
        'redirectionUrl' => 'string',
        'attributes' => 'array<string,\Brevo\Client\Models\CreateDoiContactAttributesValue>',
        'excludeListIds' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'email' => 'email',
        'includeListIds' => 'int64',
        'templateId' => 'int64',
        'redirectionUrl' => 'url',
        'attributes' => null,
        'excludeListIds' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'email' => false,
        'includeListIds' => false,
        'templateId' => false,
        'redirectionUrl' => false,
        'attributes' => false,
        'excludeListIds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'email' => 'email',
        'includeListIds' => 'includeListIds',
        'templateId' => 'templateId',
        'redirectionUrl' => 'redirectionUrl',
        'attributes' => 'attributes',
        'excludeListIds' => 'excludeListIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'email' => 'setEmail',
        'includeListIds' => 'setIncludeListIds',
        'templateId' => 'setTemplateId',
        'redirectionUrl' => 'setRedirectionUrl',
        'attributes' => 'setAttributes',
        'excludeListIds' => 'setExcludeListIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'email' => 'getEmail',
        'includeListIds' => 'getIncludeListIds',
        'templateId' => 'getTemplateId',
        'redirectionUrl' => 'getRedirectionUrl',
        'attributes' => 'getAttributes',
        'excludeListIds' => 'getExcludeListIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('includeListIds', $data ?? [], null);
        $this->setIfExists('templateId', $data ?? [], null);
        $this->setIfExists('redirectionUrl', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('excludeListIds', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['includeListIds'] === null) {
            $invalidProperties[] = "'includeListIds' can't be null";
        }
        if ($this->container['templateId'] === null) {
            $invalidProperties[] = "'templateId' can't be null";
        }
        if ($this->container['redirectionUrl'] === null) {
            $invalidProperties[] = "'redirectionUrl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail(): string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.
     *
     * @return $this
     */
    public function setEmail(string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets includeListIds
     *
     * @return int[]
     */
    public function getIncludeListIds(): array
    {
        return $this->container['includeListIds'];
    }

    /**
     * Sets includeListIds
     *
     * @param int[] $includeListIds Lists under user account where contact should be added
     *
     * @return $this
     */
    public function setIncludeListIds(array $includeListIds): static
    {
        if (is_null($includeListIds)) {
            throw new InvalidArgumentException('non-nullable includeListIds cannot be null');
        }
        $this->container['includeListIds'] = $includeListIds;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int
     */
    public function getTemplateId(): int
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int $templateId Id of the Double opt-in (DOI) template
     *
     * @return $this
     */
    public function setTemplateId(int $templateId): static
    {
        if (is_null($templateId)) {
            throw new InvalidArgumentException('non-nullable templateId cannot be null');
        }
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets redirectionUrl
     *
     * @return string
     */
    public function getRedirectionUrl(): string
    {
        return $this->container['redirectionUrl'];
    }

    /**
     * Sets redirectionUrl
     *
     * @param string $redirectionUrl URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag **{{ params.DOIurl }}**.
     *
     * @return $this
     */
    public function setRedirectionUrl(string $redirectionUrl): static
    {
        if (is_null($redirectionUrl)) {
            throw new InvalidArgumentException('non-nullable redirectionUrl cannot be null');
        }
        $this->container['redirectionUrl'] = $redirectionUrl;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,\Brevo\Client\Models\CreateDoiContactAttributesValue>|null
     */
    public function getAttributes(): ?array
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,\Brevo\Client\Models\CreateDoiContactAttributesValue>|null $attributes Pass the set of attributes and their values. **These attributes must be present in your Brevo account**. For eg. **{'FNAME':'Elly', 'LNAME':'Roger', 'COUNTRIES':['India','China']}**
     *
     * @return $this
     */
    public function setAttributes(?array $attributes): static
    {
        if (is_null($attributes)) {
            throw new InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets excludeListIds
     *
     * @return int[]|null
     */
    public function getExcludeListIds(): ?array
    {
        return $this->container['excludeListIds'];
    }

    /**
     * Sets excludeListIds
     *
     * @param int[]|null $excludeListIds Lists under user account where contact should not be added
     *
     * @return $this
     */
    public function setExcludeListIds(?array $excludeListIds): static
    {
        if (is_null($excludeListIds)) {
            throw new InvalidArgumentException('non-nullable excludeListIds cannot be null');
        }
        $this->container['excludeListIds'] = $excludeListIds;

        return $this;
    }
}


