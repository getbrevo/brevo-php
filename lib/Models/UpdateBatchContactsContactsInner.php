<?php
/**
 * UpdateBatchContactsContactsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * UpdateBatchContactsContactsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UpdateBatchContactsContactsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'updateBatchContacts_contacts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'email' => 'string',
        'id' => 'int',
        'sms' => 'string',
        'extId' => 'string',
        'attributes' => 'array<string,mixed>',
        'emailBlacklisted' => 'bool',
        'smsBlacklisted' => 'bool',
        'listIds' => 'int[]',
        'unlinkListIds' => 'int[]',
        'smtpBlacklistSender' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'email' => 'email',
        'id' => 'int64',
        'sms' => null,
        'extId' => null,
        'attributes' => null,
        'emailBlacklisted' => null,
        'smsBlacklisted' => null,
        'listIds' => 'int64',
        'unlinkListIds' => 'int64',
        'smtpBlacklistSender' => 'email'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'email' => false,
        'id' => false,
        'sms' => false,
        'extId' => false,
        'attributes' => false,
        'emailBlacklisted' => false,
        'smsBlacklisted' => false,
        'listIds' => false,
        'unlinkListIds' => false,
        'smtpBlacklistSender' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'email' => 'email',
        'id' => 'id',
        'sms' => 'sms',
        'extId' => 'ext_id',
        'attributes' => 'attributes',
        'emailBlacklisted' => 'emailBlacklisted',
        'smsBlacklisted' => 'smsBlacklisted',
        'listIds' => 'listIds',
        'unlinkListIds' => 'unlinkListIds',
        'smtpBlacklistSender' => 'smtpBlacklistSender'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'email' => 'setEmail',
        'id' => 'setId',
        'sms' => 'setSms',
        'extId' => 'setExtId',
        'attributes' => 'setAttributes',
        'emailBlacklisted' => 'setEmailBlacklisted',
        'smsBlacklisted' => 'setSmsBlacklisted',
        'listIds' => 'setListIds',
        'unlinkListIds' => 'setUnlinkListIds',
        'smtpBlacklistSender' => 'setSmtpBlacklistSender'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'email' => 'getEmail',
        'id' => 'getId',
        'sms' => 'getSms',
        'extId' => 'getExtId',
        'attributes' => 'getAttributes',
        'emailBlacklisted' => 'getEmailBlacklisted',
        'smsBlacklisted' => 'getSmsBlacklisted',
        'listIds' => 'getListIds',
        'unlinkListIds' => 'getUnlinkListIds',
        'smtpBlacklistSender' => 'getSmtpBlacklistSender'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sms', $data ?? [], null);
        $this->setIfExists('extId', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('emailBlacklisted', $data ?? [], null);
        $this->setIfExists('smsBlacklisted', $data ?? [], null);
        $this->setIfExists('listIds', $data ?? [], null);
        $this->setIfExists('unlinkListIds', $data ?? [], null);
        $this->setIfExists('smtpBlacklistSender', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return string|null
     */
    public function getSms(): ?string
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param string|null $sms SMS of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     *
     * @return $this
     */
    public function setSms(?string $sms): static
    {
        if (is_null($sms)) {
            throw new InvalidArgumentException('non-nullable sms cannot be null');
        }
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets extId
     *
     * @return string|null
     */
    public function getExtId(): ?string
    {
        return $this->container['extId'];
    }

    /**
     * Sets extId
     *
     * @param string|null $extId Pass your own Id to update ext_id of a contact.
     *
     * @return $this
     */
    public function setExtId(?string $extId): static
    {
        if (is_null($extId)) {
            throw new InvalidArgumentException('non-nullable extId cannot be null');
        }
        $this->container['extId'] = $extId;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,mixed>|null
     */
    public function getAttributes(): ?array
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,mixed>|null $attributes Pass the set of attributes to be updated. **These attributes must be present in your account**. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, **{ \"EMAIL\":\"newemail@domain.com\", \"FNAME\":\"Ellie\", \"LNAME\":\"Roger\"}**. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in **SMS** field should be passed with proper country code. For example: **{\"SMS\":\"+91xxxxxxxxxx\"} or {\"SMS\":\"0091xxxxxxxxxx\"}**
     *
     * @return $this
     */
    public function setAttributes(?array $attributes): static
    {
        if (is_null($attributes)) {
            throw new InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets emailBlacklisted
     *
     * @return bool|null
     */
    public function getEmailBlacklisted(): ?bool
    {
        return $this->container['emailBlacklisted'];
    }

    /**
     * Sets emailBlacklisted
     *
     * @param bool|null $emailBlacklisted Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
     *
     * @return $this
     */
    public function setEmailBlacklisted(?bool $emailBlacklisted): static
    {
        if (is_null($emailBlacklisted)) {
            throw new InvalidArgumentException('non-nullable emailBlacklisted cannot be null');
        }
        $this->container['emailBlacklisted'] = $emailBlacklisted;

        return $this;
    }

    /**
     * Gets smsBlacklisted
     *
     * @return bool|null
     */
    public function getSmsBlacklisted(): ?bool
    {
        return $this->container['smsBlacklisted'];
    }

    /**
     * Sets smsBlacklisted
     *
     * @param bool|null $smsBlacklisted Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
     *
     * @return $this
     */
    public function setSmsBlacklisted(?bool $smsBlacklisted): static
    {
        if (is_null($smsBlacklisted)) {
            throw new InvalidArgumentException('non-nullable smsBlacklisted cannot be null');
        }
        $this->container['smsBlacklisted'] = $smsBlacklisted;

        return $this;
    }

    /**
     * Gets listIds
     *
     * @return int[]|null
     */
    public function getListIds(): ?array
    {
        return $this->container['listIds'];
    }

    /**
     * Sets listIds
     *
     * @param int[]|null $listIds Ids of the lists to add the contact to
     *
     * @return $this
     */
    public function setListIds(?array $listIds): static
    {
        if (is_null($listIds)) {
            throw new InvalidArgumentException('non-nullable listIds cannot be null');
        }
        $this->container['listIds'] = $listIds;

        return $this;
    }

    /**
     * Gets unlinkListIds
     *
     * @return int[]|null
     */
    public function getUnlinkListIds(): ?array
    {
        return $this->container['unlinkListIds'];
    }

    /**
     * Sets unlinkListIds
     *
     * @param int[]|null $unlinkListIds Ids of the lists to remove the contact from
     *
     * @return $this
     */
    public function setUnlinkListIds(?array $unlinkListIds): static
    {
        if (is_null($unlinkListIds)) {
            throw new InvalidArgumentException('non-nullable unlinkListIds cannot be null');
        }
        $this->container['unlinkListIds'] = $unlinkListIds;

        return $this;
    }

    /**
     * Gets smtpBlacklistSender
     *
     * @return string[]|null
     */
    public function getSmtpBlacklistSender(): ?array
    {
        return $this->container['smtpBlacklistSender'];
    }

    /**
     * Sets smtpBlacklistSender
     *
     * @param string[]|null $smtpBlacklistSender transactional email forbidden sender for contact. Use only for email Contact
     *
     * @return $this
     */
    public function setSmtpBlacklistSender(?array $smtpBlacklistSender): static
    {
        if (is_null($smtpBlacklistSender)) {
            throw new InvalidArgumentException('non-nullable smtpBlacklistSender cannot be null');
        }
        $this->container['smtpBlacklistSender'] = $smtpBlacklistSender;

        return $this;
    }
}


