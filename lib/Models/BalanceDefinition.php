<?php
/**
 * BalanceDefinition
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * BalanceDefinition Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BalanceDefinition extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'balanceDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'meta' => 'object',
        'unit' => 'string',
        'minAmount' => 'float',
        'maxAmount' => 'float',
        'maximumCreditAmountLimit' => 'float',
        'maximumDebitAmountLimit' => 'float',
        'balanceOptionAmountOvertakingStrategy' => 'string',
        'balanceOptionCreditRounding' => 'string',
        'balanceOptionDebitRounding' => 'string',
        'balanceAvailabilityDurationValue' => 'float',
        'balanceAvailabilityDurationUnit' => 'string',
        'balanceAvailabilityDurationModifier' => 'string',
        'balanceExpirationDate' => '\DateTime',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'description' => null,
        'meta' => null,
        'unit' => null,
        'minAmount' => null,
        'maxAmount' => null,
        'maximumCreditAmountLimit' => null,
        'maximumDebitAmountLimit' => null,
        'balanceOptionAmountOvertakingStrategy' => null,
        'balanceOptionCreditRounding' => null,
        'balanceOptionDebitRounding' => null,
        'balanceAvailabilityDurationValue' => null,
        'balanceAvailabilityDurationUnit' => null,
        'balanceAvailabilityDurationModifier' => null,
        'balanceExpirationDate' => 'date-time',
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => false,
        'meta' => false,
        'unit' => false,
        'minAmount' => false,
        'maxAmount' => false,
        'maximumCreditAmountLimit' => false,
        'maximumDebitAmountLimit' => false,
        'balanceOptionAmountOvertakingStrategy' => false,
        'balanceOptionCreditRounding' => false,
        'balanceOptionDebitRounding' => false,
        'balanceAvailabilityDurationValue' => false,
        'balanceAvailabilityDurationUnit' => false,
        'balanceAvailabilityDurationModifier' => false,
        'balanceExpirationDate' => false,
        'createdAt' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'meta' => 'meta',
        'unit' => 'unit',
        'minAmount' => 'minAmount',
        'maxAmount' => 'maxAmount',
        'maximumCreditAmountLimit' => 'maximumCreditAmountLimit',
        'maximumDebitAmountLimit' => 'maximumDebitAmountLimit',
        'balanceOptionAmountOvertakingStrategy' => 'balanceOptionAmountOvertakingStrategy',
        'balanceOptionCreditRounding' => 'balanceOptionCreditRounding',
        'balanceOptionDebitRounding' => 'balanceOptionDebitRounding',
        'balanceAvailabilityDurationValue' => 'balanceAvailabilityDurationValue',
        'balanceAvailabilityDurationUnit' => 'balanceAvailabilityDurationUnit',
        'balanceAvailabilityDurationModifier' => 'balanceAvailabilityDurationModifier',
        'balanceExpirationDate' => 'balanceExpirationDate',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'meta' => 'setMeta',
        'unit' => 'setUnit',
        'minAmount' => 'setMinAmount',
        'maxAmount' => 'setMaxAmount',
        'maximumCreditAmountLimit' => 'setMaximumCreditAmountLimit',
        'maximumDebitAmountLimit' => 'setMaximumDebitAmountLimit',
        'balanceOptionAmountOvertakingStrategy' => 'setBalanceOptionAmountOvertakingStrategy',
        'balanceOptionCreditRounding' => 'setBalanceOptionCreditRounding',
        'balanceOptionDebitRounding' => 'setBalanceOptionDebitRounding',
        'balanceAvailabilityDurationValue' => 'setBalanceAvailabilityDurationValue',
        'balanceAvailabilityDurationUnit' => 'setBalanceAvailabilityDurationUnit',
        'balanceAvailabilityDurationModifier' => 'setBalanceAvailabilityDurationModifier',
        'balanceExpirationDate' => 'setBalanceExpirationDate',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'meta' => 'getMeta',
        'unit' => 'getUnit',
        'minAmount' => 'getMinAmount',
        'maxAmount' => 'getMaxAmount',
        'maximumCreditAmountLimit' => 'getMaximumCreditAmountLimit',
        'maximumDebitAmountLimit' => 'getMaximumDebitAmountLimit',
        'balanceOptionAmountOvertakingStrategy' => 'getBalanceOptionAmountOvertakingStrategy',
        'balanceOptionCreditRounding' => 'getBalanceOptionCreditRounding',
        'balanceOptionDebitRounding' => 'getBalanceOptionDebitRounding',
        'balanceAvailabilityDurationValue' => 'getBalanceAvailabilityDurationValue',
        'balanceAvailabilityDurationUnit' => 'getBalanceAvailabilityDurationUnit',
        'balanceAvailabilityDurationModifier' => 'getBalanceAvailabilityDurationModifier',
        'balanceExpirationDate' => 'getBalanceExpirationDate',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const BALANCE_AVAILABILITY_DURATION_MODIFIER_START_OF_PERIOD = 'startOfPeriod';
    public const BALANCE_AVAILABILITY_DURATION_MODIFIER_END_OF_PERIOD = 'endOfPeriod';
    public const BALANCE_AVAILABILITY_DURATION_MODIFIER_NO_MODIFICATION = 'noModification';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalanceAvailabilityDurationModifierAllowableValues()
    {
        return [
            self::BALANCE_AVAILABILITY_DURATION_MODIFIER_START_OF_PERIOD,
            self::BALANCE_AVAILABILITY_DURATION_MODIFIER_END_OF_PERIOD,
            self::BALANCE_AVAILABILITY_DURATION_MODIFIER_NO_MODIFICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('minAmount', $data ?? [], null);
        $this->setIfExists('maxAmount', $data ?? [], null);
        $this->setIfExists('maximumCreditAmountLimit', $data ?? [], null);
        $this->setIfExists('maximumDebitAmountLimit', $data ?? [], null);
        $this->setIfExists('balanceOptionAmountOvertakingStrategy', $data ?? [], null);
        $this->setIfExists('balanceOptionCreditRounding', $data ?? [], null);
        $this->setIfExists('balanceOptionDebitRounding', $data ?? [], null);
        $this->setIfExists('balanceAvailabilityDurationValue', $data ?? [], null);
        $this->setIfExists('balanceAvailabilityDurationUnit', $data ?? [], null);
        $this->setIfExists('balanceAvailabilityDurationModifier', $data ?? [], null);
        $this->setIfExists('balanceExpirationDate', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getBalanceAvailabilityDurationModifierAllowableValues();
        if (!is_null($this->container['balanceAvailabilityDurationModifier']) && !in_array($this->container['balanceAvailabilityDurationModifier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'balanceAvailabilityDurationModifier', must be one of '%s'",
                $this->container['balanceAvailabilityDurationModifier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the balance definition.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name for the balance definition
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for the balance definition
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object|null
     */
    public function getMeta(): ?object
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object|null $meta Additional metadata related to the balance definition.
     *
     * @return $this
     */
    public function setMeta(?object $meta): static
    {
        if (is_null($meta)) {
            throw new InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit(): ?string
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit The unit for this balance definition
     *
     * @return $this
     */
    public function setUnit(?string $unit): static
    {
        if (is_null($unit)) {
            throw new InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets minAmount
     *
     * @return float|null
     */
    public function getMinAmount(): ?float
    {
        return $this->container['minAmount'];
    }

    /**
     * Sets minAmount
     *
     * @param float|null $minAmount Minimum possible amount for balance
     *
     * @return $this
     */
    public function setMinAmount(?float $minAmount): static
    {
        if (is_null($minAmount)) {
            throw new InvalidArgumentException('non-nullable minAmount cannot be null');
        }
        $this->container['minAmount'] = $minAmount;

        return $this;
    }

    /**
     * Gets maxAmount
     *
     * @return float|null
     */
    public function getMaxAmount(): ?float
    {
        return $this->container['maxAmount'];
    }

    /**
     * Sets maxAmount
     *
     * @param float|null $maxAmount Maximum possible amount for balance
     *
     * @return $this
     */
    public function setMaxAmount(?float $maxAmount): static
    {
        if (is_null($maxAmount)) {
            throw new InvalidArgumentException('non-nullable maxAmount cannot be null');
        }
        $this->container['maxAmount'] = $maxAmount;

        return $this;
    }

    /**
     * Gets maximumCreditAmountLimit
     *
     * @return float|null
     */
    public function getMaximumCreditAmountLimit(): ?float
    {
        return $this->container['maximumCreditAmountLimit'];
    }

    /**
     * Sets maximumCreditAmountLimit
     *
     * @param float|null $maximumCreditAmountLimit Maximum credit amount limit per operation
     *
     * @return $this
     */
    public function setMaximumCreditAmountLimit(?float $maximumCreditAmountLimit): static
    {
        if (is_null($maximumCreditAmountLimit)) {
            throw new InvalidArgumentException('non-nullable maximumCreditAmountLimit cannot be null');
        }
        $this->container['maximumCreditAmountLimit'] = $maximumCreditAmountLimit;

        return $this;
    }

    /**
     * Gets maximumDebitAmountLimit
     *
     * @return float|null
     */
    public function getMaximumDebitAmountLimit(): ?float
    {
        return $this->container['maximumDebitAmountLimit'];
    }

    /**
     * Sets maximumDebitAmountLimit
     *
     * @param float|null $maximumDebitAmountLimit Maximum debit amount limit per operation
     *
     * @return $this
     */
    public function setMaximumDebitAmountLimit(?float $maximumDebitAmountLimit): static
    {
        if (is_null($maximumDebitAmountLimit)) {
            throw new InvalidArgumentException('non-nullable maximumDebitAmountLimit cannot be null');
        }
        $this->container['maximumDebitAmountLimit'] = $maximumDebitAmountLimit;

        return $this;
    }

    /**
     * Gets balanceOptionAmountOvertakingStrategy
     *
     * @return string|null
     */
    public function getBalanceOptionAmountOvertakingStrategy(): ?string
    {
        return $this->container['balanceOptionAmountOvertakingStrategy'];
    }

    /**
     * Sets balanceOptionAmountOvertakingStrategy
     *
     * @param string|null $balanceOptionAmountOvertakingStrategy Partial enables partial credit of balance if maximum balance limit is reaching. Strict enables rejection of transaction if it will breach the max credit amount limit.
     *
     * @return $this
     */
    public function setBalanceOptionAmountOvertakingStrategy(?string $balanceOptionAmountOvertakingStrategy): static
    {
        if (is_null($balanceOptionAmountOvertakingStrategy)) {
            throw new InvalidArgumentException('non-nullable balanceOptionAmountOvertakingStrategy cannot be null');
        }
        $this->container['balanceOptionAmountOvertakingStrategy'] = $balanceOptionAmountOvertakingStrategy;

        return $this;
    }

    /**
     * Gets balanceOptionCreditRounding
     *
     * @return string|null
     */
    public function getBalanceOptionCreditRounding(): ?string
    {
        return $this->container['balanceOptionCreditRounding'];
    }

    /**
     * Sets balanceOptionCreditRounding
     *
     * @param string|null $balanceOptionCreditRounding balanceOptionCreditRounding
     *
     * @return $this
     */
    public function setBalanceOptionCreditRounding(?string $balanceOptionCreditRounding): static
    {
        if (is_null($balanceOptionCreditRounding)) {
            throw new InvalidArgumentException('non-nullable balanceOptionCreditRounding cannot be null');
        }
        $this->container['balanceOptionCreditRounding'] = $balanceOptionCreditRounding;

        return $this;
    }

    /**
     * Gets balanceOptionDebitRounding
     *
     * @return string|null
     */
    public function getBalanceOptionDebitRounding(): ?string
    {
        return $this->container['balanceOptionDebitRounding'];
    }

    /**
     * Sets balanceOptionDebitRounding
     *
     * @param string|null $balanceOptionDebitRounding balanceOptionDebitRounding
     *
     * @return $this
     */
    public function setBalanceOptionDebitRounding(?string $balanceOptionDebitRounding): static
    {
        if (is_null($balanceOptionDebitRounding)) {
            throw new InvalidArgumentException('non-nullable balanceOptionDebitRounding cannot be null');
        }
        $this->container['balanceOptionDebitRounding'] = $balanceOptionDebitRounding;

        return $this;
    }

    /**
     * Gets balanceAvailabilityDurationValue
     *
     * @return float|null
     */
    public function getBalanceAvailabilityDurationValue(): ?float
    {
        return $this->container['balanceAvailabilityDurationValue'];
    }

    /**
     * Sets balanceAvailabilityDurationValue
     *
     * @param float|null $balanceAvailabilityDurationValue Number of days/weeks/month/year for balance expiry
     *
     * @return $this
     */
    public function setBalanceAvailabilityDurationValue(?float $balanceAvailabilityDurationValue): static
    {
        if (is_null($balanceAvailabilityDurationValue)) {
            throw new InvalidArgumentException('non-nullable balanceAvailabilityDurationValue cannot be null');
        }
        $this->container['balanceAvailabilityDurationValue'] = $balanceAvailabilityDurationValue;

        return $this;
    }

    /**
     * Gets balanceAvailabilityDurationUnit
     *
     * @return string|null
     */
    public function getBalanceAvailabilityDurationUnit(): ?string
    {
        return $this->container['balanceAvailabilityDurationUnit'];
    }

    /**
     * Sets balanceAvailabilityDurationUnit
     *
     * @param string|null $balanceAvailabilityDurationUnit Unit of time for the balance's availability (e.g., day/week/month/year).
     *
     * @return $this
     */
    public function setBalanceAvailabilityDurationUnit(?string $balanceAvailabilityDurationUnit): static
    {
        if (is_null($balanceAvailabilityDurationUnit)) {
            throw new InvalidArgumentException('non-nullable balanceAvailabilityDurationUnit cannot be null');
        }
        $this->container['balanceAvailabilityDurationUnit'] = $balanceAvailabilityDurationUnit;

        return $this;
    }

    /**
     * Gets balanceAvailabilityDurationModifier
     *
     * @return string|null
     */
    public function getBalanceAvailabilityDurationModifier(): ?string
    {
        return $this->container['balanceAvailabilityDurationModifier'];
    }

    /**
     * Sets balanceAvailabilityDurationModifier
     *
     * @param string|null $balanceAvailabilityDurationModifier startOfPeriod depicts the balancy expiry on start of day/week/month/year. endOfPeriod depicts the balancy expiry on end of day/week/month/year
     *
     * @return $this
     */
    public function setBalanceAvailabilityDurationModifier(?string $balanceAvailabilityDurationModifier): static
    {
        if (is_null($balanceAvailabilityDurationModifier)) {
            throw new InvalidArgumentException('non-nullable balanceAvailabilityDurationModifier cannot be null');
        }
        $allowedValues = $this->getBalanceAvailabilityDurationModifierAllowableValues();
        if (!in_array($balanceAvailabilityDurationModifier, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'balanceAvailabilityDurationModifier', must be one of '%s'",
                    $balanceAvailabilityDurationModifier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balanceAvailabilityDurationModifier'] = $balanceAvailabilityDurationModifier;

        return $this;
    }

    /**
     * Gets balanceExpirationDate
     *
     * @return \DateTime|null
     */
    public function getBalanceExpirationDate(): ?\DateTime
    {
        return $this->container['balanceExpirationDate'];
    }

    /**
     * Sets balanceExpirationDate
     *
     * @param \DateTime|null $balanceExpirationDate Date when the balance expires and can no longer be used, in dd/mm format. The balance will be expired when this date appears next in the calendar and only one of balanceExpirationDate or balance availability fields can be used.
     *
     * @return $this
     */
    public function setBalanceExpirationDate(?\DateTime $balanceExpirationDate): static
    {
        if (is_null($balanceExpirationDate)) {
            throw new InvalidArgumentException('non-nullable balanceExpirationDate cannot be null');
        }
        $this->container['balanceExpirationDate'] = $balanceExpirationDate;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
}


