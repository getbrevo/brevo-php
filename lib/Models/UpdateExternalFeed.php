<?php
/**
 * UpdateExternalFeed
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * UpdateExternalFeed Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UpdateExternalFeed extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'updateExternalFeed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'url' => 'string',
        'authType' => 'string',
        'username' => 'string',
        'password' => 'string',
        'token' => 'string',
        'headers' => '\Brevo\Client\Models\GetExternalFeedByUUIDHeadersInner[]',
        'maxRetries' => 'int',
        'cache' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'url' => 'url',
        'authType' => null,
        'username' => null,
        'password' => null,
        'token' => null,
        'headers' => null,
        'maxRetries' => null,
        'cache' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'url' => false,
        'authType' => false,
        'username' => false,
        'password' => false,
        'token' => false,
        'headers' => false,
        'maxRetries' => false,
        'cache' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'url' => 'url',
        'authType' => 'authType',
        'username' => 'username',
        'password' => 'password',
        'token' => 'token',
        'headers' => 'headers',
        'maxRetries' => 'maxRetries',
        'cache' => 'cache'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'url' => 'setUrl',
        'authType' => 'setAuthType',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'token' => 'setToken',
        'headers' => 'setHeaders',
        'maxRetries' => 'setMaxRetries',
        'cache' => 'setCache'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'url' => 'getUrl',
        'authType' => 'getAuthType',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'token' => 'getToken',
        'headers' => 'getHeaders',
        'maxRetries' => 'getMaxRetries',
        'cache' => 'getCache'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const AUTH_TYPE_BASIC = 'basic';
    public const AUTH_TYPE_TOKEN = 'token';
    public const AUTH_TYPE_NO_AUTH = 'noAuth';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_BASIC,
            self::AUTH_TYPE_TOKEN,
            self::AUTH_TYPE_NO_AUTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('authType', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('maxRetries', $data ?? [], 5);
        $this->setIfExists('cache', $data ?? [], false);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['authType']) && !in_array($this->container['authType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authType', must be one of '%s'",
                $this->container['authType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['maxRetries']) && ($this->container['maxRetries'] > 5)) {
            $invalidProperties[] = "invalid value for 'maxRetries', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['maxRetries']) && ($this->container['maxRetries'] < 0)) {
            $invalidProperties[] = "invalid value for 'maxRetries', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the feed
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the feed
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets authType
     *
     * @return string|null
     */
    public function getAuthType(): ?string
    {
        return $this->container['authType'];
    }

    /**
     * Sets authType
     *
     * @param string|null $authType Auth type of the feed:  * `basic`  * `token`  * `noAuth`
     *
     * @return $this
     */
    public function setAuthType(?string $authType): static
    {
        if (is_null($authType)) {
            throw new InvalidArgumentException('non-nullable authType cannot be null');
        }
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!in_array($authType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authType', must be one of '%s'",
                    $authType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authType'] = $authType;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername(): ?string
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username for authType `basic`
     *
     * @return $this
     */
    public function setUsername(?string $username): static
    {
        if (is_null($username)) {
            throw new InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword(): ?string
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password for authType `basic`
     *
     * @return $this
     */
    public function setPassword(?string $password): static
    {
        if (is_null($password)) {
            throw new InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken(): ?string
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Token for authType `token`
     *
     * @return $this
     */
    public function setToken(?string $token): static
    {
        if (is_null($token)) {
            throw new InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Brevo\Client\Models\GetExternalFeedByUUIDHeadersInner[]|null
     */
    public function getHeaders(): ?array
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Brevo\Client\Models\GetExternalFeedByUUIDHeadersInner[]|null $headers Custom headers for the feed
     *
     * @return $this
     */
    public function setHeaders(?array $headers): static
    {
        if (is_null($headers)) {
            throw new InvalidArgumentException('non-nullable headers cannot be null');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets maxRetries
     *
     * @return int|null
     */
    public function getMaxRetries(): ?int
    {
        return $this->container['maxRetries'];
    }

    /**
     * Sets maxRetries
     *
     * @param int|null $maxRetries Maximum number of retries on the feed url
     *
     * @return $this
     */
    public function setMaxRetries(?int $maxRetries): static
    {
        if (is_null($maxRetries)) {
            throw new InvalidArgumentException('non-nullable maxRetries cannot be null');
        }

        if (($maxRetries > 5)) {
            throw new InvalidArgumentException('invalid value for $maxRetries when calling UpdateExternalFeed., must be smaller than or equal to 5.');
        }
        if (($maxRetries < 0)) {
            throw new InvalidArgumentException('invalid value for $maxRetries when calling UpdateExternalFeed., must be bigger than or equal to 0.');
        }

        $this->container['maxRetries'] = $maxRetries;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return bool|null
     */
    public function getCache(): ?bool
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param bool|null $cache Toggle caching of feed url response
     *
     * @return $this
     */
    public function setCache(?bool $cache): static
    {
        if (is_null($cache)) {
            throw new InvalidArgumentException('non-nullable cache cannot be null');
        }
        $this->container['cache'] = $cache;

        return $this;
    }
}


