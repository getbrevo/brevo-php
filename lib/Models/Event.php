<?php
/**
 * Event
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Event extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'eventName' => 'string',
        'identifiers' => '\Brevo\Client\Models\EventIdentifiers',
        'eventDate' => 'string',
        'contactProperties' => 'array<string,\Brevo\Client\Models\EventContactPropertiesValue>',
        'eventProperties' => 'array<string,\Brevo\Client\Models\EventEventPropertiesValue>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'eventName' => null,
        'identifiers' => null,
        'eventDate' => null,
        'contactProperties' => null,
        'eventProperties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'eventName' => false,
        'identifiers' => false,
        'eventDate' => false,
        'contactProperties' => false,
        'eventProperties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'eventName' => 'event_name',
        'identifiers' => 'identifiers',
        'eventDate' => 'event_date',
        'contactProperties' => 'contact_properties',
        'eventProperties' => 'event_properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'eventName' => 'setEventName',
        'identifiers' => 'setIdentifiers',
        'eventDate' => 'setEventDate',
        'contactProperties' => 'setContactProperties',
        'eventProperties' => 'setEventProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'eventName' => 'getEventName',
        'identifiers' => 'getIdentifiers',
        'eventDate' => 'getEventDate',
        'contactProperties' => 'getContactProperties',
        'eventProperties' => 'getEventProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eventName', $data ?? [], null);
        $this->setIfExists('identifiers', $data ?? [], null);
        $this->setIfExists('eventDate', $data ?? [], null);
        $this->setIfExists('contactProperties', $data ?? [], null);
        $this->setIfExists('eventProperties', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['eventName'] === null) {
            $invalidProperties[] = "'eventName' can't be null";
        }
        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets eventName
     *
     * @return string
     */
    public function getEventName(): string
    {
        return $this->container['eventName'];
    }

    /**
     * Sets eventName
     *
     * @param string $eventName The name of the event that occurred. This is how you will find your event in Brevo. Limited to 255 characters, alphanumerical characters and - _ only.
     *
     * @return $this
     */
    public function setEventName(string $eventName): static
    {
        if (is_null($eventName)) {
            throw new InvalidArgumentException('non-nullable eventName cannot be null');
        }
        $this->container['eventName'] = $eventName;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \Brevo\Client\Models\EventIdentifiers
     */
    public function getIdentifiers(): \Brevo\Client\Models\EventIdentifiers
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \Brevo\Client\Models\EventIdentifiers $identifiers identifiers
     *
     * @return $this
     */
    public function setIdentifiers(\Brevo\Client\Models\EventIdentifiers $identifiers): static
    {
        if (is_null($identifiers)) {
            throw new InvalidArgumentException('non-nullable identifiers cannot be null');
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets eventDate
     *
     * @return string|null
     */
    public function getEventDate(): ?string
    {
        return $this->container['eventDate'];
    }

    /**
     * Sets eventDate
     *
     * @param string|null $eventDate Timestamp of when the event occurred (e.g. \"2024-01-24T17:39:57+01:00\"). If no value is passed, the timestamp of the event creation is used.
     *
     * @return $this
     */
    public function setEventDate(?string $eventDate): static
    {
        if (is_null($eventDate)) {
            throw new InvalidArgumentException('non-nullable eventDate cannot be null');
        }
        $this->container['eventDate'] = $eventDate;

        return $this;
    }

    /**
     * Gets contactProperties
     *
     * @return array<string,\Brevo\Client\Models\EventContactPropertiesValue>|null
     */
    public function getContactProperties(): ?array
    {
        return $this->container['contactProperties'];
    }

    /**
     * Sets contactProperties
     *
     * @param array<string,\Brevo\Client\Models\EventContactPropertiesValue>|null $contactProperties Properties defining the state of the contact associated to this event. Useful to update contact attributes defined in your contacts database while passing the event. For example: **\"FIRSTNAME\": \"Jane\" , \"AGE\": 37**
     *
     * @return $this
     */
    public function setContactProperties(?array $contactProperties): static
    {
        if (is_null($contactProperties)) {
            throw new InvalidArgumentException('non-nullable contactProperties cannot be null');
        }
        $this->container['contactProperties'] = $contactProperties;

        return $this;
    }

    /**
     * Gets eventProperties
     *
     * @return array<string,\Brevo\Client\Models\EventEventPropertiesValue>|null
     */
    public function getEventProperties(): ?array
    {
        return $this->container['eventProperties'];
    }

    /**
     * Sets eventProperties
     *
     * @param array<string,\Brevo\Client\Models\EventEventPropertiesValue>|null $eventProperties Properties of the event. Top level properties and nested properties can be used to better segment contacts and personalise workflow conditions. The following field type are supported: string, number, boolean (true/false), date (Timestamp e.g. \"2024-01-24T17:39:57+01:00\"). Keys are limited to 255 characters, alphanumerical characters and - _ only. Size is limited to 50Kb.
     *
     * @return $this
     */
    public function setEventProperties(?array $eventProperties): static
    {
        if (is_null($eventProperties)) {
            throw new InvalidArgumentException('non-nullable eventProperties cannot be null');
        }
        $this->container['eventProperties'] = $eventProperties;

        return $this;
    }
}


