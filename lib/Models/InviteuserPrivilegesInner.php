<?php
/**
 * InviteuserPrivilegesInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * InviteuserPrivilegesInner Class Doc Comment
 *
 * @description Privileges given to the user
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class InviteuserPrivilegesInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'inviteuser_privileges_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'feature' => 'string',
        'permissions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'feature' => null,
        'permissions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'feature' => false,
        'permissions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'feature' => 'feature',
        'permissions' => 'permissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'feature' => 'setFeature',
        'permissions' => 'setPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'feature' => 'getFeature',
        'permissions' => 'getPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const FEATURE_EMAIL_CAMPAIGNS = 'email_campaigns';
    public const FEATURE_SMS_CAMPAIGNS = 'sms_campaigns';
    public const FEATURE_CONTACTS = 'contacts';
    public const FEATURE_TEMPLATES = 'templates';
    public const FEATURE_WORKFLOWS = 'workflows';
    public const FEATURE_FACEBOOK_ADS = 'facebook_ads';
    public const FEATURE_LANDING_PAGES = 'landing_pages';
    public const FEATURE_TRANSACTIONAL_EMAILS = 'transactional_emails';
    public const FEATURE_SMTP_API = 'smtp_api';
    public const FEATURE_USER_MANAGEMENT = 'user_management';
    public const FEATURE_SALES_PLATFORM = 'sales_platform';
    public const FEATURE_PHONE = 'phone';
    public const FEATURE_CONVERSATIONS = 'conversations';
    public const FEATURE_SENDERS_DOMAINS_DEDICATED_IPS = 'senders_domains_dedicated_ips';
    public const FEATURE_PUSH_NOTIFICATIONS = 'push_notifications';
    public const FEATURE_COMPANIES = 'companies';
    public const PERMISSIONS_CREATE_EDIT_DELETE = 'create_edit_delete';
    public const PERMISSIONS_SEND_SCHEDULE_SUSPEND = 'send_schedule_suspend';
    public const PERMISSIONS_VIEW = 'view';
    public const PERMISSIONS_IMPORT = 'import';
    public const PERMISSIONS_EXPORT = 'export';
    public const PERMISSIONS_LIST_AND_ATTRIBUTES = 'list_and_attributes';
    public const PERMISSIONS_FORMS = 'forms';
    public const PERMISSIONS_ACTIVATE_DEACTIVATE = 'activate_deactivate';
    public const PERMISSIONS_ACTIVATE_DEACTIVATE_PAUSE = 'activate_deactivate_pause';
    public const PERMISSIONS_SETTINGS = 'settings';
    public const PERMISSIONS_SCHEDULE_PAUSE = 'schedule_pause';
    public const PERMISSIONS_ALL = 'all';
    public const PERMISSIONS_LOGS = 'logs';
    public const PERMISSIONS_ACCESS = 'access';
    public const PERMISSIONS_ASSIGN = 'assign';
    public const PERMISSIONS_CONFIGURE = 'configure';
    public const PERMISSIONS_CREATE_EDIT_DEALS = 'create_edit_deals';
    public const PERMISSIONS_DELETE_OWNED_DEALS = 'delete_owned_deals';
    public const PERMISSIONS_MANAGE_OTHERS_DEALS_TASKS = 'manage_others_deals_tasks';
    public const PERMISSIONS_MANAGE_OWNED_COMPANIES = 'manage_owned_companies';
    public const PERMISSIONS_MANAGE_OTHERS_COMPANIES = 'manage_others_companies';
    public const PERMISSIONS_REPORTS = 'reports';
    public const PERMISSIONS_SENDERS_MANAGEMENT = 'senders_management';
    public const PERMISSIONS_DOMAINS_MANAGEMENT = 'domains_management';
    public const PERMISSIONS_DEDICATED_IPS_MANAGEMENT = 'dedicated_ips_management';
    public const PERMISSIONS_SEND = 'send';
    public const PERMISSIONS_SMTP = 'smtp';
    public const PERMISSIONS_API_KEYS = 'api_keys';
    public const PERMISSIONS_AUTHORIZED_IPS = 'authorized_ips';
    public const PERMISSIONS_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureAllowableValues()
    {
        return [
            self::FEATURE_EMAIL_CAMPAIGNS,
            self::FEATURE_SMS_CAMPAIGNS,
            self::FEATURE_CONTACTS,
            self::FEATURE_TEMPLATES,
            self::FEATURE_WORKFLOWS,
            self::FEATURE_FACEBOOK_ADS,
            self::FEATURE_LANDING_PAGES,
            self::FEATURE_TRANSACTIONAL_EMAILS,
            self::FEATURE_SMTP_API,
            self::FEATURE_USER_MANAGEMENT,
            self::FEATURE_SALES_PLATFORM,
            self::FEATURE_PHONE,
            self::FEATURE_CONVERSATIONS,
            self::FEATURE_SENDERS_DOMAINS_DEDICATED_IPS,
            self::FEATURE_PUSH_NOTIFICATIONS,
            self::FEATURE_COMPANIES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionsAllowableValues()
    {
        return [
            self::PERMISSIONS_CREATE_EDIT_DELETE,
            self::PERMISSIONS_SEND_SCHEDULE_SUSPEND,
            self::PERMISSIONS_VIEW,
            self::PERMISSIONS_IMPORT,
            self::PERMISSIONS_EXPORT,
            self::PERMISSIONS_LIST_AND_ATTRIBUTES,
            self::PERMISSIONS_FORMS,
            self::PERMISSIONS_ACTIVATE_DEACTIVATE,
            self::PERMISSIONS_ACTIVATE_DEACTIVATE_PAUSE,
            self::PERMISSIONS_SETTINGS,
            self::PERMISSIONS_SCHEDULE_PAUSE,
            self::PERMISSIONS_ALL,
            self::PERMISSIONS_LOGS,
            self::PERMISSIONS_ACCESS,
            self::PERMISSIONS_ASSIGN,
            self::PERMISSIONS_CONFIGURE,
            self::PERMISSIONS_CREATE_EDIT_DEALS,
            self::PERMISSIONS_DELETE_OWNED_DEALS,
            self::PERMISSIONS_MANAGE_OTHERS_DEALS_TASKS,
            self::PERMISSIONS_MANAGE_OWNED_COMPANIES,
            self::PERMISSIONS_MANAGE_OTHERS_COMPANIES,
            self::PERMISSIONS_REPORTS,
            self::PERMISSIONS_SENDERS_MANAGEMENT,
            self::PERMISSIONS_DOMAINS_MANAGEMENT,
            self::PERMISSIONS_DEDICATED_IPS_MANAGEMENT,
            self::PERMISSIONS_SEND,
            self::PERMISSIONS_SMTP,
            self::PERMISSIONS_API_KEYS,
            self::PERMISSIONS_AUTHORIZED_IPS,
            self::PERMISSIONS_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('feature', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getFeatureAllowableValues();
        if (!is_null($this->container['feature']) && !in_array($this->container['feature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature', must be one of '%s'",
                $this->container['feature'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets feature
     *
     * @return string|null
     */
    public function getFeature(): ?string
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param string|null $feature Feature name
     *
     * @return $this
     */
    public function setFeature(?string $feature): static
    {
        if (is_null($feature)) {
            throw new InvalidArgumentException('non-nullable feature cannot be null');
        }
        $allowedValues = $this->getFeatureAllowableValues();
        if (!in_array($feature, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature', must be one of '%s'",
                    $feature,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]|null
     */
    public function getPermissions(): ?array
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[]|null $permissions Permissions for a given feature
     *
     * @return $this
     */
    public function setPermissions(?array $permissions): static
    {
        if (is_null($permissions)) {
            throw new InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $allowedValues = $this->getPermissionsAllowableValues();
        if (array_diff($permissions, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }
}


