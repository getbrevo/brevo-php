<?php
/**
 * RequestContactImport
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * RequestContactImport Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RequestContactImport extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'requestContactImport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'fileUrl' => 'string',
        'fileBody' => 'string',
        'jsonBody' => '\Brevo\Client\Models\RequestContactImportJsonBodyInner[]',
        'listIds' => 'int[]',
        'notifyUrl' => 'string',
        'newList' => '\Brevo\Client\Models\RequestContactImportNewList',
        'emailBlacklist' => 'bool',
        'disableNotification' => 'bool',
        'smsBlacklist' => 'bool',
        'updateExistingContacts' => 'bool',
        'emptyContactsAttributes' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'fileUrl' => 'url',
        'fileBody' => null,
        'jsonBody' => null,
        'listIds' => 'int64',
        'notifyUrl' => 'url',
        'newList' => null,
        'emailBlacklist' => null,
        'disableNotification' => null,
        'smsBlacklist' => null,
        'updateExistingContacts' => null,
        'emptyContactsAttributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'fileUrl' => false,
        'fileBody' => false,
        'jsonBody' => false,
        'listIds' => false,
        'notifyUrl' => false,
        'newList' => false,
        'emailBlacklist' => false,
        'disableNotification' => false,
        'smsBlacklist' => false,
        'updateExistingContacts' => false,
        'emptyContactsAttributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'fileUrl' => 'fileUrl',
        'fileBody' => 'fileBody',
        'jsonBody' => 'jsonBody',
        'listIds' => 'listIds',
        'notifyUrl' => 'notifyUrl',
        'newList' => 'newList',
        'emailBlacklist' => 'emailBlacklist',
        'disableNotification' => 'disableNotification',
        'smsBlacklist' => 'smsBlacklist',
        'updateExistingContacts' => 'updateExistingContacts',
        'emptyContactsAttributes' => 'emptyContactsAttributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'fileUrl' => 'setFileUrl',
        'fileBody' => 'setFileBody',
        'jsonBody' => 'setJsonBody',
        'listIds' => 'setListIds',
        'notifyUrl' => 'setNotifyUrl',
        'newList' => 'setNewList',
        'emailBlacklist' => 'setEmailBlacklist',
        'disableNotification' => 'setDisableNotification',
        'smsBlacklist' => 'setSmsBlacklist',
        'updateExistingContacts' => 'setUpdateExistingContacts',
        'emptyContactsAttributes' => 'setEmptyContactsAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'fileUrl' => 'getFileUrl',
        'fileBody' => 'getFileBody',
        'jsonBody' => 'getJsonBody',
        'listIds' => 'getListIds',
        'notifyUrl' => 'getNotifyUrl',
        'newList' => 'getNewList',
        'emailBlacklist' => 'getEmailBlacklist',
        'disableNotification' => 'getDisableNotification',
        'smsBlacklist' => 'getSmsBlacklist',
        'updateExistingContacts' => 'getUpdateExistingContacts',
        'emptyContactsAttributes' => 'getEmptyContactsAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fileUrl', $data ?? [], null);
        $this->setIfExists('fileBody', $data ?? [], null);
        $this->setIfExists('jsonBody', $data ?? [], null);
        $this->setIfExists('listIds', $data ?? [], null);
        $this->setIfExists('notifyUrl', $data ?? [], null);
        $this->setIfExists('newList', $data ?? [], null);
        $this->setIfExists('emailBlacklist', $data ?? [], false);
        $this->setIfExists('disableNotification', $data ?? [], false);
        $this->setIfExists('smsBlacklist', $data ?? [], false);
        $this->setIfExists('updateExistingContacts', $data ?? [], true);
        $this->setIfExists('emptyContactsAttributes', $data ?? [], false);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets fileUrl
     *
     * @return string|null
     */
    public function getFileUrl(): ?string
    {
        return $this->container['fileUrl'];
    }

    /**
     * Sets fileUrl
     *
     * @param string|null $fileUrl **Mandatory if fileBody and jsonBody is not defined.** URL of the file to be imported (**no local file**). Possible file formats: #### .txt, .csv, .json
     *
     * @return $this
     */
    public function setFileUrl(?string $fileUrl): static
    {
        if (is_null($fileUrl)) {
            throw new InvalidArgumentException('non-nullable fileUrl cannot be null');
        }
        $this->container['fileUrl'] = $fileUrl;

        return $this;
    }

    /**
     * Gets fileBody
     *
     * @return string|null
     */
    public function getFileBody(): ?string
    {
        return $this->container['fileBody'];
    }

    /**
     * Sets fileBody
     *
     * @param string|null $fileBody **Mandatory if fileUrl and jsonBody is not defined.** CSV content to be imported. Use semicolon to separate multiple attributes. **Maximum allowed file body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
     *
     * @return $this
     */
    public function setFileBody(?string $fileBody): static
    {
        if (is_null($fileBody)) {
            throw new InvalidArgumentException('non-nullable fileBody cannot be null');
        }
        $this->container['fileBody'] = $fileBody;

        return $this;
    }

    /**
     * Gets jsonBody
     *
     * @return \Brevo\Client\Models\RequestContactImportJsonBodyInner[]|null
     */
    public function getJsonBody(): ?array
    {
        return $this->container['jsonBody'];
    }

    /**
     * Sets jsonBody
     *
     * @param \Brevo\Client\Models\RequestContactImportJsonBodyInner[]|null $jsonBody **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files.
     *
     * @return $this
     */
    public function setJsonBody(?array $jsonBody): static
    {
        if (is_null($jsonBody)) {
            throw new InvalidArgumentException('non-nullable jsonBody cannot be null');
        }
        $this->container['jsonBody'] = $jsonBody;

        return $this;
    }

    /**
     * Gets listIds
     *
     * @return int[]|null
     */
    public function getListIds(): ?array
    {
        return $this->container['listIds'];
    }

    /**
     * Sets listIds
     *
     * @param int[]|null $listIds **Mandatory if newList is not defined.** Ids of the lists in which the contacts shall be imported. For example, **[2, 4, 7]**.
     *
     * @return $this
     */
    public function setListIds(?array $listIds): static
    {
        if (is_null($listIds)) {
            throw new InvalidArgumentException('non-nullable listIds cannot be null');
        }
        $this->container['listIds'] = $listIds;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string|null
     */
    public function getNotifyUrl(): ?string
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string|null $notifyUrl URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
     *
     * @return $this
     */
    public function setNotifyUrl(?string $notifyUrl): static
    {
        if (is_null($notifyUrl)) {
            throw new InvalidArgumentException('non-nullable notifyUrl cannot be null');
        }
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }

    /**
     * Gets newList
     *
     * @return \Brevo\Client\Models\RequestContactImportNewList|null
     */
    public function getNewList(): ?\Brevo\Client\Models\RequestContactImportNewList
    {
        return $this->container['newList'];
    }

    /**
     * Sets newList
     *
     * @param \Brevo\Client\Models\RequestContactImportNewList|null $newList newList
     *
     * @return $this
     */
    public function setNewList(?\Brevo\Client\Models\RequestContactImportNewList $newList): static
    {
        if (is_null($newList)) {
            throw new InvalidArgumentException('non-nullable newList cannot be null');
        }
        $this->container['newList'] = $newList;

        return $this;
    }

    /**
     * Gets emailBlacklist
     *
     * @return bool|null
     */
    public function getEmailBlacklist(): ?bool
    {
        return $this->container['emailBlacklist'];
    }

    /**
     * Sets emailBlacklist
     *
     * @param bool|null $emailBlacklist To blacklist all the contacts for email
     *
     * @return $this
     */
    public function setEmailBlacklist(?bool $emailBlacklist): static
    {
        if (is_null($emailBlacklist)) {
            throw new InvalidArgumentException('non-nullable emailBlacklist cannot be null');
        }
        $this->container['emailBlacklist'] = $emailBlacklist;

        return $this;
    }

    /**
     * Gets disableNotification
     *
     * @return bool|null
     */
    public function getDisableNotification(): ?bool
    {
        return $this->container['disableNotification'];
    }

    /**
     * Sets disableNotification
     *
     * @param bool|null $disableNotification To disable email notification
     *
     * @return $this
     */
    public function setDisableNotification(?bool $disableNotification): static
    {
        if (is_null($disableNotification)) {
            throw new InvalidArgumentException('non-nullable disableNotification cannot be null');
        }
        $this->container['disableNotification'] = $disableNotification;

        return $this;
    }

    /**
     * Gets smsBlacklist
     *
     * @return bool|null
     */
    public function getSmsBlacklist(): ?bool
    {
        return $this->container['smsBlacklist'];
    }

    /**
     * Sets smsBlacklist
     *
     * @param bool|null $smsBlacklist To blacklist all the contacts for sms
     *
     * @return $this
     */
    public function setSmsBlacklist(?bool $smsBlacklist): static
    {
        if (is_null($smsBlacklist)) {
            throw new InvalidArgumentException('non-nullable smsBlacklist cannot be null');
        }
        $this->container['smsBlacklist'] = $smsBlacklist;

        return $this;
    }

    /**
     * Gets updateExistingContacts
     *
     * @return bool|null
     */
    public function getUpdateExistingContacts(): ?bool
    {
        return $this->container['updateExistingContacts'];
    }

    /**
     * Sets updateExistingContacts
     *
     * @param bool|null $updateExistingContacts To facilitate the choice to update the existing contacts
     *
     * @return $this
     */
    public function setUpdateExistingContacts(?bool $updateExistingContacts): static
    {
        if (is_null($updateExistingContacts)) {
            throw new InvalidArgumentException('non-nullable updateExistingContacts cannot be null');
        }
        $this->container['updateExistingContacts'] = $updateExistingContacts;

        return $this;
    }

    /**
     * Gets emptyContactsAttributes
     *
     * @return bool|null
     */
    public function getEmptyContactsAttributes(): ?bool
    {
        return $this->container['emptyContactsAttributes'];
    }

    /**
     * Sets emptyContactsAttributes
     *
     * @param bool|null $emptyContactsAttributes To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in Brevo, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( **only available if `updateExistingContacts` set to true **)
     *
     * @return $this
     */
    public function setEmptyContactsAttributes(?bool $emptyContactsAttributes): static
    {
        if (is_null($emptyContactsAttributes)) {
            throw new InvalidArgumentException('non-nullable emptyContactsAttributes cannot be null');
        }
        $this->container['emptyContactsAttributes'] = $emptyContactsAttributes;

        return $this;
    }
}


