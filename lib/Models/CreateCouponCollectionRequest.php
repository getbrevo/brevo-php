<?php
/**
 * CreateCouponCollectionRequest
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CreateCouponCollectionRequest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateCouponCollectionRequest extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'createCouponCollection_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'defaultCoupon' => 'string',
        'expirationDate' => '\DateTime',
        'remainingDaysAlert' => 'int',
        'remainingCouponsAlert' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'defaultCoupon' => null,
        'expirationDate' => 'date-time',
        'remainingDaysAlert' => null,
        'remainingCouponsAlert' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'defaultCoupon' => false,
        'expirationDate' => false,
        'remainingDaysAlert' => false,
        'remainingCouponsAlert' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'defaultCoupon' => 'defaultCoupon',
        'expirationDate' => 'expirationDate',
        'remainingDaysAlert' => 'remainingDaysAlert',
        'remainingCouponsAlert' => 'remainingCouponsAlert'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'defaultCoupon' => 'setDefaultCoupon',
        'expirationDate' => 'setExpirationDate',
        'remainingDaysAlert' => 'setRemainingDaysAlert',
        'remainingCouponsAlert' => 'setRemainingCouponsAlert'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'defaultCoupon' => 'getDefaultCoupon',
        'expirationDate' => 'getExpirationDate',
        'remainingDaysAlert' => 'getRemainingDaysAlert',
        'remainingCouponsAlert' => 'getRemainingCouponsAlert'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('defaultCoupon', $data ?? [], null);
        $this->setIfExists('expirationDate', $data ?? [], null);
        $this->setIfExists('remainingDaysAlert', $data ?? [], null);
        $this->setIfExists('remainingCouponsAlert', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['defaultCoupon'] === null) {
            $invalidProperties[] = "'defaultCoupon' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the coupons collection
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets defaultCoupon
     *
     * @return string
     */
    public function getDefaultCoupon(): string
    {
        return $this->container['defaultCoupon'];
    }

    /**
     * Sets defaultCoupon
     *
     * @param string $defaultCoupon Default coupons collection name
     *
     * @return $this
     */
    public function setDefaultCoupon(string $defaultCoupon): static
    {
        if (is_null($defaultCoupon)) {
            throw new InvalidArgumentException('non-nullable defaultCoupon cannot be null');
        }
        $this->container['defaultCoupon'] = $defaultCoupon;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime|null
     */
    public function getExpirationDate(): ?\DateTime
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime|null $expirationDate Specify an expiration date for the coupon collection in RFC3339 format. Use null to remove the expiration date.
     *
     * @return $this
     */
    public function setExpirationDate(?\DateTime $expirationDate): static
    {
        if (is_null($expirationDate)) {
            throw new InvalidArgumentException('non-nullable expirationDate cannot be null');
        }
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets remainingDaysAlert
     *
     * @return int|null
     */
    public function getRemainingDaysAlert(): ?int
    {
        return $this->container['remainingDaysAlert'];
    }

    /**
     * Sets remainingDaysAlert
     *
     * @param int|null $remainingDaysAlert Send a notification alert (email) when the remaining days until the expiration date are equal or fall bellow this number. Use null to disable alerts.
     *
     * @return $this
     */
    public function setRemainingDaysAlert(?int $remainingDaysAlert): static
    {
        if (is_null($remainingDaysAlert)) {
            throw new InvalidArgumentException('non-nullable remainingDaysAlert cannot be null');
        }
        $this->container['remainingDaysAlert'] = $remainingDaysAlert;

        return $this;
    }

    /**
     * Gets remainingCouponsAlert
     *
     * @return int|null
     */
    public function getRemainingCouponsAlert(): ?int
    {
        return $this->container['remainingCouponsAlert'];
    }

    /**
     * Sets remainingCouponsAlert
     *
     * @param int|null $remainingCouponsAlert Send a notification alert (email) when the remaining coupons count is equal or fall bellow this number. Use null to disable alerts.
     *
     * @return $this
     */
    public function setRemainingCouponsAlert(?int $remainingCouponsAlert): static
    {
        if (is_null($remainingCouponsAlert)) {
            throw new InvalidArgumentException('non-nullable remainingCouponsAlert cannot be null');
        }
        $this->container['remainingCouponsAlert'] = $remainingCouponsAlert;

        return $this;
    }
}


