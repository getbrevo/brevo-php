<?php
/**
 * RequestContactExportCustomContactFilter
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * RequestContactExportCustomContactFilter Class Doc Comment
 *
 * @description Set the filter for the contacts to be exported.
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RequestContactExportCustomContactFilter extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'requestContactExport_customContactFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'actionForContacts' => 'string',
        'actionForEmailCampaigns' => 'string',
        'actionForSmsCampaigns' => 'string',
        'listId' => 'int',
        'emailCampaignId' => 'int',
        'smsCampaignId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'actionForContacts' => null,
        'actionForEmailCampaigns' => null,
        'actionForSmsCampaigns' => null,
        'listId' => 'int64',
        'emailCampaignId' => 'int64',
        'smsCampaignId' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'actionForContacts' => false,
        'actionForEmailCampaigns' => false,
        'actionForSmsCampaigns' => false,
        'listId' => false,
        'emailCampaignId' => false,
        'smsCampaignId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'actionForContacts' => 'actionForContacts',
        'actionForEmailCampaigns' => 'actionForEmailCampaigns',
        'actionForSmsCampaigns' => 'actionForSmsCampaigns',
        'listId' => 'listId',
        'emailCampaignId' => 'emailCampaignId',
        'smsCampaignId' => 'smsCampaignId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'actionForContacts' => 'setActionForContacts',
        'actionForEmailCampaigns' => 'setActionForEmailCampaigns',
        'actionForSmsCampaigns' => 'setActionForSmsCampaigns',
        'listId' => 'setListId',
        'emailCampaignId' => 'setEmailCampaignId',
        'smsCampaignId' => 'setSmsCampaignId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'actionForContacts' => 'getActionForContacts',
        'actionForEmailCampaigns' => 'getActionForEmailCampaigns',
        'actionForSmsCampaigns' => 'getActionForSmsCampaigns',
        'listId' => 'getListId',
        'emailCampaignId' => 'getEmailCampaignId',
        'smsCampaignId' => 'getSmsCampaignId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const ACTION_FOR_CONTACTS_ALL_CONTACTS = 'allContacts';
    public const ACTION_FOR_CONTACTS_SUBSCRIBED = 'subscribed';
    public const ACTION_FOR_CONTACTS_UNSUBSCRIBED = 'unsubscribed';
    public const ACTION_FOR_CONTACTS_UNSUBSCRIBED_PER_LIST = 'unsubscribedPerList';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_OPENERS = 'openers';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_NON_OPENERS = 'nonOpeners';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_CLICKERS = 'clickers';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_NON_CLICKERS = 'nonClickers';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_UNSUBSCRIBED = 'unsubscribed';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_HARD_BOUNCES = 'hardBounces';
    public const ACTION_FOR_EMAIL_CAMPAIGNS_SOFT_BOUNCES = 'softBounces';
    public const ACTION_FOR_SMS_CAMPAIGNS_HARD_BOUNCES = 'hardBounces';
    public const ACTION_FOR_SMS_CAMPAIGNS_SOFT_BOUNCES = 'softBounces';
    public const ACTION_FOR_SMS_CAMPAIGNS_UNSUBSCRIBED = 'unsubscribed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForContactsAllowableValues()
    {
        return [
            self::ACTION_FOR_CONTACTS_ALL_CONTACTS,
            self::ACTION_FOR_CONTACTS_SUBSCRIBED,
            self::ACTION_FOR_CONTACTS_UNSUBSCRIBED,
            self::ACTION_FOR_CONTACTS_UNSUBSCRIBED_PER_LIST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForEmailCampaignsAllowableValues()
    {
        return [
            self::ACTION_FOR_EMAIL_CAMPAIGNS_OPENERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_NON_OPENERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_CLICKERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_NON_CLICKERS,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_UNSUBSCRIBED,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_HARD_BOUNCES,
            self::ACTION_FOR_EMAIL_CAMPAIGNS_SOFT_BOUNCES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionForSmsCampaignsAllowableValues()
    {
        return [
            self::ACTION_FOR_SMS_CAMPAIGNS_HARD_BOUNCES,
            self::ACTION_FOR_SMS_CAMPAIGNS_SOFT_BOUNCES,
            self::ACTION_FOR_SMS_CAMPAIGNS_UNSUBSCRIBED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actionForContacts', $data ?? [], null);
        $this->setIfExists('actionForEmailCampaigns', $data ?? [], null);
        $this->setIfExists('actionForSmsCampaigns', $data ?? [], null);
        $this->setIfExists('listId', $data ?? [], null);
        $this->setIfExists('emailCampaignId', $data ?? [], null);
        $this->setIfExists('smsCampaignId', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionForContactsAllowableValues();
        if (!is_null($this->container['actionForContacts']) && !in_array($this->container['actionForContacts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actionForContacts', must be one of '%s'",
                $this->container['actionForContacts'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionForEmailCampaignsAllowableValues();
        if (!is_null($this->container['actionForEmailCampaigns']) && !in_array($this->container['actionForEmailCampaigns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actionForEmailCampaigns', must be one of '%s'",
                $this->container['actionForEmailCampaigns'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionForSmsCampaignsAllowableValues();
        if (!is_null($this->container['actionForSmsCampaigns']) && !in_array($this->container['actionForSmsCampaigns'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actionForSmsCampaigns', must be one of '%s'",
                $this->container['actionForSmsCampaigns'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets actionForContacts
     *
     * @return string|null
     */
    public function getActionForContacts(): ?string
    {
        return $this->container['actionForContacts'];
    }

    /**
     * Sets actionForContacts
     *
     * @param string|null $actionForContacts **Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on contacts as per the list id. * **allContacts** - Fetch the list of all contacts for a particular list. * **subscribed & unsubscribed** - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * **unsubscribedPerList** - Fetch the list of contacts that are unsubscribed from a particular list only.
     *
     * @return $this
     */
    public function setActionForContacts(?string $actionForContacts): static
    {
        if (is_null($actionForContacts)) {
            throw new InvalidArgumentException('non-nullable actionForContacts cannot be null');
        }
        $allowedValues = $this->getActionForContactsAllowableValues();
        if (!in_array($actionForContacts, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actionForContacts', must be one of '%s'",
                    $actionForContacts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionForContacts'] = $actionForContacts;

        return $this;
    }

    /**
     * Gets actionForEmailCampaigns
     *
     * @return string|null
     */
    public function getActionForEmailCampaigns(): ?string
    {
        return $this->container['actionForEmailCampaigns'];
    }

    /**
     * Sets actionForEmailCampaigns
     *
     * @param string|null $actionForEmailCampaigns **Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on email campaigns. * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * **clickers & nonClickers** - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * **unsubscribed** - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * **hardBounces & softBounces** - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
     *
     * @return $this
     */
    public function setActionForEmailCampaigns(?string $actionForEmailCampaigns): static
    {
        if (is_null($actionForEmailCampaigns)) {
            throw new InvalidArgumentException('non-nullable actionForEmailCampaigns cannot be null');
        }
        $allowedValues = $this->getActionForEmailCampaignsAllowableValues();
        if (!in_array($actionForEmailCampaigns, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actionForEmailCampaigns', must be one of '%s'",
                    $actionForEmailCampaigns,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionForEmailCampaigns'] = $actionForEmailCampaigns;

        return $this;
    }

    /**
     * Gets actionForSmsCampaigns
     *
     * @return string|null
     */
    public function getActionForSmsCampaigns(): ?string
    {
        return $this->container['actionForSmsCampaigns'];
    }

    /**
     * Sets actionForSmsCampaigns
     *
     * @param string|null $actionForSmsCampaigns **Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed.** This will export the contacts on the basis of provided action applied on sms campaigns. * **unsubscribed** - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * **hardBounces & softBounces** - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
     *
     * @return $this
     */
    public function setActionForSmsCampaigns(?string $actionForSmsCampaigns): static
    {
        if (is_null($actionForSmsCampaigns)) {
            throw new InvalidArgumentException('non-nullable actionForSmsCampaigns cannot be null');
        }
        $allowedValues = $this->getActionForSmsCampaignsAllowableValues();
        if (!in_array($actionForSmsCampaigns, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actionForSmsCampaigns', must be one of '%s'",
                    $actionForSmsCampaigns,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionForSmsCampaigns'] = $actionForSmsCampaigns;

        return $this;
    }

    /**
     * Gets listId
     *
     * @return int|null
     */
    public function getListId(): ?int
    {
        return $this->container['listId'];
    }

    /**
     * Sets listId
     *
     * @param int|null $listId **Mandatory if actionForContacts is passed, ignored otherwise.** Id of the list for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setListId(?int $listId): static
    {
        if (is_null($listId)) {
            throw new InvalidArgumentException('non-nullable listId cannot be null');
        }
        $this->container['listId'] = $listId;

        return $this;
    }

    /**
     * Gets emailCampaignId
     *
     * @return int|null
     */
    public function getEmailCampaignId(): ?int
    {
        return $this->container['emailCampaignId'];
    }

    /**
     * Sets emailCampaignId
     *
     * @param int|null $emailCampaignId Considered only if **actionForEmailCampaigns** is passed, ignored otherwise. **Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed.** The id of the email campaign for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setEmailCampaignId(?int $emailCampaignId): static
    {
        if (is_null($emailCampaignId)) {
            throw new InvalidArgumentException('non-nullable emailCampaignId cannot be null');
        }
        $this->container['emailCampaignId'] = $emailCampaignId;

        return $this;
    }

    /**
     * Gets smsCampaignId
     *
     * @return int|null
     */
    public function getSmsCampaignId(): ?int
    {
        return $this->container['smsCampaignId'];
    }

    /**
     * Sets smsCampaignId
     *
     * @param int|null $smsCampaignId Considered only if **actionForSmsCampaigns** is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
     *
     * @return $this
     */
    public function setSmsCampaignId(?int $smsCampaignId): static
    {
        if (is_null($smsCampaignId)) {
            throw new InvalidArgumentException('non-nullable smsCampaignId cannot be null');
        }
        $this->container['smsCampaignId'] = $smsCampaignId;

        return $this;
    }
}


