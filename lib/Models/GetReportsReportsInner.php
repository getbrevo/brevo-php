<?php
/**
 * GetReportsReportsInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetReportsReportsInner Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetReportsReportsInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getReports_reports_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'date' => '\DateTime',
        'requests' => 'int',
        'delivered' => 'int',
        'hardBounces' => 'int',
        'softBounces' => 'int',
        'clicks' => 'int',
        'uniqueClicks' => 'int',
        'opens' => 'int',
        'uniqueOpens' => 'int',
        'spamReports' => 'int',
        'blocked' => 'int',
        'invalid' => 'int',
        'unsubscribed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'date' => 'date',
        'requests' => 'int64',
        'delivered' => 'int64',
        'hardBounces' => 'int64',
        'softBounces' => 'int64',
        'clicks' => 'int64',
        'uniqueClicks' => 'int64',
        'opens' => 'int64',
        'uniqueOpens' => 'int64',
        'spamReports' => 'int64',
        'blocked' => 'int64',
        'invalid' => 'int64',
        'unsubscribed' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'date' => false,
        'requests' => false,
        'delivered' => false,
        'hardBounces' => false,
        'softBounces' => false,
        'clicks' => false,
        'uniqueClicks' => false,
        'opens' => false,
        'uniqueOpens' => false,
        'spamReports' => false,
        'blocked' => false,
        'invalid' => false,
        'unsubscribed' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'requests' => 'requests',
        'delivered' => 'delivered',
        'hardBounces' => 'hardBounces',
        'softBounces' => 'softBounces',
        'clicks' => 'clicks',
        'uniqueClicks' => 'uniqueClicks',
        'opens' => 'opens',
        'uniqueOpens' => 'uniqueOpens',
        'spamReports' => 'spamReports',
        'blocked' => 'blocked',
        'invalid' => 'invalid',
        'unsubscribed' => 'unsubscribed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'date' => 'setDate',
        'requests' => 'setRequests',
        'delivered' => 'setDelivered',
        'hardBounces' => 'setHardBounces',
        'softBounces' => 'setSoftBounces',
        'clicks' => 'setClicks',
        'uniqueClicks' => 'setUniqueClicks',
        'opens' => 'setOpens',
        'uniqueOpens' => 'setUniqueOpens',
        'spamReports' => 'setSpamReports',
        'blocked' => 'setBlocked',
        'invalid' => 'setInvalid',
        'unsubscribed' => 'setUnsubscribed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'date' => 'getDate',
        'requests' => 'getRequests',
        'delivered' => 'getDelivered',
        'hardBounces' => 'getHardBounces',
        'softBounces' => 'getSoftBounces',
        'clicks' => 'getClicks',
        'uniqueClicks' => 'getUniqueClicks',
        'opens' => 'getOpens',
        'uniqueOpens' => 'getUniqueOpens',
        'spamReports' => 'getSpamReports',
        'blocked' => 'getBlocked',
        'invalid' => 'getInvalid',
        'unsubscribed' => 'getUnsubscribed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('requests', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('hardBounces', $data ?? [], null);
        $this->setIfExists('softBounces', $data ?? [], null);
        $this->setIfExists('clicks', $data ?? [], null);
        $this->setIfExists('uniqueClicks', $data ?? [], null);
        $this->setIfExists('opens', $data ?? [], null);
        $this->setIfExists('uniqueOpens', $data ?? [], null);
        $this->setIfExists('spamReports', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('invalid', $data ?? [], null);
        $this->setIfExists('unsubscribed', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['requests'] === null) {
            $invalidProperties[] = "'requests' can't be null";
        }
        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['hardBounces'] === null) {
            $invalidProperties[] = "'hardBounces' can't be null";
        }
        if ($this->container['softBounces'] === null) {
            $invalidProperties[] = "'softBounces' can't be null";
        }
        if ($this->container['clicks'] === null) {
            $invalidProperties[] = "'clicks' can't be null";
        }
        if ($this->container['uniqueClicks'] === null) {
            $invalidProperties[] = "'uniqueClicks' can't be null";
        }
        if ($this->container['opens'] === null) {
            $invalidProperties[] = "'opens' can't be null";
        }
        if ($this->container['uniqueOpens'] === null) {
            $invalidProperties[] = "'uniqueOpens' can't be null";
        }
        if ($this->container['spamReports'] === null) {
            $invalidProperties[] = "'spamReports' can't be null";
        }
        if ($this->container['blocked'] === null) {
            $invalidProperties[] = "'blocked' can't be null";
        }
        if ($this->container['invalid'] === null) {
            $invalidProperties[] = "'invalid' can't be null";
        }
        if ($this->container['unsubscribed'] === null) {
            $invalidProperties[] = "'unsubscribed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate(): \DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date of the statistics
     *
     * @return $this
     */
    public function setDate(\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets requests
     *
     * @return int
     */
    public function getRequests(): int
    {
        return $this->container['requests'];
    }

    /**
     * Sets requests
     *
     * @param int $requests Number of requests for the date
     *
     * @return $this
     */
    public function setRequests(int $requests): static
    {
        if (is_null($requests)) {
            throw new InvalidArgumentException('non-nullable requests cannot be null');
        }
        $this->container['requests'] = $requests;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int
     */
    public function getDelivered(): int
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int $delivered Number of delivered emails for the date
     *
     * @return $this
     */
    public function setDelivered(int $delivered): static
    {
        if (is_null($delivered)) {
            throw new InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets hardBounces
     *
     * @return int
     */
    public function getHardBounces(): int
    {
        return $this->container['hardBounces'];
    }

    /**
     * Sets hardBounces
     *
     * @param int $hardBounces Number of hardbounces for the date
     *
     * @return $this
     */
    public function setHardBounces(int $hardBounces): static
    {
        if (is_null($hardBounces)) {
            throw new InvalidArgumentException('non-nullable hardBounces cannot be null');
        }
        $this->container['hardBounces'] = $hardBounces;

        return $this;
    }

    /**
     * Gets softBounces
     *
     * @return int
     */
    public function getSoftBounces(): int
    {
        return $this->container['softBounces'];
    }

    /**
     * Sets softBounces
     *
     * @param int $softBounces Number of softbounces for the date
     *
     * @return $this
     */
    public function setSoftBounces(int $softBounces): static
    {
        if (is_null($softBounces)) {
            throw new InvalidArgumentException('non-nullable softBounces cannot be null');
        }
        $this->container['softBounces'] = $softBounces;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return int
     */
    public function getClicks(): int
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param int $clicks Number of clicks for the date
     *
     * @return $this
     */
    public function setClicks(int $clicks): static
    {
        if (is_null($clicks)) {
            throw new InvalidArgumentException('non-nullable clicks cannot be null');
        }
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets uniqueClicks
     *
     * @return int
     */
    public function getUniqueClicks(): int
    {
        return $this->container['uniqueClicks'];
    }

    /**
     * Sets uniqueClicks
     *
     * @param int $uniqueClicks Number of unique clicks for the date
     *
     * @return $this
     */
    public function setUniqueClicks(int $uniqueClicks): static
    {
        if (is_null($uniqueClicks)) {
            throw new InvalidArgumentException('non-nullable uniqueClicks cannot be null');
        }
        $this->container['uniqueClicks'] = $uniqueClicks;

        return $this;
    }

    /**
     * Gets opens
     *
     * @return int
     */
    public function getOpens(): int
    {
        return $this->container['opens'];
    }

    /**
     * Sets opens
     *
     * @param int $opens Number of openings for the date
     *
     * @return $this
     */
    public function setOpens(int $opens): static
    {
        if (is_null($opens)) {
            throw new InvalidArgumentException('non-nullable opens cannot be null');
        }
        $this->container['opens'] = $opens;

        return $this;
    }

    /**
     * Gets uniqueOpens
     *
     * @return int
     */
    public function getUniqueOpens(): int
    {
        return $this->container['uniqueOpens'];
    }

    /**
     * Sets uniqueOpens
     *
     * @param int $uniqueOpens Number of unique openings for the date
     *
     * @return $this
     */
    public function setUniqueOpens(int $uniqueOpens): static
    {
        if (is_null($uniqueOpens)) {
            throw new InvalidArgumentException('non-nullable uniqueOpens cannot be null');
        }
        $this->container['uniqueOpens'] = $uniqueOpens;

        return $this;
    }

    /**
     * Gets spamReports
     *
     * @return int
     */
    public function getSpamReports(): int
    {
        return $this->container['spamReports'];
    }

    /**
     * Sets spamReports
     *
     * @param int $spamReports Number of complaints (spam reports) for the date
     *
     * @return $this
     */
    public function setSpamReports(int $spamReports): static
    {
        if (is_null($spamReports)) {
            throw new InvalidArgumentException('non-nullable spamReports cannot be null');
        }
        $this->container['spamReports'] = $spamReports;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return int
     */
    public function getBlocked(): int
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param int $blocked Number of blocked emails for the date
     *
     * @return $this
     */
    public function setBlocked(int $blocked): static
    {
        if (is_null($blocked)) {
            throw new InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets invalid
     *
     * @return int
     */
    public function getInvalid(): int
    {
        return $this->container['invalid'];
    }

    /**
     * Sets invalid
     *
     * @param int $invalid Number of invalid emails for the date
     *
     * @return $this
     */
    public function setInvalid(int $invalid): static
    {
        if (is_null($invalid)) {
            throw new InvalidArgumentException('non-nullable invalid cannot be null');
        }
        $this->container['invalid'] = $invalid;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return int
     */
    public function getUnsubscribed(): int
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param int $unsubscribed Number of unsubscribed emails for the date
     *
     * @return $this
     */
    public function setUnsubscribed(int $unsubscribed): static
    {
        if (is_null($unsubscribed)) {
            throw new InvalidArgumentException('non-nullable unsubscribed cannot be null');
        }
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }
}


