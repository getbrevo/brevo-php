<?php
/**
 * BalanceLimitPayload
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * BalanceLimitPayload Class Doc Comment
 *
 * @description Balance definition limit payload
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BalanceLimitPayload extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'balanceLimitPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'transactionType' => 'string',
        'durationValue' => 'int',
        'durationUnit' => 'string',
        'value' => 'float',
        'constraintType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'transactionType' => null,
        'durationValue' => null,
        'durationUnit' => null,
        'value' => null,
        'constraintType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'transactionType' => false,
        'durationValue' => false,
        'durationUnit' => false,
        'value' => false,
        'constraintType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'transactionType' => 'transactionType',
        'durationValue' => 'durationValue',
        'durationUnit' => 'durationUnit',
        'value' => 'value',
        'constraintType' => 'constraintType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'transactionType' => 'setTransactionType',
        'durationValue' => 'setDurationValue',
        'durationUnit' => 'setDurationUnit',
        'value' => 'setValue',
        'constraintType' => 'setConstraintType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'transactionType' => 'getTransactionType',
        'durationValue' => 'getDurationValue',
        'durationUnit' => 'getDurationUnit',
        'value' => 'getValue',
        'constraintType' => 'getConstraintType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const TRANSACTION_TYPE_DEBIT = 'debit';
    public const TRANSACTION_TYPE_CREDIT = 'credit';
    public const DURATION_UNIT_DAY = 'day';
    public const DURATION_UNIT_WEEK = 'week';
    public const DURATION_UNIT_MONTH = 'month';
    public const DURATION_UNIT_YEAR = 'year';
    public const CONSTRAINT_TYPE_AMOUNT = 'amount';
    public const CONSTRAINT_TYPE_TRANSACTION = 'transaction';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_DEBIT,
            self::TRANSACTION_TYPE_CREDIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDurationUnitAllowableValues()
    {
        return [
            self::DURATION_UNIT_DAY,
            self::DURATION_UNIT_WEEK,
            self::DURATION_UNIT_MONTH,
            self::DURATION_UNIT_YEAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConstraintTypeAllowableValues()
    {
        return [
            self::CONSTRAINT_TYPE_AMOUNT,
            self::CONSTRAINT_TYPE_TRANSACTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transactionType', $data ?? [], null);
        $this->setIfExists('durationValue', $data ?? [], null);
        $this->setIfExists('durationUnit', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('constraintType', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transactionType']) && !in_array($this->container['transactionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transactionType', must be one of '%s'",
                $this->container['transactionType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDurationUnitAllowableValues();
        if (!is_null($this->container['durationUnit']) && !in_array($this->container['durationUnit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'durationUnit', must be one of '%s'",
                $this->container['durationUnit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConstraintTypeAllowableValues();
        if (!is_null($this->container['constraintType']) && !in_array($this->container['constraintType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'constraintType', must be one of '%s'",
                $this->container['constraintType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the balance limit in UUID format.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return string|null
     */
    public function getTransactionType(): ?string
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param string|null $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType(?string $transactionType): static
    {
        if (is_null($transactionType)) {
            throw new InvalidArgumentException('non-nullable transactionType cannot be null');
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transactionType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transactionType', must be one of '%s'",
                    $transactionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets durationValue
     *
     * @return int|null
     */
    public function getDurationValue(): ?int
    {
        return $this->container['durationValue'];
    }

    /**
     * Sets durationValue
     *
     * @param int|null $durationValue Number of days/weeks/month/year for balance expiry
     *
     * @return $this
     */
    public function setDurationValue(?int $durationValue): static
    {
        if (is_null($durationValue)) {
            throw new InvalidArgumentException('non-nullable durationValue cannot be null');
        }
        $this->container['durationValue'] = $durationValue;

        return $this;
    }

    /**
     * Gets durationUnit
     *
     * @return string|null
     */
    public function getDurationUnit(): ?string
    {
        return $this->container['durationUnit'];
    }

    /**
     * Sets durationUnit
     *
     * @param string|null $durationUnit Unit of time for the balance's availability (e.g., day/week/month/year).
     *
     * @return $this
     */
    public function setDurationUnit(?string $durationUnit): static
    {
        if (is_null($durationUnit)) {
            throw new InvalidArgumentException('non-nullable durationUnit cannot be null');
        }
        $allowedValues = $this->getDurationUnitAllowableValues();
        if (!in_array($durationUnit, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'durationUnit', must be one of '%s'",
                    $durationUnit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['durationUnit'] = $durationUnit;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value The value or amount associated with the balance limit.
     *
     * @return $this
     */
    public function setValue(?float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets constraintType
     *
     * @return string|null
     */
    public function getConstraintType(): ?string
    {
        return $this->container['constraintType'];
    }

    /**
     * Sets constraintType
     *
     * @param string|null $constraintType Defines the type of constraint imposed by the balance limit.
     *
     * @return $this
     */
    public function setConstraintType(?string $constraintType): static
    {
        if (is_null($constraintType)) {
            throw new InvalidArgumentException('non-nullable constraintType cannot be null');
        }
        $allowedValues = $this->getConstraintTypeAllowableValues();
        if (!in_array($constraintType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'constraintType', must be one of '%s'",
                    $constraintType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['constraintType'] = $constraintType;

        return $this;
    }
}


