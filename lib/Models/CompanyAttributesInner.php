<?php
/**
 * CompanyAttributesInner
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CompanyAttributesInner Class Doc Comment
 *
 * @description List of attributes
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CompanyAttributesInner extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CompanyAttributes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'internalName' => 'string',
        'label' => 'string',
        'attributeTypeName' => 'string',
        'attributeOptions' => 'object[]',
        'isRequired' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'internalName' => null,
        'label' => null,
        'attributeTypeName' => null,
        'attributeOptions' => null,
        'isRequired' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'internalName' => false,
        'label' => false,
        'attributeTypeName' => false,
        'attributeOptions' => false,
        'isRequired' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'internalName' => 'internalName',
        'label' => 'label',
        'attributeTypeName' => 'attributeTypeName',
        'attributeOptions' => 'attributeOptions',
        'isRequired' => 'isRequired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'internalName' => 'setInternalName',
        'label' => 'setLabel',
        'attributeTypeName' => 'setAttributeTypeName',
        'attributeOptions' => 'setAttributeOptions',
        'isRequired' => 'setIsRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'internalName' => 'getInternalName',
        'label' => 'getLabel',
        'attributeTypeName' => 'getAttributeTypeName',
        'attributeOptions' => 'getAttributeOptions',
        'isRequired' => 'getIsRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('internalName', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('attributeTypeName', $data ?? [], null);
        $this->setIfExists('attributeOptions', $data ?? [], null);
        $this->setIfExists('isRequired', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets internalName
     *
     * @return string|null
     */
    public function getInternalName(): ?string
    {
        return $this->container['internalName'];
    }

    /**
     * Sets internalName
     *
     * @param string|null $internalName internalName
     *
     * @return $this
     */
    public function setInternalName(?string $internalName): static
    {
        if (is_null($internalName)) {
            throw new InvalidArgumentException('non-nullable internalName cannot be null');
        }
        $this->container['internalName'] = $internalName;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel(): ?string
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return $this
     */
    public function setLabel(?string $label): static
    {
        if (is_null($label)) {
            throw new InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets attributeTypeName
     *
     * @return string|null
     */
    public function getAttributeTypeName(): ?string
    {
        return $this->container['attributeTypeName'];
    }

    /**
     * Sets attributeTypeName
     *
     * @param string|null $attributeTypeName attributeTypeName
     *
     * @return $this
     */
    public function setAttributeTypeName(?string $attributeTypeName): static
    {
        if (is_null($attributeTypeName)) {
            throw new InvalidArgumentException('non-nullable attributeTypeName cannot be null');
        }
        $this->container['attributeTypeName'] = $attributeTypeName;

        return $this;
    }

    /**
     * Gets attributeOptions
     *
     * @return object[]|null
     */
    public function getAttributeOptions(): ?array
    {
        return $this->container['attributeOptions'];
    }

    /**
     * Sets attributeOptions
     *
     * @param object[]|null $attributeOptions attributeOptions
     *
     * @return $this
     */
    public function setAttributeOptions(?array $attributeOptions): static
    {
        if (is_null($attributeOptions)) {
            throw new InvalidArgumentException('non-nullable attributeOptions cannot be null');
        }
        $this->container['attributeOptions'] = $attributeOptions;

        return $this;
    }

    /**
     * Gets isRequired
     *
     * @return bool|null
     */
    public function getIsRequired(): ?bool
    {
        return $this->container['isRequired'];
    }

    /**
     * Sets isRequired
     *
     * @param bool|null $isRequired isRequired
     *
     * @return $this
     */
    public function setIsRequired(?bool $isRequired): static
    {
        if (is_null($isRequired)) {
            throw new InvalidArgumentException('non-nullable isRequired cannot be null');
        }
        $this->container['isRequired'] = $isRequired;

        return $this;
    }
}


