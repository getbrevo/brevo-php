<?php
/**
 * GetAccount
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetAccount Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetAccount extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'email' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'companyName' => 'string',
        'address' => '\Brevo\Client\Models\GetExtendedClientAllOfAddress',
        'plan' => '\Brevo\Client\Models\GetAccountAllOfPlan[]',
        'relay' => '\Brevo\Client\Models\GetAccountAllOfRelay',
        'marketingAutomation' => '\Brevo\Client\Models\GetAccountAllOfMarketingAutomation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'email' => 'email',
        'firstName' => null,
        'lastName' => null,
        'companyName' => null,
        'address' => null,
        'plan' => null,
        'relay' => null,
        'marketingAutomation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'email' => false,
        'firstName' => false,
        'lastName' => false,
        'companyName' => false,
        'address' => false,
        'plan' => false,
        'relay' => false,
        'marketingAutomation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'email' => 'email',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'companyName' => 'companyName',
        'address' => 'address',
        'plan' => 'plan',
        'relay' => 'relay',
        'marketingAutomation' => 'marketingAutomation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'email' => 'setEmail',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'companyName' => 'setCompanyName',
        'address' => 'setAddress',
        'plan' => 'setPlan',
        'relay' => 'setRelay',
        'marketingAutomation' => 'setMarketingAutomation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'email' => 'getEmail',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'companyName' => 'getCompanyName',
        'address' => 'getAddress',
        'plan' => 'getPlan',
        'relay' => 'getRelay',
        'marketingAutomation' => 'getMarketingAutomation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('relay', $data ?? [], null);
        $this->setIfExists('marketingAutomation', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ($this->container['companyName'] === null) {
            $invalidProperties[] = "'companyName' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        if ($this->container['relay'] === null) {
            $invalidProperties[] = "'relay' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail(): string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Login Email
     *
     * @return $this
     */
    public function setEmail(string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName(): string
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName First Name
     *
     * @return $this
     */
    public function setFirstName(string $firstName): static
    {
        if (is_null($firstName)) {
            throw new InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName(): string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Last Name
     *
     * @return $this
     */
    public function setLastName(string $lastName): static
    {
        if (is_null($lastName)) {
            throw new InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName(): string
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName Name of the company
     *
     * @return $this
     */
    public function setCompanyName(string $companyName): static
    {
        if (is_null($companyName)) {
            throw new InvalidArgumentException('non-nullable companyName cannot be null');
        }
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Brevo\Client\Models\GetExtendedClientAllOfAddress
     */
    public function getAddress(): \Brevo\Client\Models\GetExtendedClientAllOfAddress
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Brevo\Client\Models\GetExtendedClientAllOfAddress $address address
     *
     * @return $this
     */
    public function setAddress(\Brevo\Client\Models\GetExtendedClientAllOfAddress $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \Brevo\Client\Models\GetAccountAllOfPlan[]
     */
    public function getPlan(): array
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \Brevo\Client\Models\GetAccountAllOfPlan[] $plan Information about your plans and credits
     *
     * @return $this
     */
    public function setPlan(array $plan): static
    {
        if (is_null($plan)) {
            throw new InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets relay
     *
     * @return \Brevo\Client\Models\GetAccountAllOfRelay
     */
    public function getRelay(): \Brevo\Client\Models\GetAccountAllOfRelay
    {
        return $this->container['relay'];
    }

    /**
     * Sets relay
     *
     * @param \Brevo\Client\Models\GetAccountAllOfRelay $relay relay
     *
     * @return $this
     */
    public function setRelay(\Brevo\Client\Models\GetAccountAllOfRelay $relay): static
    {
        if (is_null($relay)) {
            throw new InvalidArgumentException('non-nullable relay cannot be null');
        }
        $this->container['relay'] = $relay;

        return $this;
    }

    /**
     * Gets marketingAutomation
     *
     * @return \Brevo\Client\Models\GetAccountAllOfMarketingAutomation|null
     */
    public function getMarketingAutomation(): ?\Brevo\Client\Models\GetAccountAllOfMarketingAutomation
    {
        return $this->container['marketingAutomation'];
    }

    /**
     * Sets marketingAutomation
     *
     * @param \Brevo\Client\Models\GetAccountAllOfMarketingAutomation|null $marketingAutomation marketingAutomation
     *
     * @return $this
     */
    public function setMarketingAutomation(?\Brevo\Client\Models\GetAccountAllOfMarketingAutomation $marketingAutomation): static
    {
        if (is_null($marketingAutomation)) {
            throw new InvalidArgumentException('non-nullable marketingAutomation cannot be null');
        }
        $this->container['marketingAutomation'] = $marketingAutomation;

        return $this;
    }
}


