<?php
/**
 * AbTestCampaignResultStatistics
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * AbTestCampaignResultStatistics Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AbTestCampaignResultStatistics extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'abTestCampaignResult_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'openers' => '\Brevo\Client\Models\AbTestVersionStats',
        'clicks' => '\Brevo\Client\Models\AbTestVersionStats',
        'unsubscribed' => '\Brevo\Client\Models\AbTestVersionStats',
        'hardBounces' => '\Brevo\Client\Models\AbTestVersionStats',
        'softBounces' => '\Brevo\Client\Models\AbTestVersionStats',
        'complaints' => '\Brevo\Client\Models\AbTestVersionStats'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'openers' => null,
        'clicks' => null,
        'unsubscribed' => null,
        'hardBounces' => null,
        'softBounces' => null,
        'complaints' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'openers' => false,
        'clicks' => false,
        'unsubscribed' => false,
        'hardBounces' => false,
        'softBounces' => false,
        'complaints' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'openers' => 'openers',
        'clicks' => 'clicks',
        'unsubscribed' => 'unsubscribed',
        'hardBounces' => 'hardBounces',
        'softBounces' => 'softBounces',
        'complaints' => 'complaints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'openers' => 'setOpeners',
        'clicks' => 'setClicks',
        'unsubscribed' => 'setUnsubscribed',
        'hardBounces' => 'setHardBounces',
        'softBounces' => 'setSoftBounces',
        'complaints' => 'setComplaints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'openers' => 'getOpeners',
        'clicks' => 'getClicks',
        'unsubscribed' => 'getUnsubscribed',
        'hardBounces' => 'getHardBounces',
        'softBounces' => 'getSoftBounces',
        'complaints' => 'getComplaints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('openers', $data ?? [], null);
        $this->setIfExists('clicks', $data ?? [], null);
        $this->setIfExists('unsubscribed', $data ?? [], null);
        $this->setIfExists('hardBounces', $data ?? [], null);
        $this->setIfExists('softBounces', $data ?? [], null);
        $this->setIfExists('complaints', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['openers'] === null) {
            $invalidProperties[] = "'openers' can't be null";
        }
        if ($this->container['clicks'] === null) {
            $invalidProperties[] = "'clicks' can't be null";
        }
        if ($this->container['unsubscribed'] === null) {
            $invalidProperties[] = "'unsubscribed' can't be null";
        }
        if ($this->container['hardBounces'] === null) {
            $invalidProperties[] = "'hardBounces' can't be null";
        }
        if ($this->container['softBounces'] === null) {
            $invalidProperties[] = "'softBounces' can't be null";
        }
        if ($this->container['complaints'] === null) {
            $invalidProperties[] = "'complaints' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets openers
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getOpeners(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['openers'];
    }

    /**
     * Sets openers
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $openers openers
     *
     * @return $this
     */
    public function setOpeners(\Brevo\Client\Models\AbTestVersionStats $openers): static
    {
        if (is_null($openers)) {
            throw new InvalidArgumentException('non-nullable openers cannot be null');
        }
        $this->container['openers'] = $openers;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getClicks(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $clicks clicks
     *
     * @return $this
     */
    public function setClicks(\Brevo\Client\Models\AbTestVersionStats $clicks): static
    {
        if (is_null($clicks)) {
            throw new InvalidArgumentException('non-nullable clicks cannot be null');
        }
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getUnsubscribed(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $unsubscribed unsubscribed
     *
     * @return $this
     */
    public function setUnsubscribed(\Brevo\Client\Models\AbTestVersionStats $unsubscribed): static
    {
        if (is_null($unsubscribed)) {
            throw new InvalidArgumentException('non-nullable unsubscribed cannot be null');
        }
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets hardBounces
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getHardBounces(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['hardBounces'];
    }

    /**
     * Sets hardBounces
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $hardBounces hardBounces
     *
     * @return $this
     */
    public function setHardBounces(\Brevo\Client\Models\AbTestVersionStats $hardBounces): static
    {
        if (is_null($hardBounces)) {
            throw new InvalidArgumentException('non-nullable hardBounces cannot be null');
        }
        $this->container['hardBounces'] = $hardBounces;

        return $this;
    }

    /**
     * Gets softBounces
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getSoftBounces(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['softBounces'];
    }

    /**
     * Sets softBounces
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $softBounces softBounces
     *
     * @return $this
     */
    public function setSoftBounces(\Brevo\Client\Models\AbTestVersionStats $softBounces): static
    {
        if (is_null($softBounces)) {
            throw new InvalidArgumentException('non-nullable softBounces cannot be null');
        }
        $this->container['softBounces'] = $softBounces;

        return $this;
    }

    /**
     * Gets complaints
     *
     * @return \Brevo\Client\Models\AbTestVersionStats
     */
    public function getComplaints(): \Brevo\Client\Models\AbTestVersionStats
    {
        return $this->container['complaints'];
    }

    /**
     * Sets complaints
     *
     * @param \Brevo\Client\Models\AbTestVersionStats $complaints complaints
     *
     * @return $this
     */
    public function setComplaints(\Brevo\Client\Models\AbTestVersionStats $complaints): static
    {
        if (is_null($complaints)) {
            throw new InvalidArgumentException('non-nullable complaints cannot be null');
        }
        $this->container['complaints'] = $complaints;

        return $this;
    }
}


