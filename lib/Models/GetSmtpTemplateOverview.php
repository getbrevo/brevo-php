<?php
/**
 * GetSmtpTemplateOverview
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetSmtpTemplateOverview Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetSmtpTemplateOverview extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getSmtpTemplateOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'subject' => 'string',
        'isActive' => 'bool',
        'testSent' => 'bool',
        'sender' => '\Brevo\Client\Models\GetSmtpTemplateOverviewSender',
        'replyTo' => 'string',
        'toField' => 'string',
        'tag' => 'string',
        'htmlContent' => 'string',
        'createdAt' => 'string',
        'modifiedAt' => 'string',
        'doiTemplate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'subject' => null,
        'isActive' => null,
        'testSent' => null,
        'sender' => null,
        'replyTo' => 'email',
        'toField' => null,
        'tag' => null,
        'htmlContent' => null,
        'createdAt' => null,
        'modifiedAt' => null,
        'doiTemplate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'subject' => false,
        'isActive' => false,
        'testSent' => false,
        'sender' => false,
        'replyTo' => false,
        'toField' => false,
        'tag' => false,
        'htmlContent' => false,
        'createdAt' => false,
        'modifiedAt' => false,
        'doiTemplate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'subject' => 'subject',
        'isActive' => 'isActive',
        'testSent' => 'testSent',
        'sender' => 'sender',
        'replyTo' => 'replyTo',
        'toField' => 'toField',
        'tag' => 'tag',
        'htmlContent' => 'htmlContent',
        'createdAt' => 'createdAt',
        'modifiedAt' => 'modifiedAt',
        'doiTemplate' => 'doiTemplate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'subject' => 'setSubject',
        'isActive' => 'setIsActive',
        'testSent' => 'setTestSent',
        'sender' => 'setSender',
        'replyTo' => 'setReplyTo',
        'toField' => 'setToField',
        'tag' => 'setTag',
        'htmlContent' => 'setHtmlContent',
        'createdAt' => 'setCreatedAt',
        'modifiedAt' => 'setModifiedAt',
        'doiTemplate' => 'setDoiTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'subject' => 'getSubject',
        'isActive' => 'getIsActive',
        'testSent' => 'getTestSent',
        'sender' => 'getSender',
        'replyTo' => 'getReplyTo',
        'toField' => 'getToField',
        'tag' => 'getTag',
        'htmlContent' => 'getHtmlContent',
        'createdAt' => 'getCreatedAt',
        'modifiedAt' => 'getModifiedAt',
        'doiTemplate' => 'getDoiTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('testSent', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('replyTo', $data ?? [], null);
        $this->setIfExists('toField', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('htmlContent', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('modifiedAt', $data ?? [], null);
        $this->setIfExists('doiTemplate', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalidProperties[] = "'isActive' can't be null";
        }
        if ($this->container['testSent'] === null) {
            $invalidProperties[] = "'testSent' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['replyTo'] === null) {
            $invalidProperties[] = "'replyTo' can't be null";
        }
        if ($this->container['toField'] === null) {
            $invalidProperties[] = "'toField' can't be null";
        }
        if ($this->container['tag'] === null) {
            $invalidProperties[] = "'tag' can't be null";
        }
        if ($this->container['htmlContent'] === null) {
            $invalidProperties[] = "'htmlContent' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['modifiedAt'] === null) {
            $invalidProperties[] = "'modifiedAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the template
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the template
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject(): string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the template
     *
     * @return $this
     */
    public function setSubject(string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive(): bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive Status of template (true=active, false=inactive)
     *
     * @return $this
     */
    public function setIsActive(bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets testSent
     *
     * @return bool
     */
    public function getTestSent(): bool
    {
        return $this->container['testSent'];
    }

    /**
     * Sets testSent
     *
     * @param bool $testSent Status of test sending for the template (true=test email has been sent, false=test email has not been sent)
     *
     * @return $this
     */
    public function setTestSent(bool $testSent): static
    {
        if (is_null($testSent)) {
            throw new InvalidArgumentException('non-nullable testSent cannot be null');
        }
        $this->container['testSent'] = $testSent;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Brevo\Client\Models\GetSmtpTemplateOverviewSender
     */
    public function getSender(): \Brevo\Client\Models\GetSmtpTemplateOverviewSender
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Brevo\Client\Models\GetSmtpTemplateOverviewSender $sender sender
     *
     * @return $this
     */
    public function setSender(\Brevo\Client\Models\GetSmtpTemplateOverviewSender $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets replyTo
     *
     * @return string
     */
    public function getReplyTo(): string
    {
        return $this->container['replyTo'];
    }

    /**
     * Sets replyTo
     *
     * @param string $replyTo Email defined as the \"Reply to\" for the template
     *
     * @return $this
     */
    public function setReplyTo(string $replyTo): static
    {
        if (is_null($replyTo)) {
            throw new InvalidArgumentException('non-nullable replyTo cannot be null');
        }
        $this->container['replyTo'] = $replyTo;

        return $this;
    }

    /**
     * Gets toField
     *
     * @return string
     */
    public function getToField(): string
    {
        return $this->container['toField'];
    }

    /**
     * Sets toField
     *
     * @param string $toField Customisation of the \"to\" field for the template
     *
     * @return $this
     */
    public function setToField(string $toField): static
    {
        if (is_null($toField)) {
            throw new InvalidArgumentException('non-nullable toField cannot be null');
        }
        $this->container['toField'] = $toField;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag(): string
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag Tag of the template
     *
     * @return $this
     */
    public function setTag(string $tag): static
    {
        if (is_null($tag)) {
            throw new InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets htmlContent
     *
     * @return string
     */
    public function getHtmlContent(): string
    {
        return $this->container['htmlContent'];
    }

    /**
     * Sets htmlContent
     *
     * @param string $htmlContent HTML content of the template
     *
     * @return $this
     */
    public function setHtmlContent(string $htmlContent): static
    {
        if (is_null($htmlContent)) {
            throw new InvalidArgumentException('non-nullable htmlContent cannot be null');
        }
        $this->container['htmlContent'] = $htmlContent;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setCreatedAt(string $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets modifiedAt
     *
     * @return string
     */
    public function getModifiedAt(): string
    {
        return $this->container['modifiedAt'];
    }

    /**
     * Sets modifiedAt
     *
     * @param string $modifiedAt Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
     *
     * @return $this
     */
    public function setModifiedAt(string $modifiedAt): static
    {
        if (is_null($modifiedAt)) {
            throw new InvalidArgumentException('non-nullable modifiedAt cannot be null');
        }
        $this->container['modifiedAt'] = $modifiedAt;

        return $this;
    }

    /**
     * Gets doiTemplate
     *
     * @return bool|null
     */
    public function getDoiTemplate(): ?bool
    {
        return $this->container['doiTemplate'];
    }

    /**
     * Sets doiTemplate
     *
     * @param bool|null $doiTemplate It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.
     *
     * @return $this
     */
    public function setDoiTemplate(?bool $doiTemplate): static
    {
        if (is_null($doiTemplate)) {
            throw new InvalidArgumentException('non-nullable doiTemplate cannot be null');
        }
        $this->container['doiTemplate'] = $doiTemplate;

        return $this;
    }
}


