<?php
/**
 * UpdateEmailCampaign
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * UpdateEmailCampaign Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UpdateEmailCampaign extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'updateEmailCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'tag' => 'string',
        'sender' => '\Brevo\Client\Models\UpdateEmailCampaignSender',
        'name' => 'string',
        'htmlContent' => 'string',
        'htmlUrl' => 'string',
        'scheduledAt' => 'string',
        'subject' => 'string',
        'previewText' => 'string',
        'replyTo' => 'string',
        'toField' => 'string',
        'recipients' => '\Brevo\Client\Models\UpdateEmailCampaignRecipients',
        'attachmentUrl' => 'string',
        'inlineImageActivation' => 'bool',
        'mirrorActive' => 'bool',
        'recurring' => 'bool',
        'footer' => 'string',
        'header' => 'string',
        'utmCampaign' => 'string',
        'params' => 'array<string,mixed>',
        'sendAtBestTime' => 'bool',
        'abTesting' => 'bool',
        'subjectA' => 'string',
        'subjectB' => 'string',
        'splitRule' => 'int',
        'winnerCriteria' => 'string',
        'winnerDelay' => 'int',
        'ipWarmupEnable' => 'bool',
        'initialQuota' => 'int',
        'increaseRate' => 'int',
        'unsubscriptionPageId' => 'string',
        'updateFormId' => 'string',
        'emailExpirationDate' => '\Brevo\Client\Models\UpdateEmailCampaignEmailExpirationDate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'tag' => null,
        'sender' => null,
        'name' => null,
        'htmlContent' => null,
        'htmlUrl' => 'url',
        'scheduledAt' => null,
        'subject' => null,
        'previewText' => null,
        'replyTo' => 'email',
        'toField' => null,
        'recipients' => null,
        'attachmentUrl' => 'url',
        'inlineImageActivation' => null,
        'mirrorActive' => null,
        'recurring' => null,
        'footer' => null,
        'header' => null,
        'utmCampaign' => null,
        'params' => null,
        'sendAtBestTime' => null,
        'abTesting' => null,
        'subjectA' => null,
        'subjectB' => null,
        'splitRule' => 'int64',
        'winnerCriteria' => null,
        'winnerDelay' => 'int64',
        'ipWarmupEnable' => null,
        'initialQuota' => 'int64',
        'increaseRate' => 'int64',
        'unsubscriptionPageId' => null,
        'updateFormId' => null,
        'emailExpirationDate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'tag' => false,
        'sender' => false,
        'name' => false,
        'htmlContent' => false,
        'htmlUrl' => false,
        'scheduledAt' => false,
        'subject' => false,
        'previewText' => false,
        'replyTo' => false,
        'toField' => false,
        'recipients' => false,
        'attachmentUrl' => false,
        'inlineImageActivation' => false,
        'mirrorActive' => false,
        'recurring' => false,
        'footer' => false,
        'header' => false,
        'utmCampaign' => false,
        'params' => false,
        'sendAtBestTime' => false,
        'abTesting' => false,
        'subjectA' => false,
        'subjectB' => false,
        'splitRule' => false,
        'winnerCriteria' => false,
        'winnerDelay' => false,
        'ipWarmupEnable' => false,
        'initialQuota' => false,
        'increaseRate' => false,
        'unsubscriptionPageId' => false,
        'updateFormId' => false,
        'emailExpirationDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'tag' => 'tag',
        'sender' => 'sender',
        'name' => 'name',
        'htmlContent' => 'htmlContent',
        'htmlUrl' => 'htmlUrl',
        'scheduledAt' => 'scheduledAt',
        'subject' => 'subject',
        'previewText' => 'previewText',
        'replyTo' => 'replyTo',
        'toField' => 'toField',
        'recipients' => 'recipients',
        'attachmentUrl' => 'attachmentUrl',
        'inlineImageActivation' => 'inlineImageActivation',
        'mirrorActive' => 'mirrorActive',
        'recurring' => 'recurring',
        'footer' => 'footer',
        'header' => 'header',
        'utmCampaign' => 'utmCampaign',
        'params' => 'params',
        'sendAtBestTime' => 'sendAtBestTime',
        'abTesting' => 'abTesting',
        'subjectA' => 'subjectA',
        'subjectB' => 'subjectB',
        'splitRule' => 'splitRule',
        'winnerCriteria' => 'winnerCriteria',
        'winnerDelay' => 'winnerDelay',
        'ipWarmupEnable' => 'ipWarmupEnable',
        'initialQuota' => 'initialQuota',
        'increaseRate' => 'increaseRate',
        'unsubscriptionPageId' => 'unsubscriptionPageId',
        'updateFormId' => 'updateFormId',
        'emailExpirationDate' => 'emailExpirationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'tag' => 'setTag',
        'sender' => 'setSender',
        'name' => 'setName',
        'htmlContent' => 'setHtmlContent',
        'htmlUrl' => 'setHtmlUrl',
        'scheduledAt' => 'setScheduledAt',
        'subject' => 'setSubject',
        'previewText' => 'setPreviewText',
        'replyTo' => 'setReplyTo',
        'toField' => 'setToField',
        'recipients' => 'setRecipients',
        'attachmentUrl' => 'setAttachmentUrl',
        'inlineImageActivation' => 'setInlineImageActivation',
        'mirrorActive' => 'setMirrorActive',
        'recurring' => 'setRecurring',
        'footer' => 'setFooter',
        'header' => 'setHeader',
        'utmCampaign' => 'setUtmCampaign',
        'params' => 'setParams',
        'sendAtBestTime' => 'setSendAtBestTime',
        'abTesting' => 'setAbTesting',
        'subjectA' => 'setSubjectA',
        'subjectB' => 'setSubjectB',
        'splitRule' => 'setSplitRule',
        'winnerCriteria' => 'setWinnerCriteria',
        'winnerDelay' => 'setWinnerDelay',
        'ipWarmupEnable' => 'setIpWarmupEnable',
        'initialQuota' => 'setInitialQuota',
        'increaseRate' => 'setIncreaseRate',
        'unsubscriptionPageId' => 'setUnsubscriptionPageId',
        'updateFormId' => 'setUpdateFormId',
        'emailExpirationDate' => 'setEmailExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'tag' => 'getTag',
        'sender' => 'getSender',
        'name' => 'getName',
        'htmlContent' => 'getHtmlContent',
        'htmlUrl' => 'getHtmlUrl',
        'scheduledAt' => 'getScheduledAt',
        'subject' => 'getSubject',
        'previewText' => 'getPreviewText',
        'replyTo' => 'getReplyTo',
        'toField' => 'getToField',
        'recipients' => 'getRecipients',
        'attachmentUrl' => 'getAttachmentUrl',
        'inlineImageActivation' => 'getInlineImageActivation',
        'mirrorActive' => 'getMirrorActive',
        'recurring' => 'getRecurring',
        'footer' => 'getFooter',
        'header' => 'getHeader',
        'utmCampaign' => 'getUtmCampaign',
        'params' => 'getParams',
        'sendAtBestTime' => 'getSendAtBestTime',
        'abTesting' => 'getAbTesting',
        'subjectA' => 'getSubjectA',
        'subjectB' => 'getSubjectB',
        'splitRule' => 'getSplitRule',
        'winnerCriteria' => 'getWinnerCriteria',
        'winnerDelay' => 'getWinnerDelay',
        'ipWarmupEnable' => 'getIpWarmupEnable',
        'initialQuota' => 'getInitialQuota',
        'increaseRate' => 'getIncreaseRate',
        'unsubscriptionPageId' => 'getUnsubscriptionPageId',
        'updateFormId' => 'getUpdateFormId',
        'emailExpirationDate' => 'getEmailExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const WINNER_CRITERIA_OPEN = 'open';
    public const WINNER_CRITERIA_CLICK = 'click';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinnerCriteriaAllowableValues()
    {
        return [
            self::WINNER_CRITERIA_OPEN,
            self::WINNER_CRITERIA_CLICK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('htmlContent', $data ?? [], null);
        $this->setIfExists('htmlUrl', $data ?? [], null);
        $this->setIfExists('scheduledAt', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('previewText', $data ?? [], null);
        $this->setIfExists('replyTo', $data ?? [], null);
        $this->setIfExists('toField', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('attachmentUrl', $data ?? [], null);
        $this->setIfExists('inlineImageActivation', $data ?? [], false);
        $this->setIfExists('mirrorActive', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], false);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('utmCampaign', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
        $this->setIfExists('sendAtBestTime', $data ?? [], null);
        $this->setIfExists('abTesting', $data ?? [], false);
        $this->setIfExists('subjectA', $data ?? [], null);
        $this->setIfExists('subjectB', $data ?? [], null);
        $this->setIfExists('splitRule', $data ?? [], null);
        $this->setIfExists('winnerCriteria', $data ?? [], null);
        $this->setIfExists('winnerDelay', $data ?? [], null);
        $this->setIfExists('ipWarmupEnable', $data ?? [], false);
        $this->setIfExists('initialQuota', $data ?? [], null);
        $this->setIfExists('increaseRate', $data ?? [], null);
        $this->setIfExists('unsubscriptionPageId', $data ?? [], null);
        $this->setIfExists('updateFormId', $data ?? [], null);
        $this->setIfExists('emailExpirationDate', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['splitRule']) && ($this->container['splitRule'] > 50)) {
            $invalidProperties[] = "invalid value for 'splitRule', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['splitRule']) && ($this->container['splitRule'] < 1)) {
            $invalidProperties[] = "invalid value for 'splitRule', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getWinnerCriteriaAllowableValues();
        if (!is_null($this->container['winnerCriteria']) && !in_array($this->container['winnerCriteria'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'winnerCriteria', must be one of '%s'",
                $this->container['winnerCriteria'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['winnerDelay']) && ($this->container['winnerDelay'] > 168)) {
            $invalidProperties[] = "invalid value for 'winnerDelay', must be smaller than or equal to 168.";
        }

        if (!is_null($this->container['winnerDelay']) && ($this->container['winnerDelay'] < 1)) {
            $invalidProperties[] = "invalid value for 'winnerDelay', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['increaseRate']) && ($this->container['increaseRate'] > 100)) {
            $invalidProperties[] = "invalid value for 'increaseRate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['increaseRate']) && ($this->container['increaseRate'] < 0)) {
            $invalidProperties[] = "invalid value for 'increaseRate', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag(): ?string
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Tag of the campaign
     *
     * @return $this
     */
    public function setTag(?string $tag): static
    {
        if (is_null($tag)) {
            throw new InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Brevo\Client\Models\UpdateEmailCampaignSender|null
     */
    public function getSender(): ?\Brevo\Client\Models\UpdateEmailCampaignSender
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Brevo\Client\Models\UpdateEmailCampaignSender|null $sender sender
     *
     * @return $this
     */
    public function setSender(?\Brevo\Client\Models\UpdateEmailCampaignSender $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the campaign
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets htmlContent
     *
     * @return string|null
     */
    public function getHtmlContent(): ?string
    {
        return $this->container['htmlContent'];
    }

    /**
     * Sets htmlContent
     *
     * @param string|null $htmlContent Body of the message (HTML version). If the campaign is designed using Drag & Drop editor via HTML content, then the design page will not have Drag & Drop editor access for that campaign. **REQUIRED if htmlUrl is empty**
     *
     * @return $this
     */
    public function setHtmlContent(?string $htmlContent): static
    {
        if (is_null($htmlContent)) {
            throw new InvalidArgumentException('non-nullable htmlContent cannot be null');
        }
        $this->container['htmlContent'] = $htmlContent;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string|null
     */
    public function getHtmlUrl(): ?string
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string|null $htmlUrl Url which contents the body of the email message. **REQUIRED if htmlContent is empty**
     *
     * @return $this
     */
    public function setHtmlUrl(?string $htmlUrl): static
    {
        if (is_null($htmlUrl)) {
            throw new InvalidArgumentException('non-nullable htmlUrl cannot be null');
        }
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets scheduledAt
     *
     * @return string|null
     */
    public function getScheduledAt(): ?string
    {
        return $this->container['scheduledAt'];
    }

    /**
     * Sets scheduledAt
     *
     * @param string|null $scheduledAt UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.** If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
     *
     * @return $this
     */
    public function setScheduledAt(?string $scheduledAt): static
    {
        if (is_null($scheduledAt)) {
            throw new InvalidArgumentException('non-nullable scheduledAt cannot be null');
        }
        $this->container['scheduledAt'] = $scheduledAt;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject(): ?string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Subject of the campaign
     *
     * @return $this
     */
    public function setSubject(?string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets previewText
     *
     * @return string|null
     */
    public function getPreviewText(): ?string
    {
        return $this->container['previewText'];
    }

    /**
     * Sets previewText
     *
     * @param string|null $previewText Preview text or preheader of the email campaign
     *
     * @return $this
     */
    public function setPreviewText(?string $previewText): static
    {
        if (is_null($previewText)) {
            throw new InvalidArgumentException('non-nullable previewText cannot be null');
        }
        $this->container['previewText'] = $previewText;

        return $this;
    }

    /**
     * Gets replyTo
     *
     * @return string|null
     */
    public function getReplyTo(): ?string
    {
        return $this->container['replyTo'];
    }

    /**
     * Sets replyTo
     *
     * @param string|null $replyTo Email on which campaign recipients will be able to reply to
     *
     * @return $this
     */
    public function setReplyTo(?string $replyTo): static
    {
        if (is_null($replyTo)) {
            throw new InvalidArgumentException('non-nullable replyTo cannot be null');
        }
        $this->container['replyTo'] = $replyTo;

        return $this;
    }

    /**
     * Gets toField
     *
     * @return string|null
     */
    public function getToField(): ?string
    {
        return $this->container['toField'];
    }

    /**
     * Sets toField
     *
     * @param string|null $toField To personalize the **To** Field. If you want to include the first name and last name of your recipient, add **{FNAME} {LNAME}**. These contact attributes must already exist in your Brevo account. If input parameter **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
     *
     * @return $this
     */
    public function setToField(?string $toField): static
    {
        if (is_null($toField)) {
            throw new InvalidArgumentException('non-nullable toField cannot be null');
        }
        $this->container['toField'] = $toField;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \Brevo\Client\Models\UpdateEmailCampaignRecipients|null
     */
    public function getRecipients(): ?\Brevo\Client\Models\UpdateEmailCampaignRecipients
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \Brevo\Client\Models\UpdateEmailCampaignRecipients|null $recipients recipients
     *
     * @return $this
     */
    public function setRecipients(?\Brevo\Client\Models\UpdateEmailCampaignRecipients $recipients): static
    {
        if (is_null($recipients)) {
            throw new InvalidArgumentException('non-nullable recipients cannot be null');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets attachmentUrl
     *
     * @return string|null
     */
    public function getAttachmentUrl(): ?string
    {
        return $this->container['attachmentUrl'];
    }

    /**
     * Sets attachmentUrl
     *
     * @param string|null $attachmentUrl Absolute url of the attachment (no local file). Extension allowed: #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps'
     *
     * @return $this
     */
    public function setAttachmentUrl(?string $attachmentUrl): static
    {
        if (is_null($attachmentUrl)) {
            throw new InvalidArgumentException('non-nullable attachmentUrl cannot be null');
        }
        $this->container['attachmentUrl'] = $attachmentUrl;

        return $this;
    }

    /**
     * Gets inlineImageActivation
     *
     * @return bool|null
     */
    public function getInlineImageActivation(): ?bool
    {
        return $this->container['inlineImageActivation'];
    }

    /**
     * Sets inlineImageActivation
     *
     * @param bool|null $inlineImageActivation Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than **4MB** with images embedded in the email. Campaigns with the images embedded in the email _must be sent to less than 5000 contacts_.
     *
     * @return $this
     */
    public function setInlineImageActivation(?bool $inlineImageActivation): static
    {
        if (is_null($inlineImageActivation)) {
            throw new InvalidArgumentException('non-nullable inlineImageActivation cannot be null');
        }
        $this->container['inlineImageActivation'] = $inlineImageActivation;

        return $this;
    }

    /**
     * Gets mirrorActive
     *
     * @return bool|null
     */
    public function getMirrorActive(): ?bool
    {
        return $this->container['mirrorActive'];
    }

    /**
     * Sets mirrorActive
     *
     * @param bool|null $mirrorActive Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
     *
     * @return $this
     */
    public function setMirrorActive(?bool $mirrorActive): static
    {
        if (is_null($mirrorActive)) {
            throw new InvalidArgumentException('non-nullable mirrorActive cannot be null');
        }
        $this->container['mirrorActive'] = $mirrorActive;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool|null
     */
    public function getRecurring(): ?bool
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool|null $recurring **FOR TRIGGER ONLY !** Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
     *
     * @return $this
     */
    public function setRecurring(?bool $recurring): static
    {
        if (is_null($recurring)) {
            throw new InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string|null
     */
    public function getFooter(): ?string
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string|null $footer Footer of the email campaign
     *
     * @return $this
     */
    public function setFooter(?string $footer): static
    {
        if (is_null($footer)) {
            throw new InvalidArgumentException('non-nullable footer cannot be null');
        }
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string|null
     */
    public function getHeader(): ?string
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string|null $header Header of the email campaign
     *
     * @return $this
     */
    public function setHeader(?string $header): static
    {
        if (is_null($header)) {
            throw new InvalidArgumentException('non-nullable header cannot be null');
        }
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets utmCampaign
     *
     * @return string|null
     */
    public function getUtmCampaign(): ?string
    {
        return $this->container['utmCampaign'];
    }

    /**
     * Sets utmCampaign
     *
     * @param string|null $utmCampaign Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
     *
     * @return $this
     */
    public function setUtmCampaign(?string $utmCampaign): static
    {
        if (is_null($utmCampaign)) {
            throw new InvalidArgumentException('non-nullable utmCampaign cannot be null');
        }
        $this->container['utmCampaign'] = $utmCampaign;

        return $this;
    }

    /**
     * Gets params
     *
     * @return array<string,mixed>|null
     */
    public function getParams(): ?array
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param array<string,mixed>|null $params Pass the set of attributes to customize the type classic campaign. For example: **{\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}**. Only available if **type** is **classic**. It's considered only if campaign is in _New Template Language format_. The New Template Language is dependent on the values of **subject, htmlContent/htmlUrl, sender.name & toField**
     *
     * @return $this
     */
    public function setParams(?array $params): static
    {
        if (is_null($params)) {
            throw new InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets sendAtBestTime
     *
     * @return bool|null
     */
    public function getSendAtBestTime(): ?bool
    {
        return $this->container['sendAtBestTime'];
    }

    /**
     * Sets sendAtBestTime
     *
     * @param bool|null $sendAtBestTime Set this to true if you want to send your campaign at best time. Note:- **if true, warmup ip will be disabled.**
     *
     * @return $this
     */
    public function setSendAtBestTime(?bool $sendAtBestTime): static
    {
        if (is_null($sendAtBestTime)) {
            throw new InvalidArgumentException('non-nullable sendAtBestTime cannot be null');
        }
        $this->container['sendAtBestTime'] = $sendAtBestTime;

        return $this;
    }

    /**
     * Gets abTesting
     *
     * @return bool|null
     */
    public function getAbTesting(): ?bool
    {
        return $this->container['abTesting'];
    }

    /**
     * Sets abTesting
     *
     * @param bool|null $abTesting Status of A/B Test. abTesting = false means it is disabled & abTesting = true means it is enabled. **subjectA, subjectB, splitRule, winnerCriteria & winnerDelay** will be considered when abTesting is set to true. subjectA & subjectB are mandatory together & subject if passed is ignored. **Can be set to true only if sendAtBestTime is false**. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
     *
     * @return $this
     */
    public function setAbTesting(?bool $abTesting): static
    {
        if (is_null($abTesting)) {
            throw new InvalidArgumentException('non-nullable abTesting cannot be null');
        }
        $this->container['abTesting'] = $abTesting;

        return $this;
    }

    /**
     * Gets subjectA
     *
     * @return string|null
     */
    public function getSubjectA(): ?string
    {
        return $this->container['subjectA'];
    }

    /**
     * Sets subjectA
     *
     * @param string|null $subjectA Subject A of the campaign. **Mandatory if abTesting = true**. subjectA & subjectB should have unique value
     *
     * @return $this
     */
    public function setSubjectA(?string $subjectA): static
    {
        if (is_null($subjectA)) {
            throw new InvalidArgumentException('non-nullable subjectA cannot be null');
        }
        $this->container['subjectA'] = $subjectA;

        return $this;
    }

    /**
     * Gets subjectB
     *
     * @return string|null
     */
    public function getSubjectB(): ?string
    {
        return $this->container['subjectB'];
    }

    /**
     * Sets subjectB
     *
     * @param string|null $subjectB Subject B of the campaign. **Mandatory if abTesting = true**. subjectA & subjectB should have unique value
     *
     * @return $this
     */
    public function setSubjectB(?string $subjectB): static
    {
        if (is_null($subjectB)) {
            throw new InvalidArgumentException('non-nullable subjectB cannot be null');
        }
        $this->container['subjectB'] = $subjectB;

        return $this;
    }

    /**
     * Gets splitRule
     *
     * @return int|null
     */
    public function getSplitRule(): ?int
    {
        return $this->container['splitRule'];
    }

    /**
     * Sets splitRule
     *
     * @param int|null $splitRule Add the size of your test groups. **Mandatory if abTesting = true & 'recipients' is passed**. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
     *
     * @return $this
     */
    public function setSplitRule(?int $splitRule): static
    {
        if (is_null($splitRule)) {
            throw new InvalidArgumentException('non-nullable splitRule cannot be null');
        }

        if (($splitRule > 50)) {
            throw new InvalidArgumentException('invalid value for $splitRule when calling UpdateEmailCampaign., must be smaller than or equal to 50.');
        }
        if (($splitRule < 1)) {
            throw new InvalidArgumentException('invalid value for $splitRule when calling UpdateEmailCampaign., must be bigger than or equal to 1.');
        }

        $this->container['splitRule'] = $splitRule;

        return $this;
    }

    /**
     * Gets winnerCriteria
     *
     * @return string|null
     */
    public function getWinnerCriteria(): ?string
    {
        return $this->container['winnerCriteria'];
    }

    /**
     * Sets winnerCriteria
     *
     * @param string|null $winnerCriteria Choose the metrics that will determinate the winning version. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerCriteria` is ignored if passed
     *
     * @return $this
     */
    public function setWinnerCriteria(?string $winnerCriteria): static
    {
        if (is_null($winnerCriteria)) {
            throw new InvalidArgumentException('non-nullable winnerCriteria cannot be null');
        }
        $allowedValues = $this->getWinnerCriteriaAllowableValues();
        if (!in_array($winnerCriteria, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'winnerCriteria', must be one of '%s'",
                    $winnerCriteria,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['winnerCriteria'] = $winnerCriteria;

        return $this;
    }

    /**
     * Gets winnerDelay
     *
     * @return int|null
     */
    public function getWinnerDelay(): ?int
    {
        return $this->container['winnerDelay'];
    }

    /**
     * Sets winnerDelay
     *
     * @param int|null $winnerDelay Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerDelay` is ignored if passed
     *
     * @return $this
     */
    public function setWinnerDelay(?int $winnerDelay): static
    {
        if (is_null($winnerDelay)) {
            throw new InvalidArgumentException('non-nullable winnerDelay cannot be null');
        }

        if (($winnerDelay > 168)) {
            throw new InvalidArgumentException('invalid value for $winnerDelay when calling UpdateEmailCampaign., must be smaller than or equal to 168.');
        }
        if (($winnerDelay < 1)) {
            throw new InvalidArgumentException('invalid value for $winnerDelay when calling UpdateEmailCampaign., must be bigger than or equal to 1.');
        }

        $this->container['winnerDelay'] = $winnerDelay;

        return $this;
    }

    /**
     * Gets ipWarmupEnable
     *
     * @return bool|null
     */
    public function getIpWarmupEnable(): ?bool
    {
        return $this->container['ipWarmupEnable'];
    }

    /**
     * Sets ipWarmupEnable
     *
     * @param bool|null $ipWarmupEnable **Available for dedicated ip clients**. Set this to true if you wish to warm up your ip.
     *
     * @return $this
     */
    public function setIpWarmupEnable(?bool $ipWarmupEnable): static
    {
        if (is_null($ipWarmupEnable)) {
            throw new InvalidArgumentException('non-nullable ipWarmupEnable cannot be null');
        }
        $this->container['ipWarmupEnable'] = $ipWarmupEnable;

        return $this;
    }

    /**
     * Gets initialQuota
     *
     * @return int|null
     */
    public function getInitialQuota(): ?int
    {
        return $this->container['initialQuota'];
    }

    /**
     * Sets initialQuota
     *
     * @param int|null $initialQuota Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
     *
     * @return $this
     */
    public function setInitialQuota(?int $initialQuota): static
    {
        if (is_null($initialQuota)) {
            throw new InvalidArgumentException('non-nullable initialQuota cannot be null');
        }
        $this->container['initialQuota'] = $initialQuota;

        return $this;
    }

    /**
     * Gets increaseRate
     *
     * @return int|null
     */
    public function getIncreaseRate(): ?int
    {
        return $this->container['increaseRate'];
    }

    /**
     * Sets increaseRate
     *
     * @param int|null $increaseRate Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
     *
     * @return $this
     */
    public function setIncreaseRate(?int $increaseRate): static
    {
        if (is_null($increaseRate)) {
            throw new InvalidArgumentException('non-nullable increaseRate cannot be null');
        }

        if (($increaseRate > 100)) {
            throw new InvalidArgumentException('invalid value for $increaseRate when calling UpdateEmailCampaign., must be smaller than or equal to 100.');
        }
        if (($increaseRate < 0)) {
            throw new InvalidArgumentException('invalid value for $increaseRate when calling UpdateEmailCampaign., must be bigger than or equal to 0.');
        }

        $this->container['increaseRate'] = $increaseRate;

        return $this;
    }

    /**
     * Gets unsubscriptionPageId
     *
     * @return string|null
     */
    public function getUnsubscriptionPageId(): ?string
    {
        return $this->container['unsubscriptionPageId'];
    }

    /**
     * Sets unsubscriptionPageId
     *
     * @param string|null $unsubscriptionPageId Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page.
     *
     * @return $this
     */
    public function setUnsubscriptionPageId(?string $unsubscriptionPageId): static
    {
        if (is_null($unsubscriptionPageId)) {
            throw new InvalidArgumentException('non-nullable unsubscriptionPageId cannot be null');
        }
        $this->container['unsubscriptionPageId'] = $unsubscriptionPageId;

        return $this;
    }

    /**
     * Gets updateFormId
     *
     * @return string|null
     */
    public function getUpdateFormId(): ?string
    {
        return $this->container['updateFormId'];
    }

    /**
     * Sets updateFormId
     *
     * @param string|null $updateFormId **Mandatory if templateId is used containing the {{ update_profile }} tag**. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form.
     *
     * @return $this
     */
    public function setUpdateFormId(?string $updateFormId): static
    {
        if (is_null($updateFormId)) {
            throw new InvalidArgumentException('non-nullable updateFormId cannot be null');
        }
        $this->container['updateFormId'] = $updateFormId;

        return $this;
    }

    /**
     * Gets emailExpirationDate
     *
     * @return \Brevo\Client\Models\UpdateEmailCampaignEmailExpirationDate|null
     */
    public function getEmailExpirationDate(): ?\Brevo\Client\Models\UpdateEmailCampaignEmailExpirationDate
    {
        return $this->container['emailExpirationDate'];
    }

    /**
     * Sets emailExpirationDate
     *
     * @param \Brevo\Client\Models\UpdateEmailCampaignEmailExpirationDate|null $emailExpirationDate emailExpirationDate
     *
     * @return $this
     */
    public function setEmailExpirationDate(?\Brevo\Client\Models\UpdateEmailCampaignEmailExpirationDate $emailExpirationDate): static
    {
        if (is_null($emailExpirationDate)) {
            throw new InvalidArgumentException('non-nullable emailExpirationDate cannot be null');
        }
        $this->container['emailExpirationDate'] = $emailExpirationDate;

        return $this;
    }
}


