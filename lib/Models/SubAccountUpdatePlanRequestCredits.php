<?php
/**
 * SubAccountUpdatePlanRequestCredits
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * SubAccountUpdatePlanRequestCredits Class Doc Comment
 *
 * @description Credit details to update
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SubAccountUpdatePlanRequestCredits extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'subAccountUpdatePlanRequest_credits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'email' => 'int',
        'sms' => 'float',
        'wpSubscribers' => 'int',
        'externalFeeds' => 'float',
        'whatsapp' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'email' => 'int64',
        'sms' => 'float',
        'wpSubscribers' => 'int64',
        'externalFeeds' => 'int64',
        'whatsapp' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'email' => false,
        'sms' => false,
        'wpSubscribers' => false,
        'externalFeeds' => false,
        'whatsapp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'email' => 'email',
        'sms' => 'sms',
        'wpSubscribers' => 'wpSubscribers',
        'externalFeeds' => 'externalFeeds',
        'whatsapp' => 'whatsapp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'email' => 'setEmail',
        'sms' => 'setSms',
        'wpSubscribers' => 'setWpSubscribers',
        'externalFeeds' => 'setExternalFeeds',
        'whatsapp' => 'setWhatsapp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'email' => 'getEmail',
        'sms' => 'getSms',
        'wpSubscribers' => 'getWpSubscribers',
        'externalFeeds' => 'getExternalFeeds',
        'whatsapp' => 'getWhatsapp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('sms', $data ?? [], null);
        $this->setIfExists('wpSubscribers', $data ?? [], null);
        $this->setIfExists('externalFeeds', $data ?? [], null);
        $this->setIfExists('whatsapp', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets email
     *
     * @return int|null
     */
    public function getEmail(): ?int
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param int|null $email Number of email credits | Pass the value -1 for unlimited emails in ENTv2 only
     *
     * @return $this
     */
    public function setEmail(?int $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return float|null
     */
    public function getSms(): ?float
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param float|null $sms Number of SMS credits | Pass the value -1 for unlimited SMS in ENTv2 only
     *
     * @return $this
     */
    public function setSms(?float $sms): static
    {
        if (is_null($sms)) {
            throw new InvalidArgumentException('non-nullable sms cannot be null');
        }
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets wpSubscribers
     *
     * @return int|null
     */
    public function getWpSubscribers(): ?int
    {
        return $this->container['wpSubscribers'];
    }

    /**
     * Sets wpSubscribers
     *
     * @param int|null $wpSubscribers Number of Push credits, possible value is 0 and -1 | available in ENT-v2 only
     *
     * @return $this
     */
    public function setWpSubscribers(?int $wpSubscribers): static
    {
        if (is_null($wpSubscribers)) {
            throw new InvalidArgumentException('non-nullable wpSubscribers cannot be null');
        }
        $this->container['wpSubscribers'] = $wpSubscribers;

        return $this;
    }

    /**
     * Gets externalFeeds
     *
     * @return float|null
     */
    public function getExternalFeeds(): ?float
    {
        return $this->container['externalFeeds'];
    }

    /**
     * Sets externalFeeds
     *
     * @param float|null $externalFeeds Number of externalFeeds credits, possible values are 0 or 1 |available in ENTv2 only
     *
     * @return $this
     */
    public function setExternalFeeds(?float $externalFeeds): static
    {
        if (is_null($externalFeeds)) {
            throw new InvalidArgumentException('non-nullable externalFeeds cannot be null');
        }
        $this->container['externalFeeds'] = $externalFeeds;

        return $this;
    }

    /**
     * Gets whatsapp
     *
     * @return float|null
     */
    public function getWhatsapp(): ?float
    {
        return $this->container['whatsapp'];
    }

    /**
     * Sets whatsapp
     *
     * @param float|null $whatsapp Number of whatsapp credits | Pass the value -1 for unlimited whatsapp in ENTv2 only
     *
     * @return $this
     */
    public function setWhatsapp(?float $whatsapp): static
    {
        if (is_null($whatsapp)) {
            throw new InvalidArgumentException('non-nullable whatsapp cannot be null');
        }
        $this->container['whatsapp'] = $whatsapp;

        return $this;
    }
}


