<?php
/**
 * ConversationsMessage
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * ConversationsMessage Class Doc Comment
 *
 * @description a Conversations message
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ConversationsMessage extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ConversationsMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'text' => 'string',
        'visitorId' => 'string',
        'agentId' => 'string',
        'agentName' => 'string',
        'createdAt' => 'int',
        'isPushed' => 'bool',
        'receivedFrom' => 'string',
        'file' => '\Brevo\Client\Models\ConversationsMessageFile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'type' => null,
        'text' => null,
        'visitorId' => null,
        'agentId' => null,
        'agentName' => null,
        'createdAt' => 'int64',
        'isPushed' => null,
        'receivedFrom' => null,
        'file' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'text' => false,
        'visitorId' => false,
        'agentId' => false,
        'agentName' => false,
        'createdAt' => false,
        'isPushed' => false,
        'receivedFrom' => false,
        'file' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'text' => 'text',
        'visitorId' => 'visitorId',
        'agentId' => 'agentId',
        'agentName' => 'agentName',
        'createdAt' => 'createdAt',
        'isPushed' => 'isPushed',
        'receivedFrom' => 'receivedFrom',
        'file' => 'file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'text' => 'setText',
        'visitorId' => 'setVisitorId',
        'agentId' => 'setAgentId',
        'agentName' => 'setAgentName',
        'createdAt' => 'setCreatedAt',
        'isPushed' => 'setIsPushed',
        'receivedFrom' => 'setReceivedFrom',
        'file' => 'setFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'text' => 'getText',
        'visitorId' => 'getVisitorId',
        'agentId' => 'getAgentId',
        'agentName' => 'getAgentName',
        'createdAt' => 'getCreatedAt',
        'isPushed' => 'getIsPushed',
        'receivedFrom' => 'getReceivedFrom',
        'file' => 'getFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const TYPE_AGENT = 'agent';
    public const TYPE_VISITOR = 'visitor';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AGENT,
            self::TYPE_VISITOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('visitorId', $data ?? [], null);
        $this->setIfExists('agentId', $data ?? [], null);
        $this->setIfExists('agentName', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('isPushed', $data ?? [], null);
        $this->setIfExists('receivedFrom', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['createdAt']) && ($this->container['createdAt'] < 0)) {
            $invalidProperties[] = "invalid value for 'createdAt', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Message ID. It can be used for further manipulations with the message.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type `\"agent\"` for agents’ messages, `\"visitor\"` for visitors’ messages.
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText(): ?string
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Message text or name of the attached file
     *
     * @return $this
     */
    public function setText(?string $text): static
    {
        if (is_null($text)) {
            throw new InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets visitorId
     *
     * @return string|null
     */
    public function getVisitorId(): ?string
    {
        return $this->container['visitorId'];
    }

    /**
     * Sets visitorId
     *
     * @param string|null $visitorId visitor’s ID
     *
     * @return $this
     */
    public function setVisitorId(?string $visitorId): static
    {
        if (is_null($visitorId)) {
            throw new InvalidArgumentException('non-nullable visitorId cannot be null');
        }
        $this->container['visitorId'] = $visitorId;

        return $this;
    }

    /**
     * Gets agentId
     *
     * @return string|null
     */
    public function getAgentId(): ?string
    {
        return $this->container['agentId'];
    }

    /**
     * Sets agentId
     *
     * @param string|null $agentId ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
     *
     * @return $this
     */
    public function setAgentId(?string $agentId): static
    {
        if (is_null($agentId)) {
            throw new InvalidArgumentException('non-nullable agentId cannot be null');
        }
        $this->container['agentId'] = $agentId;

        return $this;
    }

    /**
     * Gets agentName
     *
     * @return string|null
     */
    public function getAgentName(): ?string
    {
        return $this->container['agentName'];
    }

    /**
     * Sets agentName
     *
     * @param string|null $agentName Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
     *
     * @return $this
     */
    public function setAgentName(?string $agentName): static
    {
        if (is_null($agentName)) {
            throw new InvalidArgumentException('non-nullable agentName cannot be null');
        }
        $this->container['agentName'] = $agentName;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return int|null
     */
    public function getCreatedAt(): ?int
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param int|null $createdAt Timestamp in milliseconds.
     *
     * @return $this
     */
    public function setCreatedAt(?int $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }

        if (($createdAt < 0)) {
            throw new InvalidArgumentException('invalid value for $createdAt when calling ConversationsMessage., must be bigger than or equal to 0.');
        }

        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets isPushed
     *
     * @return bool|null
     */
    public function getIsPushed(): ?bool
    {
        return $this->container['isPushed'];
    }

    /**
     * Sets isPushed
     *
     * @param bool|null $isPushed `true` for pushed messages
     *
     * @return $this
     */
    public function setIsPushed(?bool $isPushed): static
    {
        if (is_null($isPushed)) {
            throw new InvalidArgumentException('non-nullable isPushed cannot be null');
        }
        $this->container['isPushed'] = $isPushed;

        return $this;
    }

    /**
     * Gets receivedFrom
     *
     * @return string|null
     */
    public function getReceivedFrom(): ?string
    {
        return $this->container['receivedFrom'];
    }

    /**
     * Sets receivedFrom
     *
     * @param string|null $receivedFrom In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
     *
     * @return $this
     */
    public function setReceivedFrom(?string $receivedFrom): static
    {
        if (is_null($receivedFrom)) {
            throw new InvalidArgumentException('non-nullable receivedFrom cannot be null');
        }
        $this->container['receivedFrom'] = $receivedFrom;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \Brevo\Client\Models\ConversationsMessageFile|null
     */
    public function getFile(): ?\Brevo\Client\Models\ConversationsMessageFile
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \Brevo\Client\Models\ConversationsMessageFile|null $file file
     *
     * @return $this
     */
    public function setFile(?\Brevo\Client\Models\ConversationsMessageFile $file): static
    {
        if (is_null($file)) {
            throw new InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }
}


