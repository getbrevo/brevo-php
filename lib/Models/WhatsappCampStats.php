<?php
/**
 * WhatsappCampStats
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * WhatsappCampStats Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class WhatsappCampStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WhatsappCampStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'sent' => 'int',
        'delivered' => 'int',
        'read' => 'int',
        'unsubscribe' => 'int',
        'notSent' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'sent' => null,
        'delivered' => null,
        'read' => null,
        'unsubscribe' => null,
        'notSent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'sent' => false,
        'delivered' => false,
        'read' => false,
        'unsubscribe' => false,
        'notSent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'sent' => 'sent',
        'delivered' => 'delivered',
        'read' => 'read',
        'unsubscribe' => 'unsubscribe',
        'notSent' => 'notSent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'sent' => 'setSent',
        'delivered' => 'setDelivered',
        'read' => 'setRead',
        'unsubscribe' => 'setUnsubscribe',
        'notSent' => 'setNotSent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'sent' => 'getSent',
        'delivered' => 'getDelivered',
        'read' => 'getRead',
        'unsubscribe' => 'getUnsubscribe',
        'notSent' => 'getNotSent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('delivered', $data ?? [], null);
        $this->setIfExists('read', $data ?? [], null);
        $this->setIfExists('unsubscribe', $data ?? [], null);
        $this->setIfExists('notSent', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['sent'] === null) {
            $invalidProperties[] = "'sent' can't be null";
        }
        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['read'] === null) {
            $invalidProperties[] = "'read' can't be null";
        }
        if ($this->container['unsubscribe'] === null) {
            $invalidProperties[] = "'unsubscribe' can't be null";
        }
        if ($this->container['notSent'] === null) {
            $invalidProperties[] = "'notSent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets sent
     *
     * @return int
     */
    public function getSent(): int
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param int $sent sent
     *
     * @return $this
     */
    public function setSent(int $sent): static
    {
        if (is_null($sent)) {
            throw new InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int
     */
    public function getDelivered(): int
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int $delivered delivered
     *
     * @return $this
     */
    public function setDelivered(int $delivered): static
    {
        if (is_null($delivered)) {
            throw new InvalidArgumentException('non-nullable delivered cannot be null');
        }
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets read
     *
     * @return int
     */
    public function getRead(): int
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param int $read read
     *
     * @return $this
     */
    public function setRead(int $read): static
    {
        if (is_null($read)) {
            throw new InvalidArgumentException('non-nullable read cannot be null');
        }
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets unsubscribe
     *
     * @return int
     */
    public function getUnsubscribe(): int
    {
        return $this->container['unsubscribe'];
    }

    /**
     * Sets unsubscribe
     *
     * @param int $unsubscribe unsubscribe
     *
     * @return $this
     */
    public function setUnsubscribe(int $unsubscribe): static
    {
        if (is_null($unsubscribe)) {
            throw new InvalidArgumentException('non-nullable unsubscribe cannot be null');
        }
        $this->container['unsubscribe'] = $unsubscribe;

        return $this;
    }

    /**
     * Gets notSent
     *
     * @return int
     */
    public function getNotSent(): int
    {
        return $this->container['notSent'];
    }

    /**
     * Sets notSent
     *
     * @param int $notSent notSent
     *
     * @return $this
     */
    public function setNotSent(int $notSent): static
    {
        if (is_null($notSent)) {
            throw new InvalidArgumentException('non-nullable notSent cannot be null');
        }
        $this->container['notSent'] = $notSent;

        return $this;
    }
}


