<?php
/**
 * CreateOrderPayload
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CreateOrderPayload Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateOrderPayload extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'createOrderPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'amount' => 'float',
        'dueAt' => 'string',
        'contactId' => 'float',
        'balanceDefinitionId' => 'string',
        'expiresAt' => 'string',
        'meta' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'amount' => null,
        'dueAt' => null,
        'contactId' => null,
        'balanceDefinitionId' => 'uuid',
        'expiresAt' => null,
        'meta' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'dueAt' => false,
        'contactId' => false,
        'balanceDefinitionId' => false,
        'expiresAt' => false,
        'meta' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'amount' => 'amount',
        'dueAt' => 'dueAt',
        'contactId' => 'contactId',
        'balanceDefinitionId' => 'balanceDefinitionId',
        'expiresAt' => 'expiresAt',
        'meta' => 'meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'amount' => 'setAmount',
        'dueAt' => 'setDueAt',
        'contactId' => 'setContactId',
        'balanceDefinitionId' => 'setBalanceDefinitionId',
        'expiresAt' => 'setExpiresAt',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'amount' => 'getAmount',
        'dueAt' => 'getDueAt',
        'contactId' => 'getContactId',
        'balanceDefinitionId' => 'getBalanceDefinitionId',
        'expiresAt' => 'getExpiresAt',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('dueAt', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('balanceDefinitionId', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['dueAt'] === null) {
            $invalidProperties[] = "'dueAt' can't be null";
        }
        if ($this->container['contactId'] === null) {
            $invalidProperties[] = "'contactId' can't be null";
        }
        if ($this->container['balanceDefinitionId'] === null) {
            $invalidProperties[] = "'balanceDefinitionId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount(): float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of the order
     *
     * @return $this
     */
    public function setAmount(float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets dueAt
     *
     * @return string
     */
    public function getDueAt(): string
    {
        return $this->container['dueAt'];
    }

    /**
     * Sets dueAt
     *
     * @param string $dueAt Date and time at which the order needs to be processed
     *
     * @return $this
     */
    public function setDueAt(string $dueAt): static
    {
        if (is_null($dueAt)) {
            throw new InvalidArgumentException('non-nullable dueAt cannot be null');
        }
        $this->container['dueAt'] = $dueAt;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return float
     */
    public function getContactId(): float
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param float $contactId Contact id
     *
     * @return $this
     */
    public function setContactId(float $contactId): static
    {
        if (is_null($contactId)) {
            throw new InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets balanceDefinitionId
     *
     * @return string
     */
    public function getBalanceDefinitionId(): string
    {
        return $this->container['balanceDefinitionId'];
    }

    /**
     * Sets balanceDefinitionId
     *
     * @param string $balanceDefinitionId Balance definition id
     *
     * @return $this
     */
    public function setBalanceDefinitionId(string $balanceDefinitionId): static
    {
        if (is_null($balanceDefinitionId)) {
            throw new InvalidArgumentException('non-nullable balanceDefinitionId cannot be null');
        }
        $this->container['balanceDefinitionId'] = $balanceDefinitionId;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return string|null
     */
    public function getExpiresAt(): ?string
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param string|null $expiresAt Add expiration to the balance credited by the order
     *
     * @return $this
     */
    public function setExpiresAt(?string $expiresAt): static
    {
        if (is_null($expiresAt)) {
            throw new InvalidArgumentException('non-nullable expiresAt cannot be null');
        }
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object|null
     */
    public function getMeta(): ?object
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object|null $meta Additional metadata related to the order.
     *
     * @return $this
     */
    public function setMeta(?object $meta): static
    {
        if (is_null($meta)) {
            throw new InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }
}


