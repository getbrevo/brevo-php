<?php
/**
 * GetCorporateUserPermissionFeatureAccess
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetCorporateUserPermissionFeatureAccess Class Doc Comment
 *
 * @description Granular feature permissions given to the user.
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCorporateUserPermissionFeatureAccess extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getCorporateUserPermission_feature_access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'apiKeys' => 'string[]',
        'myPlan' => 'string[]',
        'userManagement' => 'string[]',
        'appsManagement' => 'string[]',
        'subOrganizationGroups' => 'string[]',
        'createSubOrganizations' => 'string[]',
        'manageSubOrganizations' => 'string[]',
        'analytics' => 'string[]',
        'security' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'apiKeys' => null,
        'myPlan' => null,
        'userManagement' => null,
        'appsManagement' => null,
        'subOrganizationGroups' => null,
        'createSubOrganizations' => null,
        'manageSubOrganizations' => null,
        'analytics' => null,
        'security' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'apiKeys' => false,
        'myPlan' => false,
        'userManagement' => false,
        'appsManagement' => false,
        'subOrganizationGroups' => false,
        'createSubOrganizations' => false,
        'manageSubOrganizations' => false,
        'analytics' => false,
        'security' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'apiKeys' => 'api_keys',
        'myPlan' => 'my_plan',
        'userManagement' => 'user_management',
        'appsManagement' => 'apps_management',
        'subOrganizationGroups' => 'sub_organization_groups',
        'createSubOrganizations' => 'create_sub_organizations',
        'manageSubOrganizations' => 'manage_sub_organizations',
        'analytics' => 'analytics',
        'security' => 'security'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'apiKeys' => 'setApiKeys',
        'myPlan' => 'setMyPlan',
        'userManagement' => 'setUserManagement',
        'appsManagement' => 'setAppsManagement',
        'subOrganizationGroups' => 'setSubOrganizationGroups',
        'createSubOrganizations' => 'setCreateSubOrganizations',
        'manageSubOrganizations' => 'setManageSubOrganizations',
        'analytics' => 'setAnalytics',
        'security' => 'setSecurity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'apiKeys' => 'getApiKeys',
        'myPlan' => 'getMyPlan',
        'userManagement' => 'getUserManagement',
        'appsManagement' => 'getAppsManagement',
        'subOrganizationGroups' => 'getSubOrganizationGroups',
        'createSubOrganizations' => 'getCreateSubOrganizations',
        'manageSubOrganizations' => 'getManageSubOrganizations',
        'analytics' => 'getAnalytics',
        'security' => 'getSecurity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('apiKeys', $data ?? [], null);
        $this->setIfExists('myPlan', $data ?? [], null);
        $this->setIfExists('userManagement', $data ?? [], null);
        $this->setIfExists('appsManagement', $data ?? [], null);
        $this->setIfExists('subOrganizationGroups', $data ?? [], null);
        $this->setIfExists('createSubOrganizations', $data ?? [], null);
        $this->setIfExists('manageSubOrganizations', $data ?? [], null);
        $this->setIfExists('analytics', $data ?? [], null);
        $this->setIfExists('security', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets apiKeys
     *
     * @return string[]|null
     */
    public function getApiKeys(): ?array
    {
        return $this->container['apiKeys'];
    }

    /**
     * Sets apiKeys
     *
     * @param string[]|null $apiKeys Permission on api keys
     *
     * @return $this
     */
    public function setApiKeys(?array $apiKeys): static
    {
        if (is_null($apiKeys)) {
            throw new InvalidArgumentException('non-nullable apiKeys cannot be null');
        }
        $this->container['apiKeys'] = $apiKeys;

        return $this;
    }

    /**
     * Gets myPlan
     *
     * @return string[]|null
     */
    public function getMyPlan(): ?array
    {
        return $this->container['myPlan'];
    }

    /**
     * Sets myPlan
     *
     * @param string[]|null $myPlan Permission on my plan
     *
     * @return $this
     */
    public function setMyPlan(?array $myPlan): static
    {
        if (is_null($myPlan)) {
            throw new InvalidArgumentException('non-nullable myPlan cannot be null');
        }
        $this->container['myPlan'] = $myPlan;

        return $this;
    }

    /**
     * Gets userManagement
     *
     * @return string[]|null
     */
    public function getUserManagement(): ?array
    {
        return $this->container['userManagement'];
    }

    /**
     * Sets userManagement
     *
     * @param string[]|null $userManagement Permission on user management
     *
     * @return $this
     */
    public function setUserManagement(?array $userManagement): static
    {
        if (is_null($userManagement)) {
            throw new InvalidArgumentException('non-nullable userManagement cannot be null');
        }
        $this->container['userManagement'] = $userManagement;

        return $this;
    }

    /**
     * Gets appsManagement
     *
     * @return string[]|null
     */
    public function getAppsManagement(): ?array
    {
        return $this->container['appsManagement'];
    }

    /**
     * Sets appsManagement
     *
     * @param string[]|null $appsManagement Permission on apps management
     *
     * @return $this
     */
    public function setAppsManagement(?array $appsManagement): static
    {
        if (is_null($appsManagement)) {
            throw new InvalidArgumentException('non-nullable appsManagement cannot be null');
        }
        $this->container['appsManagement'] = $appsManagement;

        return $this;
    }

    /**
     * Gets subOrganizationGroups
     *
     * @return string[]|null
     */
    public function getSubOrganizationGroups(): ?array
    {
        return $this->container['subOrganizationGroups'];
    }

    /**
     * Sets subOrganizationGroups
     *
     * @param string[]|null $subOrganizationGroups Permission on groups
     *
     * @return $this
     */
    public function setSubOrganizationGroups(?array $subOrganizationGroups): static
    {
        if (is_null($subOrganizationGroups)) {
            throw new InvalidArgumentException('non-nullable subOrganizationGroups cannot be null');
        }
        $this->container['subOrganizationGroups'] = $subOrganizationGroups;

        return $this;
    }

    /**
     * Gets createSubOrganizations
     *
     * @return string[]|null
     */
    public function getCreateSubOrganizations(): ?array
    {
        return $this->container['createSubOrganizations'];
    }

    /**
     * Sets createSubOrganizations
     *
     * @param string[]|null $createSubOrganizations Permission on create sub-accounts
     *
     * @return $this
     */
    public function setCreateSubOrganizations(?array $createSubOrganizations): static
    {
        if (is_null($createSubOrganizations)) {
            throw new InvalidArgumentException('non-nullable createSubOrganizations cannot be null');
        }
        $this->container['createSubOrganizations'] = $createSubOrganizations;

        return $this;
    }

    /**
     * Gets manageSubOrganizations
     *
     * @return string[]|null
     */
    public function getManageSubOrganizations(): ?array
    {
        return $this->container['manageSubOrganizations'];
    }

    /**
     * Sets manageSubOrganizations
     *
     * @param string[]|null $manageSubOrganizations Permission on manage sub-accounts
     *
     * @return $this
     */
    public function setManageSubOrganizations(?array $manageSubOrganizations): static
    {
        if (is_null($manageSubOrganizations)) {
            throw new InvalidArgumentException('non-nullable manageSubOrganizations cannot be null');
        }
        $this->container['manageSubOrganizations'] = $manageSubOrganizations;

        return $this;
    }

    /**
     * Gets analytics
     *
     * @return string[]|null
     */
    public function getAnalytics(): ?array
    {
        return $this->container['analytics'];
    }

    /**
     * Sets analytics
     *
     * @param string[]|null $analytics Permission on analytics
     *
     * @return $this
     */
    public function setAnalytics(?array $analytics): static
    {
        if (is_null($analytics)) {
            throw new InvalidArgumentException('non-nullable analytics cannot be null');
        }
        $this->container['analytics'] = $analytics;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string[]|null
     */
    public function getSecurity(): ?array
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string[]|null $security Permission on security
     *
     * @return $this
     */
    public function setSecurity(?array $security): static
    {
        if (is_null($security)) {
            throw new InvalidArgumentException('non-nullable security cannot be null');
        }
        $this->container['security'] = $security;

        return $this;
    }
}


