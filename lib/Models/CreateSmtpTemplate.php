<?php
/**
 * CreateSmtpTemplate
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * CreateSmtpTemplate Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreateSmtpTemplate extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'createSmtpTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'sender' => '\Brevo\Client\Models\CreateSmtpTemplateSender',
        'templateName' => 'string',
        'subject' => 'string',
        'tag' => 'string',
        'htmlContent' => 'string',
        'htmlUrl' => 'string',
        'replyTo' => 'string',
        'toField' => 'string',
        'attachmentUrl' => 'string',
        'isActive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'sender' => null,
        'templateName' => null,
        'subject' => null,
        'tag' => null,
        'htmlContent' => null,
        'htmlUrl' => 'url',
        'replyTo' => 'email',
        'toField' => null,
        'attachmentUrl' => 'url',
        'isActive' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'sender' => false,
        'templateName' => false,
        'subject' => false,
        'tag' => false,
        'htmlContent' => false,
        'htmlUrl' => false,
        'replyTo' => false,
        'toField' => false,
        'attachmentUrl' => false,
        'isActive' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'sender' => 'sender',
        'templateName' => 'templateName',
        'subject' => 'subject',
        'tag' => 'tag',
        'htmlContent' => 'htmlContent',
        'htmlUrl' => 'htmlUrl',
        'replyTo' => 'replyTo',
        'toField' => 'toField',
        'attachmentUrl' => 'attachmentUrl',
        'isActive' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'sender' => 'setSender',
        'templateName' => 'setTemplateName',
        'subject' => 'setSubject',
        'tag' => 'setTag',
        'htmlContent' => 'setHtmlContent',
        'htmlUrl' => 'setHtmlUrl',
        'replyTo' => 'setReplyTo',
        'toField' => 'setToField',
        'attachmentUrl' => 'setAttachmentUrl',
        'isActive' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'sender' => 'getSender',
        'templateName' => 'getTemplateName',
        'subject' => 'getSubject',
        'tag' => 'getTag',
        'htmlContent' => 'getHtmlContent',
        'htmlUrl' => 'getHtmlUrl',
        'replyTo' => 'getReplyTo',
        'toField' => 'getToField',
        'attachmentUrl' => 'getAttachmentUrl',
        'isActive' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('templateName', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('htmlContent', $data ?? [], null);
        $this->setIfExists('htmlUrl', $data ?? [], null);
        $this->setIfExists('replyTo', $data ?? [], null);
        $this->setIfExists('toField', $data ?? [], null);
        $this->setIfExists('attachmentUrl', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['templateName'] === null) {
            $invalidProperties[] = "'templateName' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets sender
     *
     * @return \Brevo\Client\Models\CreateSmtpTemplateSender
     */
    public function getSender(): \Brevo\Client\Models\CreateSmtpTemplateSender
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Brevo\Client\Models\CreateSmtpTemplateSender $sender sender
     *
     * @return $this
     */
    public function setSender(\Brevo\Client\Models\CreateSmtpTemplateSender $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets templateName
     *
     * @return string
     */
    public function getTemplateName(): string
    {
        return $this->container['templateName'];
    }

    /**
     * Sets templateName
     *
     * @param string $templateName Name of the template
     *
     * @return $this
     */
    public function setTemplateName(string $templateName): static
    {
        if (is_null($templateName)) {
            throw new InvalidArgumentException('non-nullable templateName cannot be null');
        }
        $this->container['templateName'] = $templateName;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject(): string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the template
     *
     * @return $this
     */
    public function setSubject(string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag(): ?string
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Tag of the template
     *
     * @return $this
     */
    public function setTag(?string $tag): static
    {
        if (is_null($tag)) {
            throw new InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets htmlContent
     *
     * @return string|null
     */
    public function getHtmlContent(): ?string
    {
        return $this->container['htmlContent'];
    }

    /**
     * Sets htmlContent
     *
     * @param string|null $htmlContent Body of the message (HTML version). The field must have more than 10 characters. **REQUIRED if htmlUrl is empty**
     *
     * @return $this
     */
    public function setHtmlContent(?string $htmlContent): static
    {
        if (is_null($htmlContent)) {
            throw new InvalidArgumentException('non-nullable htmlContent cannot be null');
        }
        $this->container['htmlContent'] = $htmlContent;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string|null
     */
    public function getHtmlUrl(): ?string
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string|null $htmlUrl Url which contents the body of the email message. REQUIRED if htmlContent is empty
     *
     * @return $this
     */
    public function setHtmlUrl(?string $htmlUrl): static
    {
        if (is_null($htmlUrl)) {
            throw new InvalidArgumentException('non-nullable htmlUrl cannot be null');
        }
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets replyTo
     *
     * @return string|null
     */
    public function getReplyTo(): ?string
    {
        return $this->container['replyTo'];
    }

    /**
     * Sets replyTo
     *
     * @param string|null $replyTo Email on which campaign recipients will be able to reply to
     *
     * @return $this
     */
    public function setReplyTo(?string $replyTo): static
    {
        if (is_null($replyTo)) {
            throw new InvalidArgumentException('non-nullable replyTo cannot be null');
        }
        $this->container['replyTo'] = $replyTo;

        return $this;
    }

    /**
     * Gets toField
     *
     * @return string|null
     */
    public function getToField(): ?string
    {
        return $this->container['toField'];
    }

    /**
     * Sets toField
     *
     * @param string|null $toField To personalize the **To** Field. If you want to include the first name and last name of your recipient, add **{FNAME} {LNAME}**. These contact attributes must already exist in your Brevo account. If input parameter **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
     *
     * @return $this
     */
    public function setToField(?string $toField): static
    {
        if (is_null($toField)) {
            throw new InvalidArgumentException('non-nullable toField cannot be null');
        }
        $this->container['toField'] = $toField;

        return $this;
    }

    /**
     * Gets attachmentUrl
     *
     * @return string|null
     */
    public function getAttachmentUrl(): ?string
    {
        return $this->container['attachmentUrl'];
    }

    /**
     * Sets attachmentUrl
     *
     * @param string|null $attachmentUrl Absolute url of the attachment (**no local file**). Extension allowed: #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps'
     *
     * @return $this
     */
    public function setAttachmentUrl(?string $attachmentUrl): static
    {
        if (is_null($attachmentUrl)) {
            throw new InvalidArgumentException('non-nullable attachmentUrl cannot be null');
        }
        $this->container['attachmentUrl'] = $attachmentUrl;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive Status of template. isActive = true means template is active and isActive = false means template is inactive
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }
}


