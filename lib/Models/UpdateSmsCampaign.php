<?php
/**
 * UpdateSmsCampaign
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * UpdateSmsCampaign Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UpdateSmsCampaign extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'updateSmsCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'sender' => 'string',
        'content' => 'string',
        'recipients' => '\Brevo\Client\Models\CreateSmsCampaignRecipients',
        'scheduledAt' => 'string',
        'unicodeEnabled' => 'bool',
        'organisationPrefix' => 'string',
        'unsubscribeInstruction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'sender' => null,
        'content' => null,
        'recipients' => null,
        'scheduledAt' => null,
        'unicodeEnabled' => null,
        'organisationPrefix' => null,
        'unsubscribeInstruction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'sender' => false,
        'content' => false,
        'recipients' => false,
        'scheduledAt' => false,
        'unicodeEnabled' => false,
        'organisationPrefix' => false,
        'unsubscribeInstruction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'sender' => 'sender',
        'content' => 'content',
        'recipients' => 'recipients',
        'scheduledAt' => 'scheduledAt',
        'unicodeEnabled' => 'unicodeEnabled',
        'organisationPrefix' => 'organisationPrefix',
        'unsubscribeInstruction' => 'unsubscribeInstruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'sender' => 'setSender',
        'content' => 'setContent',
        'recipients' => 'setRecipients',
        'scheduledAt' => 'setScheduledAt',
        'unicodeEnabled' => 'setUnicodeEnabled',
        'organisationPrefix' => 'setOrganisationPrefix',
        'unsubscribeInstruction' => 'setUnsubscribeInstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'sender' => 'getSender',
        'content' => 'getContent',
        'recipients' => 'getRecipients',
        'scheduledAt' => 'getScheduledAt',
        'unicodeEnabled' => 'getUnicodeEnabled',
        'organisationPrefix' => 'getOrganisationPrefix',
        'unsubscribeInstruction' => 'getUnsubscribeInstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('scheduledAt', $data ?? [], null);
        $this->setIfExists('unicodeEnabled', $data ?? [], false);
        $this->setIfExists('organisationPrefix', $data ?? [], null);
        $this->setIfExists('unsubscribeInstruction', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['sender']) && (mb_strlen($this->container['sender']) > 15)) {
            $invalidProperties[] = "invalid value for 'sender', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the campaign
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender(): ?string
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
     *
     * @return $this
     */
    public function setSender(?string $sender): static
    {
        if (is_null($sender)) {
            throw new InvalidArgumentException('non-nullable sender cannot be null');
        }
        if ((mb_strlen($sender) > 15)) {
            throw new InvalidArgumentException('invalid length for $sender when calling UpdateSmsCampaign., must be smaller than or equal to 15.');
        }

        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent(): ?string
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Content of the message. The **maximum characters used per SMS is 160**, if used more than that, it will be counted as more than one SMS
     *
     * @return $this
     */
    public function setContent(?string $content): static
    {
        if (is_null($content)) {
            throw new InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \Brevo\Client\Models\CreateSmsCampaignRecipients|null
     */
    public function getRecipients(): ?\Brevo\Client\Models\CreateSmsCampaignRecipients
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \Brevo\Client\Models\CreateSmsCampaignRecipients|null $recipients recipients
     *
     * @return $this
     */
    public function setRecipients(?\Brevo\Client\Models\CreateSmsCampaignRecipients $recipients): static
    {
        if (is_null($recipients)) {
            throw new InvalidArgumentException('non-nullable recipients cannot be null');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets scheduledAt
     *
     * @return string|null
     */
    public function getScheduledAt(): ?string
    {
        return $this->container['scheduledAt'];
    }

    /**
     * Sets scheduledAt
     *
     * @param string|null $scheduledAt UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
     *
     * @return $this
     */
    public function setScheduledAt(?string $scheduledAt): static
    {
        if (is_null($scheduledAt)) {
            throw new InvalidArgumentException('non-nullable scheduledAt cannot be null');
        }
        $this->container['scheduledAt'] = $scheduledAt;

        return $this;
    }

    /**
     * Gets unicodeEnabled
     *
     * @return bool|null
     */
    public function getUnicodeEnabled(): ?bool
    {
        return $this->container['unicodeEnabled'];
    }

    /**
     * Sets unicodeEnabled
     *
     * @param bool|null $unicodeEnabled Format of the message. It indicates whether the content should be treated as unicode or not.
     *
     * @return $this
     */
    public function setUnicodeEnabled(?bool $unicodeEnabled): static
    {
        if (is_null($unicodeEnabled)) {
            throw new InvalidArgumentException('non-nullable unicodeEnabled cannot be null');
        }
        $this->container['unicodeEnabled'] = $unicodeEnabled;

        return $this;
    }

    /**
     * Gets organisationPrefix
     *
     * @return string|null
     */
    public function getOrganisationPrefix(): ?string
    {
        return $this->container['organisationPrefix'];
    }

    /**
     * Sets organisationPrefix
     *
     * @param string|null $organisationPrefix A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.**
     *
     * @return $this
     */
    public function setOrganisationPrefix(?string $organisationPrefix): static
    {
        if (is_null($organisationPrefix)) {
            throw new InvalidArgumentException('non-nullable organisationPrefix cannot be null');
        }
        $this->container['organisationPrefix'] = $organisationPrefix;

        return $this;
    }

    /**
     * Gets unsubscribeInstruction
     *
     * @return string|null
     */
    public function getUnsubscribeInstruction(): ?string
    {
        return $this->container['unsubscribeInstruction'];
    }

    /**
     * Sets unsubscribeInstruction
     *
     * @param string|null $unsubscribeInstruction Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.**
     *
     * @return $this
     */
    public function setUnsubscribeInstruction(?string $unsubscribeInstruction): static
    {
        if (is_null($unsubscribeInstruction)) {
            throw new InvalidArgumentException('non-nullable unsubscribeInstruction cannot be null');
        }
        $this->container['unsubscribeInstruction'] = $unsubscribeInstruction;

        return $this;
    }
}


