<?php
/**
 * TierGroup
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * TierGroup Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TierGroup extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'tierGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'tierOrder' => 'string[]',
        'loyaltyProgramId' => 'string',
        'upgradeStrategy' => 'string',
        'downgradeStrategy' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'tierOrder' => 'uuid',
        'loyaltyProgramId' => 'uuid',
        'upgradeStrategy' => null,
        'downgradeStrategy' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'tierOrder' => false,
        'loyaltyProgramId' => false,
        'upgradeStrategy' => false,
        'downgradeStrategy' => false,
        'createdAt' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'tierOrder' => 'tierOrder',
        'loyaltyProgramId' => 'loyaltyProgramId',
        'upgradeStrategy' => 'upgradeStrategy',
        'downgradeStrategy' => 'downgradeStrategy',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'tierOrder' => 'setTierOrder',
        'loyaltyProgramId' => 'setLoyaltyProgramId',
        'upgradeStrategy' => 'setUpgradeStrategy',
        'downgradeStrategy' => 'setDowngradeStrategy',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'tierOrder' => 'getTierOrder',
        'loyaltyProgramId' => 'getLoyaltyProgramId',
        'upgradeStrategy' => 'getUpgradeStrategy',
        'downgradeStrategy' => 'getDowngradeStrategy',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    public const UPGRADE_STRATEGY_REAL_TIME = 'real_time';
    public const UPGRADE_STRATEGY_ANNIVERSARY = 'anniversary';
    public const DOWNGRADE_STRATEGY_REAL_TIME = 'real_time';
    public const DOWNGRADE_STRATEGY_ANNIVERSARY = 'anniversary';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpgradeStrategyAllowableValues()
    {
        return [
            self::UPGRADE_STRATEGY_REAL_TIME,
            self::UPGRADE_STRATEGY_ANNIVERSARY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDowngradeStrategyAllowableValues()
    {
        return [
            self::DOWNGRADE_STRATEGY_REAL_TIME,
            self::DOWNGRADE_STRATEGY_ANNIVERSARY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tierOrder', $data ?? [], null);
        $this->setIfExists('loyaltyProgramId', $data ?? [], null);
        $this->setIfExists('upgradeStrategy', $data ?? [], 'real_time');
        $this->setIfExists('downgradeStrategy', $data ?? [], 'real_time');
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getUpgradeStrategyAllowableValues();
        if (!is_null($this->container['upgradeStrategy']) && !in_array($this->container['upgradeStrategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'upgradeStrategy', must be one of '%s'",
                $this->container['upgradeStrategy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDowngradeStrategyAllowableValues();
        if (!is_null($this->container['downgradeStrategy']) && !in_array($this->container['downgradeStrategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'downgradeStrategy', must be one of '%s'",
                $this->container['downgradeStrategy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Tier group unique identifier
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tier group name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tierOrder
     *
     * @return string[]|null
     */
    public function getTierOrder(): ?array
    {
        return $this->container['tierOrder'];
    }

    /**
     * Sets tierOrder
     *
     * @param string[]|null $tierOrder Order of the tiers in the group in ascending order
     *
     * @return $this
     */
    public function setTierOrder(?array $tierOrder): static
    {
        if (is_null($tierOrder)) {
            throw new InvalidArgumentException('non-nullable tierOrder cannot be null');
        }
        $this->container['tierOrder'] = $tierOrder;

        return $this;
    }

    /**
     * Gets loyaltyProgramId
     *
     * @return string|null
     */
    public function getLoyaltyProgramId(): ?string
    {
        return $this->container['loyaltyProgramId'];
    }

    /**
     * Sets loyaltyProgramId
     *
     * @param string|null $loyaltyProgramId Associated loyalty program Id
     *
     * @return $this
     */
    public function setLoyaltyProgramId(?string $loyaltyProgramId): static
    {
        if (is_null($loyaltyProgramId)) {
            throw new InvalidArgumentException('non-nullable loyaltyProgramId cannot be null');
        }
        $this->container['loyaltyProgramId'] = $loyaltyProgramId;

        return $this;
    }

    /**
     * Gets upgradeStrategy
     *
     * @return string|null
     */
    public function getUpgradeStrategy(): ?string
    {
        return $this->container['upgradeStrategy'];
    }

    /**
     * Sets upgradeStrategy
     *
     * @param string|null $upgradeStrategy Select real_time to upgrade tier on real time balance updates. Select anniversary to upgrade tier on subscription anniversary.
     *
     * @return $this
     */
    public function setUpgradeStrategy(?string $upgradeStrategy): static
    {
        if (is_null($upgradeStrategy)) {
            throw new InvalidArgumentException('non-nullable upgradeStrategy cannot be null');
        }
        $allowedValues = $this->getUpgradeStrategyAllowableValues();
        if (!in_array($upgradeStrategy, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'upgradeStrategy', must be one of '%s'",
                    $upgradeStrategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upgradeStrategy'] = $upgradeStrategy;

        return $this;
    }

    /**
     * Gets downgradeStrategy
     *
     * @return string|null
     */
    public function getDowngradeStrategy(): ?string
    {
        return $this->container['downgradeStrategy'];
    }

    /**
     * Sets downgradeStrategy
     *
     * @param string|null $downgradeStrategy Select real_time to downgrade tier on real time balance updates. Select anniversary to downgrade tier on subscription anniversary.
     *
     * @return $this
     */
    public function setDowngradeStrategy(?string $downgradeStrategy): static
    {
        if (is_null($downgradeStrategy)) {
            throw new InvalidArgumentException('non-nullable downgradeStrategy cannot be null');
        }
        $allowedValues = $this->getDowngradeStrategyAllowableValues();
        if (!in_array($downgradeStrategy, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'downgradeStrategy', must be one of '%s'",
                    $downgradeStrategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['downgradeStrategy'] = $downgradeStrategy;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt Timestamp when the tier group was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt Timestamp when the tier group was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
}


