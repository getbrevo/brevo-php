<?php
/**
 * GetTransacEmailContent
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetTransacEmailContent Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetTransacEmailContent extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getTransacEmailContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'email' => 'string',
        'subject' => 'string',
        'date' => 'string',
        'events' => '\Brevo\Client\Models\GetTransacEmailContentEventsInner[]',
        'body' => 'string',
        'attachmentCount' => 'int',
        'templateId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'email' => 'email',
        'subject' => null,
        'date' => null,
        'events' => null,
        'body' => null,
        'attachmentCount' => 'int64',
        'templateId' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'email' => false,
        'subject' => false,
        'date' => false,
        'events' => false,
        'body' => false,
        'attachmentCount' => false,
        'templateId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'email' => 'email',
        'subject' => 'subject',
        'date' => 'date',
        'events' => 'events',
        'body' => 'body',
        'attachmentCount' => 'attachmentCount',
        'templateId' => 'templateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'email' => 'setEmail',
        'subject' => 'setSubject',
        'date' => 'setDate',
        'events' => 'setEvents',
        'body' => 'setBody',
        'attachmentCount' => 'setAttachmentCount',
        'templateId' => 'setTemplateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'email' => 'getEmail',
        'subject' => 'getSubject',
        'date' => 'getDate',
        'events' => 'getEvents',
        'body' => 'getBody',
        'attachmentCount' => 'getAttachmentCount',
        'templateId' => 'getTemplateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('attachmentCount', $data ?? [], null);
        $this->setIfExists('templateId', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['attachmentCount'] === null) {
            $invalidProperties[] = "'attachmentCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail(): string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address to which transactional email has been sent
     *
     * @return $this
     */
    public function setEmail(string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject(): string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the sent email
     *
     * @return $this
     */
    public function setSubject(string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate(): string
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Date on which transactional email was sent
     *
     * @return $this
     */
    public function setDate(string $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Brevo\Client\Models\GetTransacEmailContentEventsInner[]
     */
    public function getEvents(): array
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Brevo\Client\Models\GetTransacEmailContentEventsInner[] $events Series of events which occurred on the transactional email
     *
     * @return $this
     */
    public function setEvents(array $events): static
    {
        if (is_null($events)) {
            throw new InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody(): string
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Actual content of the transactional email that has been sent
     *
     * @return $this
     */
    public function setBody(string $body): static
    {
        if (is_null($body)) {
            throw new InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets attachmentCount
     *
     * @return int
     */
    public function getAttachmentCount(): int
    {
        return $this->container['attachmentCount'];
    }

    /**
     * Sets attachmentCount
     *
     * @param int $attachmentCount Count of the attachments that were sent in the email
     *
     * @return $this
     */
    public function setAttachmentCount(int $attachmentCount): static
    {
        if (is_null($attachmentCount)) {
            throw new InvalidArgumentException('non-nullable attachmentCount cannot be null');
        }
        $this->container['attachmentCount'] = $attachmentCount;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int|null
     */
    public function getTemplateId(): ?int
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int|null $templateId Id of the template
     *
     * @return $this
     */
    public function setTemplateId(?int $templateId): static
    {
        if (is_null($templateId)) {
            throw new InvalidArgumentException('non-nullable templateId cannot be null');
        }
        $this->container['templateId'] = $templateId;

        return $this;
    }
}


