<?php
/**
 * GetExtendedCampaignStats
 *
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brevo\Client\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Brevo\Client\ObjectSerializer;

/**
 * GetExtendedCampaignStats Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetExtendedCampaignStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'getExtendedCampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'globalStats' => '\Brevo\Client\Models\GetCampaignStats',
        'campaignStats' => 'GetCampaignStats[]',
        'mirrorClick' => 'int',
        'remaining' => 'int',
        'linksStats' => 'object',
        'statsByDomain' => 'array<string,\Brevo\Client\Models\GetCampaignStats>',
        'statsByDevice' => '\Brevo\Client\Models\GetStatsByDevice',
        'statsByBrowser' => 'array<string,\Brevo\Client\Models\GetDeviceBrowserStats>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'globalStats' => null,
        'campaignStats' => null,
        'mirrorClick' => 'int64',
        'remaining' => 'int64',
        'linksStats' => null,
        'statsByDomain' => null,
        'statsByDevice' => null,
        'statsByBrowser' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'globalStats' => false,
        'campaignStats' => false,
        'mirrorClick' => false,
        'remaining' => false,
        'linksStats' => false,
        'statsByDomain' => false,
        'statsByDevice' => false,
        'statsByBrowser' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'globalStats' => 'globalStats',
        'campaignStats' => 'campaignStats',
        'mirrorClick' => 'mirrorClick',
        'remaining' => 'remaining',
        'linksStats' => 'linksStats',
        'statsByDomain' => 'statsByDomain',
        'statsByDevice' => 'statsByDevice',
        'statsByBrowser' => 'statsByBrowser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'globalStats' => 'setGlobalStats',
        'campaignStats' => 'setCampaignStats',
        'mirrorClick' => 'setMirrorClick',
        'remaining' => 'setRemaining',
        'linksStats' => 'setLinksStats',
        'statsByDomain' => 'setStatsByDomain',
        'statsByDevice' => 'setStatsByDevice',
        'statsByBrowser' => 'setStatsByBrowser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'globalStats' => 'getGlobalStats',
        'campaignStats' => 'getCampaignStats',
        'mirrorClick' => 'getMirrorClick',
        'remaining' => 'getRemaining',
        'linksStats' => 'getLinksStats',
        'statsByDomain' => 'getStatsByDomain',
        'statsByDevice' => 'getStatsByDevice',
        'statsByBrowser' => 'getStatsByBrowser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('globalStats', $data ?? [], null);
        $this->setIfExists('campaignStats', $data ?? [], null);
        $this->setIfExists('mirrorClick', $data ?? [], null);
        $this->setIfExists('remaining', $data ?? [], null);
        $this->setIfExists('linksStats', $data ?? [], null);
        $this->setIfExists('statsByDomain', $data ?? [], null);
        $this->setIfExists('statsByDevice', $data ?? [], null);
        $this->setIfExists('statsByBrowser', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['globalStats'] === null) {
            $invalidProperties[] = "'globalStats' can't be null";
        }
        if ($this->container['campaignStats'] === null) {
            $invalidProperties[] = "'campaignStats' can't be null";
        }
        if ($this->container['mirrorClick'] === null) {
            $invalidProperties[] = "'mirrorClick' can't be null";
        }
        if ($this->container['remaining'] === null) {
            $invalidProperties[] = "'remaining' can't be null";
        }
        if ($this->container['linksStats'] === null) {
            $invalidProperties[] = "'linksStats' can't be null";
        }
        if ($this->container['statsByDomain'] === null) {
            $invalidProperties[] = "'statsByDomain' can't be null";
        }
        if ($this->container['statsByDevice'] === null) {
            $invalidProperties[] = "'statsByDevice' can't be null";
        }
        if ($this->container['statsByBrowser'] === null) {
            $invalidProperties[] = "'statsByBrowser' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets globalStats
     *
     * @return \Brevo\Client\Models\GetCampaignStats
     */
    public function getGlobalStats(): \Brevo\Client\Models\GetCampaignStats
    {
        return $this->container['globalStats'];
    }

    /**
     * Sets globalStats
     *
     * @param \Brevo\Client\Models\GetCampaignStats $globalStats Overall statistics of the campaign
     *
     * @return $this
     */
    public function setGlobalStats(\Brevo\Client\Models\GetCampaignStats $globalStats): static
    {
        if (is_null($globalStats)) {
            throw new InvalidArgumentException('non-nullable globalStats cannot be null');
        }
        $this->container['globalStats'] = $globalStats;

        return $this;
    }

    /**
     * Gets campaignStats
     *
     * @return GetCampaignStats[]
     */
    public function getCampaignStats(): array
    {
        return $this->container['campaignStats'];
    }

    /**
     * Sets campaignStats
     *
     * @param GetCampaignStats[] $campaignStats List-wise statistics of the campaign.
     *
     * @return $this
     */
    public function setCampaignStats(array $campaignStats): static
    {
        if (is_null($campaignStats)) {
            throw new InvalidArgumentException('non-nullable campaignStats cannot be null');
        }
        $this->container['campaignStats'] = $campaignStats;

        return $this;
    }

    /**
     * Gets mirrorClick
     *
     * @return int
     */
    public function getMirrorClick(): int
    {
        return $this->container['mirrorClick'];
    }

    /**
     * Sets mirrorClick
     *
     * @param int $mirrorClick Number of clicks on mirror link
     *
     * @return $this
     */
    public function setMirrorClick(int $mirrorClick): static
    {
        if (is_null($mirrorClick)) {
            throw new InvalidArgumentException('non-nullable mirrorClick cannot be null');
        }
        $this->container['mirrorClick'] = $mirrorClick;

        return $this;
    }

    /**
     * Gets remaining
     *
     * @return int
     */
    public function getRemaining(): int
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     *
     * @param int $remaining Number of remaning emails to send
     *
     * @return $this
     */
    public function setRemaining(int $remaining): static
    {
        if (is_null($remaining)) {
            throw new InvalidArgumentException('non-nullable remaining cannot be null');
        }
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets linksStats
     *
     * @return object
     */
    public function getLinksStats(): object
    {
        return $this->container['linksStats'];
    }

    /**
     * Sets linksStats
     *
     * @param object $linksStats Statistics about the number of clicks for the links
     *
     * @return $this
     */
    public function setLinksStats(object $linksStats): static
    {
        if (is_null($linksStats)) {
            throw new InvalidArgumentException('non-nullable linksStats cannot be null');
        }
        $this->container['linksStats'] = $linksStats;

        return $this;
    }

    /**
     * Gets statsByDomain
     *
     * @return array<string,\Brevo\Client\Models\GetCampaignStats>
     */
    public function getStatsByDomain(): array
    {
        return $this->container['statsByDomain'];
    }

    /**
     * Sets statsByDomain
     *
     * @param array<string,\Brevo\Client\Models\GetCampaignStats> $statsByDomain statsByDomain
     *
     * @return $this
     */
    public function setStatsByDomain(array $statsByDomain): static
    {
        if (is_null($statsByDomain)) {
            throw new InvalidArgumentException('non-nullable statsByDomain cannot be null');
        }
        $this->container['statsByDomain'] = $statsByDomain;

        return $this;
    }

    /**
     * Gets statsByDevice
     *
     * @return \Brevo\Client\Models\GetStatsByDevice
     */
    public function getStatsByDevice(): \Brevo\Client\Models\GetStatsByDevice
    {
        return $this->container['statsByDevice'];
    }

    /**
     * Sets statsByDevice
     *
     * @param \Brevo\Client\Models\GetStatsByDevice $statsByDevice statsByDevice
     *
     * @return $this
     */
    public function setStatsByDevice(\Brevo\Client\Models\GetStatsByDevice $statsByDevice): static
    {
        if (is_null($statsByDevice)) {
            throw new InvalidArgumentException('non-nullable statsByDevice cannot be null');
        }
        $this->container['statsByDevice'] = $statsByDevice;

        return $this;
    }

    /**
     * Gets statsByBrowser
     *
     * @return array<string,\Brevo\Client\Models\GetDeviceBrowserStats>
     */
    public function getStatsByBrowser(): array
    {
        return $this->container['statsByBrowser'];
    }

    /**
     * Sets statsByBrowser
     *
     * @param array<string,\Brevo\Client\Models\GetDeviceBrowserStats> $statsByBrowser statsByBrowser
     *
     * @return $this
     */
    public function setStatsByBrowser(array $statsByBrowser): static
    {
        if (is_null($statsByBrowser)) {
            throw new InvalidArgumentException('non-nullable statsByBrowser cannot be null');
        }
        $this->container['statsByBrowser'] = $statsByBrowser;

        return $this;
    }
}


