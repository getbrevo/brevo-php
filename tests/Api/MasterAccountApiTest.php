<?php
/**
 * MasterAccountApiTest
 * PHP version 8.1
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Brevo\Client\Test\Api;

use Brevo\Client\Configuration;
use Brevo\Client\ApiException;
use Brevo\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * MasterAccountApiTest Class Doc Comment
 *
 * @package  Brevo\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MasterAccountApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for corporateGroupIdDelete
     *
     * Delete a group.
     *
     */
    public function testCorporateGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateGroupIdGet
     *
     * GET a group details.
     *
     */
    public function testCorporateGroupIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateGroupIdPut
     *
     * Update a group of sub-accounts.
     *
     */
    public function testCorporateGroupIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateGroupPost
     *
     * Create a group of sub-accounts.
     *
     */
    public function testCorporateGroupPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateGroupUnlinkGroupIdSubAccountsPut
     *
     * Delete sub-account from group.
     *
     */
    public function testCorporateGroupUnlinkGroupIdSubAccountsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateIpGet
     *
     * List of all IPs.
     *
     */
    public function testCorporateIpGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateMasterAccountGet
     *
     * Get the details of requested master account.
     *
     */
    public function testCorporateMasterAccountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSsoTokenPost
     *
     * Generate SSO token to access admin account.
     *
     */
    public function testCorporateSsoTokenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountGet
     *
     * Get the list of all the sub-accounts of the master account..
     *
     */
    public function testCorporateSubAccountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIdApplicationsTogglePut
     *
     * Enable/disable sub-account application(s).
     *
     */
    public function testCorporateSubAccountIdApplicationsTogglePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIdDelete
     *
     * Delete a sub-account.
     *
     */
    public function testCorporateSubAccountIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIdGet
     *
     * Get sub-account details.
     *
     */
    public function testCorporateSubAccountIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIdPlanPut
     *
     * Update sub-account plan.
     *
     */
    public function testCorporateSubAccountIdPlanPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIpAssociatePost
     *
     * Associate an IP to sub-accounts.
     *
     */
    public function testCorporateSubAccountIpAssociatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountIpDissociatePut
     *
     * Dissociate an IP to sub-accounts.
     *
     */
    public function testCorporateSubAccountIpDissociatePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountKeyPost
     *
     * Create an API key for a sub-account.
     *
     */
    public function testCorporateSubAccountKeyPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountPost
     *
     * Create a new sub-account under a master account..
     *
     */
    public function testCorporateSubAccountPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateSubAccountSsoTokenPost
     *
     * Generate SSO token to access sub-account.
     *
     */
    public function testCorporateSubAccountSsoTokenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateUserEmailPermissionsPut
     *
     * Change admin user permissions.
     *
     */
    public function testCorporateUserEmailPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateUserInvitationActionEmailPut
     *
     * Resend / cancel admin user invitation.
     *
     */
    public function testCorporateUserInvitationActionEmailPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corporateUserRevokeEmailDelete
     *
     * Revoke an admin user.
     *
     */
    public function testCorporateUserRevokeEmailDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountActivity_0
     *
     * Get user activity logs.
     *
     */
    public function testGetAccountActivity0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCorporateInvitedUsersList
     *
     * Get the list of all admin users.
     *
     */
    public function testGetCorporateInvitedUsersList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCorporateUserPermission
     *
     * Check admin user permissions.
     *
     */
    public function testGetCorporateUserPermission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSubAccountGroups
     *
     * Get the list of groups.
     *
     */
    public function testGetSubAccountGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for inviteAdminUser
     *
     * Send invitation to an admin user.
     *
     */
    public function testInviteAdminUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
